{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { APPEND_COLUMN_CONFIG_STRATEGY, ColumnSorting } from \"../columnSorting/index.mjs\";\nimport { registerRootComparator } from \"../columnSorting/sortService/index.mjs\";\nimport { wasHeaderClickedProperly } from \"../columnSorting/utils.mjs\";\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { rootComparator } from \"./rootComparator.mjs\";\nimport { warnAboutPluginsConflict } from \"./utils.mjs\";\nimport { getClassesToAdd, getClassesToRemove } from \"./domHelpers.mjs\";\nexport const PLUGIN_KEY = 'multiColumnSorting';\nexport const PLUGIN_PRIORITY = 170;\nconst CONFLICTED_PLUGIN_KEY = 'columnSorting';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nregisterRootComparator(PLUGIN_KEY, rootComparator);\n\n/**\n * @plugin MultiColumnSorting\n * @class MultiColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#multiColumnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * multiColumnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1 and then sort descending for column at index 0)\n * multiColumnSorting: {\n *   initialConfig: [{\n *     column: 1,\n *     sortOrder: 'asc'\n *   }, {\n *     column: 0,\n *     sortOrder: 'desc'\n *   }]\n * }\n *\n * // as an object which define specific sorting options for all columns\n * multiColumnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: {@link Options#columns}\n * columns: [{\n *   multiColumnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]\n * ```\n */\nexport class MultiColumnSorting extends ColumnSorting {\n  constructor() {\n    super(...arguments);\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {string}\n     */\n    _defineProperty(this, \"pluginKey\", PLUGIN_KEY);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link MultiColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return super.isEnabled();\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (!this.enabled && this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[CONFLICTED_PLUGIN_KEY]) {\n      warnAboutPluginsConflict();\n    }\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    super.registerShortcuts();\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Shift', 'Enter']],\n      callback: () => {\n        const {\n          highlight\n        } = this.hot.getSelectedRangeLast();\n        if (highlight.row === -1 && highlight.col >= 0) {\n          this.sort(this.getNextSortConfig(highlight.col, APPEND_COLUMN_CONFIG_STRATEGY));\n        }\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        const highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;\n        return highlight && this.hot.selection.isCellVisible(highlight) && highlight.isHeader();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    super.unregisterShortcuts();\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Sorts the table by chosen columns and orders.\n   *\n   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   *\n   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n   *\n   * @example\n   * ```js\n   * // sort ascending first visual column\n   * hot.getPlugin('multiColumnSorting').sort({ column: 0, sortOrder: 'asc' });\n   *\n   * // sort first two visual column in the defined sequence\n   * hot.getPlugin('multiColumnSorting').sort([{\n   *   column: 1, sortOrder: 'asc'\n   * }, {\n   *   column: 0, sortOrder: 'desc'\n   * }]);\n   * ```\n   *\n   * @fires Hooks#beforeColumnSort\n   * @fires Hooks#afterColumnSort\n   */\n  sort(sortConfig) {\n    super.sort(sortConfig);\n  }\n\n  /**\n   * Clear the sort performed on the table.\n   */\n  clearSort() {\n    super.clearSort();\n  }\n\n  /**\n   * Checks if the table is sorted (any column have to be sorted).\n   *\n   * @returns {boolean}\n   */\n  isSorted() {\n    return super.isSorted();\n  }\n\n  /**\n   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   *\n   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n   *\n   * @param {number} [column] Visual column index.\n   * @returns {undefined|object|Array}\n   */\n  getSortConfig(column) {\n    return super.getSortConfig(column);\n  }\n\n  /**\n   * @description\n   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n   * Note: Please keep in mind that this method doesn't re-render the table.\n   *\n   * @example\n   * ```js\n   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n   *   const columnSortPlugin = this.getPlugin('multiColumnSorting');\n   *\n   *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n   *\n   *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n   *\n   *   this.loadData(newData); // Load new data set and re-render the table.\n   *\n   *   return false; // The blockade for the default sort action.\n   * }\n   * ```\n   *\n   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   */\n  setSortConfig(sortConfig) {\n    super.setSortConfig(sortConfig);\n  }\n\n  /**\n   * Get normalized sort configs.\n   *\n   * @private\n   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   * @returns {Array}\n   */\n  getNormalizedSortConfigs() {\n    let sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (Array.isArray(sortConfig)) {\n      return sortConfig;\n    }\n    return [sortConfig];\n  }\n\n  /**\n   * Update header classes.\n   *\n   * @private\n   * @param {HTMLElement} headerSpanElement Header span element.\n   * @param {...*} args Extra arguments for helpers.\n   */\n  updateHeaderClasses(headerSpanElement) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    super.updateHeaderClasses(headerSpanElement, ...args);\n    removeClass(headerSpanElement, getClassesToRemove(headerSpanElement));\n    if (this.enabled !== false) {\n      addClass(headerSpanElement, getClassesToAdd(...args));\n    }\n  }\n\n  /**\n   * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n   * for `updateSettings` in specific situations.\n   *\n   * @private\n   * @param {object} newSettings New settings object.\n   */\n  onUpdateSettings(newSettings) {\n    if (this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[CONFLICTED_PLUGIN_KEY]) {\n      warnAboutPluginsConflict();\n    }\n    super.onUpdateSettings(newSettings);\n  }\n\n  /**\n   * Callback for the `onAfterOnCellMouseDown` hook.\n   *\n   * @private\n   * @param {Event} event Event which are provided by hook.\n   * @param {CellCoords} coords Visual coords of the selected cell.\n   */\n  onAfterOnCellMouseDown(event, coords) {\n    if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n      return;\n    }\n    if (this.wasClickableHeaderClicked(event, coords.col)) {\n      if (this.hot.getShortcutManager().isCtrlPressed()) {\n        this.hot.deselectCell();\n        this.hot.selectColumns(coords.col);\n        this.sort(this.getNextSortConfig(coords.col, APPEND_COLUMN_CONFIG_STRATEGY));\n      } else {\n        this.sort(this.getColumnNextConfig(coords.col));\n      }\n    }\n  }\n}","map":{"version":3,"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","APPEND_COLUMN_CONFIG_STRATEGY","ColumnSorting","registerRootComparator","wasHeaderClickedProperly","addClass","removeClass","rootComparator","warnAboutPluginsConflict","getClassesToAdd","getClassesToRemove","PLUGIN_KEY","PLUGIN_PRIORITY","CONFLICTED_PLUGIN_KEY","SHORTCUTS_GROUP","MultiColumnSorting","constructor","arguments","isEnabled","enablePlugin","enabled","hot","getSettings","pluginKey","disablePlugin","registerShortcuts","getShortcutManager","getContext","addShortcut","keys","callback","highlight","getSelectedRangeLast","row","col","sort","getNextSortConfig","runOnlyIf","_this$hot$getSelected","selection","isCellVisible","isHeader","group","unregisterShortcuts","removeShortcutsByGroup","sortConfig","clearSort","isSorted","getSortConfig","column","setSortConfig","getNormalizedSortConfigs","length","undefined","Array","isArray","updateHeaderClasses","headerSpanElement","_len","args","_key","onUpdateSettings","newSettings","onAfterOnCellMouseDown","event","coords","wasClickableHeaderClicked","isCtrlPressed","deselectCell","selectColumns","getColumnNextConfig"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/plugins/multiColumnSorting/multiColumnSorting.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { APPEND_COLUMN_CONFIG_STRATEGY, ColumnSorting } from \"../columnSorting/index.mjs\";\nimport { registerRootComparator } from \"../columnSorting/sortService/index.mjs\";\nimport { wasHeaderClickedProperly } from \"../columnSorting/utils.mjs\";\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { rootComparator } from \"./rootComparator.mjs\";\nimport { warnAboutPluginsConflict } from \"./utils.mjs\";\nimport { getClassesToAdd, getClassesToRemove } from \"./domHelpers.mjs\";\nexport const PLUGIN_KEY = 'multiColumnSorting';\nexport const PLUGIN_PRIORITY = 170;\nconst CONFLICTED_PLUGIN_KEY = 'columnSorting';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nregisterRootComparator(PLUGIN_KEY, rootComparator);\n\n/**\n * @plugin MultiColumnSorting\n * @class MultiColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#multiColumnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * multiColumnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1 and then sort descending for column at index 0)\n * multiColumnSorting: {\n *   initialConfig: [{\n *     column: 1,\n *     sortOrder: 'asc'\n *   }, {\n *     column: 0,\n *     sortOrder: 'desc'\n *   }]\n * }\n *\n * // as an object which define specific sorting options for all columns\n * multiColumnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: {@link Options#columns}\n * columns: [{\n *   multiColumnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]\n * ```\n */\nexport class MultiColumnSorting extends ColumnSorting {\n  constructor() {\n    super(...arguments);\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {string}\n     */\n    _defineProperty(this, \"pluginKey\", PLUGIN_KEY);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link MultiColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return super.isEnabled();\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (!this.enabled && this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[CONFLICTED_PLUGIN_KEY]) {\n      warnAboutPluginsConflict();\n    }\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    super.registerShortcuts();\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Shift', 'Enter']],\n      callback: () => {\n        const {\n          highlight\n        } = this.hot.getSelectedRangeLast();\n        if (highlight.row === -1 && highlight.col >= 0) {\n          this.sort(this.getNextSortConfig(highlight.col, APPEND_COLUMN_CONFIG_STRATEGY));\n        }\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        const highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;\n        return highlight && this.hot.selection.isCellVisible(highlight) && highlight.isHeader();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    super.unregisterShortcuts();\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Sorts the table by chosen columns and orders.\n   *\n   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   *\n   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n   *\n   * @example\n   * ```js\n   * // sort ascending first visual column\n   * hot.getPlugin('multiColumnSorting').sort({ column: 0, sortOrder: 'asc' });\n   *\n   * // sort first two visual column in the defined sequence\n   * hot.getPlugin('multiColumnSorting').sort([{\n   *   column: 1, sortOrder: 'asc'\n   * }, {\n   *   column: 0, sortOrder: 'desc'\n   * }]);\n   * ```\n   *\n   * @fires Hooks#beforeColumnSort\n   * @fires Hooks#afterColumnSort\n   */\n  sort(sortConfig) {\n    super.sort(sortConfig);\n  }\n\n  /**\n   * Clear the sort performed on the table.\n   */\n  clearSort() {\n    super.clearSort();\n  }\n\n  /**\n   * Checks if the table is sorted (any column have to be sorted).\n   *\n   * @returns {boolean}\n   */\n  isSorted() {\n    return super.isSorted();\n  }\n\n  /**\n   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   *\n   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n   *\n   * @param {number} [column] Visual column index.\n   * @returns {undefined|object|Array}\n   */\n  getSortConfig(column) {\n    return super.getSortConfig(column);\n  }\n\n  /**\n   * @description\n   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n   * Note: Please keep in mind that this method doesn't re-render the table.\n   *\n   * @example\n   * ```js\n   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n   *   const columnSortPlugin = this.getPlugin('multiColumnSorting');\n   *\n   *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n   *\n   *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n   *\n   *   this.loadData(newData); // Load new data set and re-render the table.\n   *\n   *   return false; // The blockade for the default sort action.\n   * }\n   * ```\n   *\n   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   */\n  setSortConfig(sortConfig) {\n    super.setSortConfig(sortConfig);\n  }\n\n  /**\n   * Get normalized sort configs.\n   *\n   * @private\n   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   * @returns {Array}\n   */\n  getNormalizedSortConfigs() {\n    let sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (Array.isArray(sortConfig)) {\n      return sortConfig;\n    }\n    return [sortConfig];\n  }\n\n  /**\n   * Update header classes.\n   *\n   * @private\n   * @param {HTMLElement} headerSpanElement Header span element.\n   * @param {...*} args Extra arguments for helpers.\n   */\n  updateHeaderClasses(headerSpanElement) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    super.updateHeaderClasses(headerSpanElement, ...args);\n    removeClass(headerSpanElement, getClassesToRemove(headerSpanElement));\n    if (this.enabled !== false) {\n      addClass(headerSpanElement, getClassesToAdd(...args));\n    }\n  }\n\n  /**\n   * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n   * for `updateSettings` in specific situations.\n   *\n   * @private\n   * @param {object} newSettings New settings object.\n   */\n  onUpdateSettings(newSettings) {\n    if (this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[CONFLICTED_PLUGIN_KEY]) {\n      warnAboutPluginsConflict();\n    }\n    super.onUpdateSettings(newSettings);\n  }\n\n  /**\n   * Callback for the `onAfterOnCellMouseDown` hook.\n   *\n   * @private\n   * @param {Event} event Event which are provided by hook.\n   * @param {CellCoords} coords Visual coords of the selected cell.\n   */\n  onAfterOnCellMouseDown(event, coords) {\n    if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n      return;\n    }\n    if (this.wasClickableHeaderClicked(event, coords.col)) {\n      if (this.hot.getShortcutManager().isCtrlPressed()) {\n        this.hot.deselectCell();\n        this.hot.selectColumns(coords.col);\n        this.sort(this.getNextSortConfig(coords.col, APPEND_COLUMN_CONFIG_STRATEGY));\n      } else {\n        this.sort(this.getColumnNextConfig(coords.col));\n      }\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}