{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nimport { ChangesObserver } from \"./observer.mjs\";\nimport { arrayDiff } from \"./utils.mjs\";\n/**\n * The ChangesObservable module is an object that represents a resource that provides\n * the ability to observe the changes that happened in the index map indexes during\n * the code running.\n *\n * @private\n * @class ChangesObservable\n */\nvar _observers = /*#__PURE__*/new WeakMap();\nvar _indexMatrix = /*#__PURE__*/new WeakMap();\nvar _currentIndexState = /*#__PURE__*/new WeakMap();\nvar _isMatrixIndexesInitialized = /*#__PURE__*/new WeakMap();\nvar _initialIndexValue = /*#__PURE__*/new WeakMap();\nexport class ChangesObservable {\n  constructor() {\n    let {\n      initialIndexValue\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    /**\n     * The list of registered ChangesObserver instances.\n     *\n     * @type {ChangesObserver[]}\n     */\n    _classPrivateFieldInitSpec(this, _observers, {\n      writable: true,\n      value: new Set()\n    });\n    /**\n     * An array with default values that act as a base array that will be compared with\n     * the last saved index state. The changes are generated and immediately send through\n     * the newly created ChangesObserver object. Thanks to that, the observer initially has\n     * all information about what indexes are currently changed.\n     *\n     * @type {Array}\n     */\n    _classPrivateFieldInitSpec(this, _indexMatrix, {\n      writable: true,\n      value: []\n    });\n    /**\n     * An array that holds the indexes state that is currently valid. The value is changed on every\n     * index mapper cache update.\n     *\n     * @type {Array}\n     */\n    _classPrivateFieldInitSpec(this, _currentIndexState, {\n      writable: true,\n      value: []\n    });\n    /**\n     * The flag determines if the observable is initialized or not. Not initialized object creates\n     * index matrix once while emitting new changes.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isMatrixIndexesInitialized, {\n      writable: true,\n      value: false\n    });\n    /**\n     * The initial index value allows control from what value the index matrix array will be created.\n     * Changing that value changes how the array diff generates the changes for the initial data\n     * sent to the subscribers. For example, the changes can be triggered by detecting the changes\n     * from `false` to `true` value or vice versa. Generally, it depends on which index map type\n     * the Observable will work with. For \"hiding\" or \"trimming\" index types, it will be boolean\n     * values. For various index maps, it can be anything, but I suspect that the most appropriate\n     * initial value will be \"undefined\" in that case.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _initialIndexValue, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldSet(this, _initialIndexValue, initialIndexValue !== null && initialIndexValue !== void 0 ? initialIndexValue : false);\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Creates and returns a new instance of the ChangesObserver object. The resource\n   * allows subscribing to the index changes that during the code running may change.\n   * Changes are emitted as an array of the index change. Each change is represented\n   * separately as an object with `op`, `index`, `oldValue`, and `newValue` props.\n   *\n   * For example:\n   * ```\n   * [\n   *   { op: 'replace', index: 1, oldValue: false, newValue: true },\n   *   { op: 'replace', index: 3, oldValue: false, newValue: true },\n   *   { op: 'insert', index: 4, oldValue: false, newValue: true },\n   * ]\n   * // or when the new index map changes have less indexes\n   * [\n   *   { op: 'replace', index: 1, oldValue: false, newValue: true },\n   *   { op: 'remove', index: 4, oldValue: false, newValue: true },\n   * ]\n   * ```\n   *\n   * @returns {ChangesObserver}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  createObserver() {\n    const observer = new ChangesObserver();\n    _classPrivateFieldGet(this, _observers).add(observer);\n    observer.addLocalHook('unsubscribe', () => {\n      _classPrivateFieldGet(this, _observers).delete(observer);\n    });\n    observer._writeInitialChanges(arrayDiff(_classPrivateFieldGet(this, _indexMatrix), _classPrivateFieldGet(this, _currentIndexState)));\n    return observer;\n  }\n\n  /**\n   * The method is an entry point for triggering new index map changes. Emitting the\n   * changes triggers comparing algorithm which compares last saved state with a new\n   * state. When there are some differences, the changes are sent to all subscribers.\n   *\n   * @param {Array} indexesState An array with index map state.\n   */\n  emit(indexesState) {\n    let currentIndexState = _classPrivateFieldGet(this, _currentIndexState);\n    if (!_classPrivateFieldGet(this, _isMatrixIndexesInitialized) || _classPrivateFieldGet(this, _indexMatrix).length !== indexesState.length) {\n      if (indexesState.length === 0) {\n        indexesState = new Array(currentIndexState.length).fill(_classPrivateFieldGet(this, _initialIndexValue));\n      } else {\n        _classPrivateFieldSet(this, _indexMatrix, new Array(indexesState.length).fill(_classPrivateFieldGet(this, _initialIndexValue)));\n      }\n      if (!_classPrivateFieldGet(this, _isMatrixIndexesInitialized)) {\n        _classPrivateFieldSet(this, _isMatrixIndexesInitialized, true);\n        currentIndexState = _classPrivateFieldGet(this, _indexMatrix);\n      }\n    }\n    const changes = arrayDiff(currentIndexState, indexesState);\n    _classPrivateFieldGet(this, _observers).forEach(observer => observer._write(changes));\n    _classPrivateFieldSet(this, _currentIndexState, indexesState);\n  }\n}","map":{"version":3,"names":["_classPrivateFieldInitSpec","obj","privateMap","value","_checkPrivateRedeclaration","set","privateCollection","has","TypeError","_classPrivateFieldGet","receiver","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","call","_classPrivateFieldSet","_classApplyDescriptorSet","action","writable","ChangesObserver","arrayDiff","_observers","WeakMap","_indexMatrix","_currentIndexState","_isMatrixIndexesInitialized","_initialIndexValue","ChangesObservable","constructor","initialIndexValue","arguments","length","undefined","Set","createObserver","observer","add","addLocalHook","delete","_writeInitialChanges","emit","indexesState","currentIndexState","Array","fill","changes","forEach","_write"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/translations/changesObservable/observable.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { ChangesObserver } from \"./observer.mjs\";\nimport { arrayDiff } from \"./utils.mjs\";\n/**\n * The ChangesObservable module is an object that represents a resource that provides\n * the ability to observe the changes that happened in the index map indexes during\n * the code running.\n *\n * @private\n * @class ChangesObservable\n */\nvar _observers = /*#__PURE__*/new WeakMap();\nvar _indexMatrix = /*#__PURE__*/new WeakMap();\nvar _currentIndexState = /*#__PURE__*/new WeakMap();\nvar _isMatrixIndexesInitialized = /*#__PURE__*/new WeakMap();\nvar _initialIndexValue = /*#__PURE__*/new WeakMap();\nexport class ChangesObservable {\n  constructor() {\n    let {\n      initialIndexValue\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    /**\n     * The list of registered ChangesObserver instances.\n     *\n     * @type {ChangesObserver[]}\n     */\n    _classPrivateFieldInitSpec(this, _observers, {\n      writable: true,\n      value: new Set()\n    });\n    /**\n     * An array with default values that act as a base array that will be compared with\n     * the last saved index state. The changes are generated and immediately send through\n     * the newly created ChangesObserver object. Thanks to that, the observer initially has\n     * all information about what indexes are currently changed.\n     *\n     * @type {Array}\n     */\n    _classPrivateFieldInitSpec(this, _indexMatrix, {\n      writable: true,\n      value: []\n    });\n    /**\n     * An array that holds the indexes state that is currently valid. The value is changed on every\n     * index mapper cache update.\n     *\n     * @type {Array}\n     */\n    _classPrivateFieldInitSpec(this, _currentIndexState, {\n      writable: true,\n      value: []\n    });\n    /**\n     * The flag determines if the observable is initialized or not. Not initialized object creates\n     * index matrix once while emitting new changes.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isMatrixIndexesInitialized, {\n      writable: true,\n      value: false\n    });\n    /**\n     * The initial index value allows control from what value the index matrix array will be created.\n     * Changing that value changes how the array diff generates the changes for the initial data\n     * sent to the subscribers. For example, the changes can be triggered by detecting the changes\n     * from `false` to `true` value or vice versa. Generally, it depends on which index map type\n     * the Observable will work with. For \"hiding\" or \"trimming\" index types, it will be boolean\n     * values. For various index maps, it can be anything, but I suspect that the most appropriate\n     * initial value will be \"undefined\" in that case.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _initialIndexValue, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldSet(this, _initialIndexValue, initialIndexValue !== null && initialIndexValue !== void 0 ? initialIndexValue : false);\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Creates and returns a new instance of the ChangesObserver object. The resource\n   * allows subscribing to the index changes that during the code running may change.\n   * Changes are emitted as an array of the index change. Each change is represented\n   * separately as an object with `op`, `index`, `oldValue`, and `newValue` props.\n   *\n   * For example:\n   * ```\n   * [\n   *   { op: 'replace', index: 1, oldValue: false, newValue: true },\n   *   { op: 'replace', index: 3, oldValue: false, newValue: true },\n   *   { op: 'insert', index: 4, oldValue: false, newValue: true },\n   * ]\n   * // or when the new index map changes have less indexes\n   * [\n   *   { op: 'replace', index: 1, oldValue: false, newValue: true },\n   *   { op: 'remove', index: 4, oldValue: false, newValue: true },\n   * ]\n   * ```\n   *\n   * @returns {ChangesObserver}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  createObserver() {\n    const observer = new ChangesObserver();\n    _classPrivateFieldGet(this, _observers).add(observer);\n    observer.addLocalHook('unsubscribe', () => {\n      _classPrivateFieldGet(this, _observers).delete(observer);\n    });\n    observer._writeInitialChanges(arrayDiff(_classPrivateFieldGet(this, _indexMatrix), _classPrivateFieldGet(this, _currentIndexState)));\n    return observer;\n  }\n\n  /**\n   * The method is an entry point for triggering new index map changes. Emitting the\n   * changes triggers comparing algorithm which compares last saved state with a new\n   * state. When there are some differences, the changes are sent to all subscribers.\n   *\n   * @param {Array} indexesState An array with index map state.\n   */\n  emit(indexesState) {\n    let currentIndexState = _classPrivateFieldGet(this, _currentIndexState);\n    if (!_classPrivateFieldGet(this, _isMatrixIndexesInitialized) || _classPrivateFieldGet(this, _indexMatrix).length !== indexesState.length) {\n      if (indexesState.length === 0) {\n        indexesState = new Array(currentIndexState.length).fill(_classPrivateFieldGet(this, _initialIndexValue));\n      } else {\n        _classPrivateFieldSet(this, _indexMatrix, new Array(indexesState.length).fill(_classPrivateFieldGet(this, _initialIndexValue)));\n      }\n      if (!_classPrivateFieldGet(this, _isMatrixIndexesInitialized)) {\n        _classPrivateFieldSet(this, _isMatrixIndexesInitialized, true);\n        currentIndexState = _classPrivateFieldGet(this, _indexMatrix);\n      }\n    }\n    const changes = arrayDiff(currentIndexState, indexesState);\n    _classPrivateFieldGet(this, _observers).forEach(observer => observer._write(changes));\n    _classPrivateFieldSet(this, _currentIndexState, indexesState);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}