{"ast":null,"code":"import { SetNavbarVariant, SetSidebarSkin, ToggleDarkMode } from '@/store/ui/actions';\nimport { NAVBAR_LIGHT_VARIANTS, NAVBAR_DARK_VARIANTS, SIDEBAR_DARK_SKINS, SIDEBAR_LIGHT_SKINS } from '@/utils/themes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nvar _c0 = function () {\n  return [];\n};\nvar ControlSidebarComponent = /** @class */function () {\n  function ControlSidebarComponent(store) {\n    this.store = store;\n    this.classes = 'control-sidebar control-sidebar-dark';\n    this.navbarLightVariants = NAVBAR_LIGHT_VARIANTS;\n    this.navbarDarkVariants = NAVBAR_DARK_VARIANTS;\n    this.darkSidebarSkins = SIDEBAR_DARK_SKINS;\n    this.lightSidebarSkins = SIDEBAR_LIGHT_SKINS;\n  }\n  ControlSidebarComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.ui = this.store.select('ui');\n    this.ui.subscribe(function (state) {\n      _this.navbarVariant = state.navbarVariant;\n      _this.darkMode = state.darkMode;\n      _this.sidebarSkin = state.sidebarSkin;\n    });\n  };\n  ControlSidebarComponent.prototype.handleDarkModeChange = function (event) {\n    console.log('value', event.target.checked);\n    this.store.dispatch(new ToggleDarkMode());\n  };\n  ControlSidebarComponent.prototype.onNavbarVariantChange = function (event) {\n    console.log('value', event.target.value);\n    this.store.dispatch(new SetNavbarVariant(event.target.value));\n  };\n  ControlSidebarComponent.prototype.onSidebarSkinChange = function (event) {\n    console.log('value', event.target.value);\n    this.store.dispatch(new SetSidebarSkin(event.target.value));\n  };\n  ControlSidebarComponent.ɵfac = function ControlSidebarComponent_Factory(t) {\n    return new (t || ControlSidebarComponent)(i0.ɵɵdirectiveInject(i1.Store));\n  };\n  ControlSidebarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ControlSidebarComponent,\n    selectors: [[\"app-control-sidebar\"]],\n    hostVars: 2,\n    hostBindings: function ControlSidebarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.classes);\n      }\n    },\n    decls: 12,\n    vars: 12,\n    consts: [[1, \"mb-2\"], [2, \"padding\", \"8px 0\"], [3, \"change\"], [\"type\", \"custom\", \"label\", \"Light Navbar Variants\", 1, \"mt-3\", 3, \"value\", \"options\", \"change\"], [\"type\", \"custom\", \"label\", \" Dark Navbar Variants\", 1, \"mt-3\", 3, \"value\", \"options\", \"change\"], [\"type\", \"custom\", \"disabled\", \"true\", \"label\", \"Accent Color Variants\", 1, \"mt-3\", 3, \"options\"], [\"type\", \"custom\", \"label\", \"Light Sidebar Variants\", 1, \"mt-3\", 3, \"value\", \"options\", \"change\"], [\"type\", \"custom\", \"label\", \"Dark Sidebar Variants\", 1, \"mt-3\", 3, \"value\", \"options\", \"change\"], [\"type\", \"custom\", \"disabled\", \"true\", \"label\", \"Brand Logo Variants\", 1, \"mt-3\", 3, \"options\"]],\n    template: function ControlSidebarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h5\");\n        i0.ɵɵtext(1, \"Customize AdminLTE\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"hr\", 0);\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"pf-checkbox\", 2);\n        i0.ɵɵlistener(\"change\", function ControlSidebarComponent_Template_pf_checkbox_change_4_listener($event) {\n          return ctx.handleDarkModeChange($event);\n        });\n        i0.ɵɵtext(5, \" Dark mode \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"pf-select\", 3);\n        i0.ɵɵlistener(\"change\", function ControlSidebarComponent_Template_pf_select_change_6_listener($event) {\n          return ctx.onNavbarVariantChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"pf-select\", 4);\n        i0.ɵɵlistener(\"change\", function ControlSidebarComponent_Template_pf_select_change_7_listener($event) {\n          return ctx.onNavbarVariantChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"pf-select\", 5);\n        i0.ɵɵelementStart(9, \"pf-select\", 6);\n        i0.ɵɵlistener(\"change\", function ControlSidebarComponent_Template_pf_select_change_9_listener($event) {\n          return ctx.onSidebarSkinChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"pf-select\", 7);\n        i0.ɵɵlistener(\"change\", function ControlSidebarComponent_Template_pf_select_change_10_listener($event) {\n          return ctx.onSidebarSkinChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"pf-select\", 8);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"value\", ctx.navbarVariant)(\"options\", ctx.navbarLightVariants);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.navbarVariant)(\"options\", ctx.navbarDarkVariants);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"options\", i0.ɵɵpureFunction0(10, _c0));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.sidebarSkin)(\"options\", ctx.lightSidebarSkins);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.sidebarSkin)(\"options\", ctx.darkSidebarSkins);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"options\", i0.ɵɵpureFunction0(11, _c0));\n      }\n    },\n    styles: [\"[_nghost-%COMP%] {\\n  padding: 16px;\\n  padding-top: 73px;\\n}\\n/*# sourceURL=webpack://./src/app/modules/main/control-sidebar/control-sidebar.component.scss */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9kdWxlcy9tYWluL2NvbnRyb2wtc2lkZWJhci9jb250cm9sLXNpZGViYXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFSSxhQUFBO0VBQ0EsaUJBQUE7QUFBSiIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcbiAgcGFkZGluZzogMTZweDtcbiAgcGFkZGluZy10b3A6IDczcHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n  return ControlSidebarComponent;\n}();\nexport { ControlSidebarComponent };","map":{"version":3,"mappings":"AACA,SACIA,gBAAgB,EAChBC,cAAc,EACdC,cAAc,QACX,oBAAoB;AAE3B,SAEIC,qBAAqB,EACrBC,oBAAoB,EACpBC,kBAAkB,EAClBC,mBAAmB,QAChB,gBAAgB;;;;;;AAKvB;EAiBI,iCAAoBC,KAAsB;IAAtB,UAAK,GAALA,KAAK;IAXH,YAAO,GACzB,sCAAsC;IACnC,wBAAmB,GAAkBJ,qBAAqB;IAC1D,uBAAkB,GAAkBC,oBAAoB;IACxD,qBAAgB,GAAkBC,kBAAkB;IACpD,sBAAiB,GAAkBC,mBAAmB;EAMhB;EAE7CE,0CAAQ,GAAR;IAAA;IACI,IAAI,CAACC,EAAE,GAAG,IAAI,CAACF,KAAK,CAACG,MAAM,CAAC,IAAI,CAAC;IACjC,IAAI,CAACD,EAAE,CAACE,SAAS,CAAC,UAACC,KAAc;MAC7BC,KAAI,CAACC,aAAa,GAAGF,KAAK,CAACE,aAAa;MACxCD,KAAI,CAACE,QAAQ,GAAGH,KAAK,CAACG,QAAQ;MAC9BF,KAAI,CAACG,WAAW,GAAGJ,KAAK,CAACI,WAAW;IACxC,CAAC,CAAC;EACN,CAAC;EAEMR,sDAAoB,GAA3B,UAA4BS,KAAU;IAClCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAACG,MAAM,CAACC,OAAO,CAAC;IAC1C,IAAI,CAACd,KAAK,CAACe,QAAQ,CAAC,IAAIpB,cAAc,EAAE,CAAC;EAC7C,CAAC;EAEMM,uDAAqB,GAA5B,UAA6BS,KAAU;IACnCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAACG,MAAM,CAACG,KAAK,CAAC;IACxC,IAAI,CAAChB,KAAK,CAACe,QAAQ,CAAC,IAAItB,gBAAgB,CAACiB,KAAK,CAACG,MAAM,CAACG,KAAK,CAAC,CAAC;EACjE,CAAC;EAEMf,qDAAmB,GAA1B,UAA2BS,KAAU;IACjCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAACG,MAAM,CAACG,KAAK,CAAC;IACxC,IAAI,CAAChB,KAAK,CAACe,QAAQ,CAAC,IAAIrB,cAAc,CAACgB,KAAK,CAACG,MAAM,CAACG,KAAK,CAAC,CAAC;EAC/D,CAAC;;qBApCQf,uBAAuB;EAAA;;UAAvBA,uBAAuB;IAAAgB;IAAAC;IAAAC;MAAA;;;;;;;;;QCvBpCC,0BAAI;QAAAA,kCAAkB;QAAAA,iBAAK;QAC3BA,wBAAmB;QACnBA,8BAA4B;QACXA;UAAA,OAAUC,gCAA4B;QAAA,EAAC;QAChDD,2BACJ;QAAAA,iBAAc;QACdA,oCAOC;QADGA;UAAA,OAAUC,iCAA6B;QAAA,EAAC;QAE5CD,iBAAY;QACZA,oCAOC;QADGA;UAAA,OAAUC,iCAA6B;QAAA,EAAC;QAE5CD,iBAAY;QACZA,+BAOY;QACZA,oCAOC;QADGA;UAAA,OAAUC,+BAA2B;QAAA,EAAC;QAE1CD,iBAAY;QACZA,qCAOC;QADGA;UAAA,OAAUC,+BAA2B;QAAA,EAAC;QAE1CD,iBAAY;QAEZA,gCAOY;QAChBA,iBAAM;;;QAnDEA,eAAuB;QAAvBA,yCAAuB;QASvBA,eAAuB;QAAvBA,yCAAuB;QASvBA,eAAc;QAAdA,qDAAc;QAQdA,eAAqB;QAArBA,uCAAqB;QASrBA,eAAqB;QAArBA,uCAAqB;QAUrBA,eAAc;QAAdA,qDAAc;;;;;gCDrDtB;CA4DC,EA1CD;SAKanB,uBAAuB","names":["SetNavbarVariant","SetSidebarSkin","ToggleDarkMode","NAVBAR_LIGHT_VARIANTS","NAVBAR_DARK_VARIANTS","SIDEBAR_DARK_SKINS","SIDEBAR_LIGHT_SKINS","store","ControlSidebarComponent","ui","select","subscribe","state","_this","navbarVariant","darkMode","sidebarSkin","event","console","log","target","checked","dispatch","value","selectors","hostVars","hostBindings","i0","ctx"],"sourceRoot":"","sources":["C:\\laragon\\www\\SIAW-Angular-B\\src\\app\\modules\\main\\control-sidebar\\control-sidebar.component.ts","C:\\laragon\\www\\SIAW-Angular-B\\src\\app\\modules\\main\\control-sidebar\\control-sidebar.component.html"],"sourcesContent":["import {AppState} from '@/store/state';\r\nimport {\r\n    SetNavbarVariant,\r\n    SetSidebarSkin,\r\n    ToggleDarkMode\r\n} from '@/store/ui/actions';\r\nimport {UiState} from '@/store/ui/state';\r\nimport {\r\n    Option,\r\n    NAVBAR_LIGHT_VARIANTS,\r\n    NAVBAR_DARK_VARIANTS,\r\n    SIDEBAR_DARK_SKINS,\r\n    SIDEBAR_LIGHT_SKINS\r\n} from '@/utils/themes';\r\nimport {Component, HostBinding, OnInit} from '@angular/core';\r\nimport {Store} from '@ngrx/store';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-control-sidebar',\r\n    templateUrl: './control-sidebar.component.html',\r\n    styleUrls: ['./control-sidebar.component.scss']\r\n})\r\nexport class ControlSidebarComponent implements OnInit {\r\n    @HostBinding('class') classes: string =\r\n        'control-sidebar control-sidebar-dark';\r\n    public navbarLightVariants: Array<Option> = NAVBAR_LIGHT_VARIANTS;\r\n    public navbarDarkVariants: Array<Option> = NAVBAR_DARK_VARIANTS;\r\n    public darkSidebarSkins: Array<Option> = SIDEBAR_DARK_SKINS;\r\n    public lightSidebarSkins: Array<Option> = SIDEBAR_LIGHT_SKINS;\r\n    public ui: Observable<UiState>;\r\n    public navbarVariant: string;\r\n    public darkMode: boolean;\r\n    public sidebarSkin: string;\r\n\r\n    constructor(private store: Store<AppState>) {}\r\n\r\n    ngOnInit(): void {\r\n        this.ui = this.store.select('ui');\r\n        this.ui.subscribe((state: UiState) => {\r\n            this.navbarVariant = state.navbarVariant;\r\n            this.darkMode = state.darkMode;\r\n            this.sidebarSkin = state.sidebarSkin;\r\n        });\r\n    }\r\n\r\n    public handleDarkModeChange(event: any) {\r\n        console.log('value', event.target.checked);\r\n        this.store.dispatch(new ToggleDarkMode());\r\n    }\r\n\r\n    public onNavbarVariantChange(event: any) {\r\n        console.log('value', event.target.value);\r\n        this.store.dispatch(new SetNavbarVariant(event.target.value));\r\n    }\r\n\r\n    public onSidebarSkinChange(event: any) {\r\n        console.log('value', event.target.value);\r\n        this.store.dispatch(new SetSidebarSkin(event.target.value));\r\n    }\r\n}\r\n","<h5>Customize AdminLTE</h5>\r\n<hr class=\"mb-2\" />\r\n<div style=\"padding: 8px 0\">\r\n    <pf-checkbox (change)=\"handleDarkModeChange($event)\">\r\n        Dark mode\r\n    </pf-checkbox>\r\n    <pf-select\r\n        class=\"mt-3\"\r\n        [value]=\"navbarVariant\"\r\n        [options]=\"navbarLightVariants\"\r\n        type=\"custom\"\r\n        label=\"Light Navbar Variants\"\r\n        (change)=\"onNavbarVariantChange($event)\" \r\n    >\r\n    </pf-select>\r\n    <pf-select\r\n        class=\"mt-3\"\r\n        [value]=\"navbarVariant\"\r\n        [options]=\"navbarDarkVariants\"\r\n        type=\"custom\"\r\n        label=\" Dark Navbar Variants\"\r\n        (change)=\"onNavbarVariantChange($event)\"\r\n    >\r\n    </pf-select>\r\n    <pf-select\r\n        class=\"mt-3\"\r\n        [options]=\"[]\"\r\n        type=\"custom\"\r\n        disabled=\"true\"\r\n        label=\"Accent Color Variants\"\r\n    >\r\n    </pf-select>\r\n    <pf-select\r\n        class=\"mt-3\"\r\n        [value]=\"sidebarSkin\"\r\n        [options]=\"lightSidebarSkins\"\r\n        type=\"custom\"\r\n        label=\"Light Sidebar Variants\"\r\n        (change)=\"onSidebarSkinChange($event)\"\r\n    >\r\n    </pf-select>\r\n    <pf-select\r\n        class=\"mt-3\"\r\n        [value]=\"sidebarSkin\"\r\n        [options]=\"darkSidebarSkins\"\r\n        type=\"custom\"\r\n        label=\"Dark Sidebar Variants\"\r\n        (change)=\"onSidebarSkinChange($event)\"\r\n    >\r\n    </pf-select>\r\n\r\n    <pf-select\r\n        class=\"mt-3\"\r\n        [options]=\"[]\"\r\n        type=\"custom\"\r\n        disabled=\"true\"\r\n        label=\"Brand Logo Variants\"\r\n    >\r\n    </pf-select>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}