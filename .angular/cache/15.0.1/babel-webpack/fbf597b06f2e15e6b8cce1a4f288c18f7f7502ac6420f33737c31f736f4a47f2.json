{"ast":null,"code":"// This file handles key-name discrepancies between browsers.\n// For the list of discrepancies, go to: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\nconst mappings = new Map([[' ', 'space'],\n// custom mapping\n['spacebar', 'space'], ['scroll', 'scrolllock'], ['del', 'delete'], ['esc', 'escape'], ['medianexttrack', 'mediatracknext'], ['mediaprevioustrack', 'mediatrackprevious'], ['volumeup', 'audiovolumeup'], ['volumedown', 'audiovolumedown'], ['volumemute', 'audiovolumemute'], ['multiply', '*'], ['add', '+'], ['divide', '/'], ['subtract', '-'], ['left', 'arrowleft'], ['right', 'arrowright'], ['up', 'arrowup'], ['down', 'arrowdown']]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * Get a single, normalized string from the list of the `KeyboardEvent.key` properties.\n *\n * @param {Array<string>} keys The list of the `KeyboardEvent.key` properties\n * @returns {string}\n */\nexport const normalizeKeys = keys => {\n  return keys.map(key => {\n    const lowercaseKey = key.toLowerCase();\n    if (mappings.has(lowercaseKey)) {\n      return mappings.get(lowercaseKey);\n    }\n    return lowercaseKey;\n  }).sort().join('+');\n};\n\n/**\n * Get the list of the `KeyboardEvent.key` properties from a single, normalized string.\n *\n * @param {string} normalizedKeys A single, normalized string that contains the list of the `KeyboardEvent.key` properties\n * @returns {Array<string>}\n */\nexport const getKeysList = normalizedKeys => {\n  return normalizedKeys.split('+');\n};\n\n/**\n * The regex tests if the event.code matches to the pattern and it's used to extract letters and digits from\n * the string.\n */\nconst codeToKeyRegExp = new RegExp('^(?:Key|Digit)([A-Z0-9])$');\nconst keyCodeNames = new Set(['Backquote', 'Minus', 'Equal', 'BracketLeft', 'BracketRight', 'Backslash', 'Semicolon', 'Quote', 'Comma', 'Period', 'Slash']);\n\n/**\n * Normalizes a keyboard event key value to a key before its modification. When the keyboard event\n * is triggered with Alt, Control or Shift keys the `key` property contains modified key e.g. for Alt+L\n * it will be `ł`. But that value is only valid for polish keyboard layout. To fix that limitations, for\n * letters and digits the value is taken from the `code` property which holds original value before\n * transformation.\n *\n * @param {Event} event The KeyboardEvent object.\n * @returns {string}\n */\nexport const normalizeEventKey = _ref => {\n  let {\n    key,\n    code\n  } = _ref;\n  let normalizedKey = key;\n  if (codeToKeyRegExp.test(code)) {\n    normalizedKey = code.replace(codeToKeyRegExp, '$1');\n  } else if (keyCodeNames.has(code)) {\n    normalizedKey = code;\n  }\n  return normalizedKey.toLowerCase();\n};","map":{"version":3,"names":["mappings","Map","normalizeKeys","keys","map","key","lowercaseKey","toLowerCase","has","get","sort","join","getKeysList","normalizedKeys","split","codeToKeyRegExp","RegExp","keyCodeNames","Set","normalizeEventKey","_ref","code","normalizedKey","test","replace"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/shortcuts/utils.mjs"],"sourcesContent":["// This file handles key-name discrepancies between browsers.\n// For the list of discrepancies, go to: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\nconst mappings = new Map([[' ', 'space'],\n// custom mapping\n['spacebar', 'space'], ['scroll', 'scrolllock'], ['del', 'delete'], ['esc', 'escape'], ['medianexttrack', 'mediatracknext'], ['mediaprevioustrack', 'mediatrackprevious'], ['volumeup', 'audiovolumeup'], ['volumedown', 'audiovolumedown'], ['volumemute', 'audiovolumemute'], ['multiply', '*'], ['add', '+'], ['divide', '/'], ['subtract', '-'], ['left', 'arrowleft'], ['right', 'arrowright'], ['up', 'arrowup'], ['down', 'arrowdown']]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * Get a single, normalized string from the list of the `KeyboardEvent.key` properties.\n *\n * @param {Array<string>} keys The list of the `KeyboardEvent.key` properties\n * @returns {string}\n */\nexport const normalizeKeys = keys => {\n  return keys.map(key => {\n    const lowercaseKey = key.toLowerCase();\n    if (mappings.has(lowercaseKey)) {\n      return mappings.get(lowercaseKey);\n    }\n    return lowercaseKey;\n  }).sort().join('+');\n};\n\n/**\n * Get the list of the `KeyboardEvent.key` properties from a single, normalized string.\n *\n * @param {string} normalizedKeys A single, normalized string that contains the list of the `KeyboardEvent.key` properties\n * @returns {Array<string>}\n */\nexport const getKeysList = normalizedKeys => {\n  return normalizedKeys.split('+');\n};\n\n/**\n * The regex tests if the event.code matches to the pattern and it's used to extract letters and digits from\n * the string.\n */\nconst codeToKeyRegExp = new RegExp('^(?:Key|Digit)([A-Z0-9])$');\nconst keyCodeNames = new Set(['Backquote', 'Minus', 'Equal', 'BracketLeft', 'BracketRight', 'Backslash', 'Semicolon', 'Quote', 'Comma', 'Period', 'Slash']);\n\n/**\n * Normalizes a keyboard event key value to a key before its modification. When the keyboard event\n * is triggered with Alt, Control or Shift keys the `key` property contains modified key e.g. for Alt+L\n * it will be `ł`. But that value is only valid for polish keyboard layout. To fix that limitations, for\n * letters and digits the value is taken from the `code` property which holds original value before\n * transformation.\n *\n * @param {Event} event The KeyboardEvent object.\n * @returns {string}\n */\nexport const normalizeEventKey = _ref => {\n  let {\n    key,\n    code\n  } = _ref;\n  let normalizedKey = key;\n  if (codeToKeyRegExp.test(code)) {\n    normalizedKey = code.replace(codeToKeyRegExp, '$1');\n  } else if (keyCodeNames.has(code)) {\n    normalizedKey = code;\n  }\n  return normalizedKey.toLowerCase();\n};"],"mappings":"AAAA;AACA;AACA,MAAMA,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC;AACxC;AACA,CAAC,UAAU,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,oBAAoB,CAAC,EAAE,CAAC,UAAU,EAAE,eAAe,CAAC,EAAE,CAAC,YAAY,EAAE,iBAAiB,CAAC,EAAE,CAAC,YAAY,EAAE,iBAAiB,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;;AAE/a;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGC,IAAI,IAAI;EACnC,OAAOA,IAAI,CAACC,GAAG,CAACC,GAAG,IAAI;IACrB,MAAMC,YAAY,GAAGD,GAAG,CAACE,WAAW,EAAE;IACtC,IAAIP,QAAQ,CAACQ,GAAG,CAACF,YAAY,CAAC,EAAE;MAC9B,OAAON,QAAQ,CAACS,GAAG,CAACH,YAAY,CAAC;IACnC;IACA,OAAOA,YAAY;EACrB,CAAC,CAAC,CAACI,IAAI,EAAE,CAACC,IAAI,CAAC,GAAG,CAAC;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGC,cAAc,IAAI;EAC3C,OAAOA,cAAc,CAACC,KAAK,CAAC,GAAG,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,IAAIC,MAAM,CAAC,2BAA2B,CAAC;AAC/D,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;;AAE3J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAGC,IAAI,IAAI;EACvC,IAAI;IACFf,GAAG;IACHgB;EACF,CAAC,GAAGD,IAAI;EACR,IAAIE,aAAa,GAAGjB,GAAG;EACvB,IAAIU,eAAe,CAACQ,IAAI,CAACF,IAAI,CAAC,EAAE;IAC9BC,aAAa,GAAGD,IAAI,CAACG,OAAO,CAACT,eAAe,EAAE,IAAI,CAAC;EACrD,CAAC,MAAM,IAAIE,YAAY,CAACT,GAAG,CAACa,IAAI,CAAC,EAAE;IACjCC,aAAa,GAAGD,IAAI;EACtB;EACA,OAAOC,aAAa,CAACf,WAAW,EAAE;AACpC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}