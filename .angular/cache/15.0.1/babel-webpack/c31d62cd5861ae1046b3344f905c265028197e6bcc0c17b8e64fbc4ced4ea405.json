{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayFilter, arrayUnique } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\nimport { addClass, hasClass, removeClass, fastInnerText, removeAttribute, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../helpers/dom/event.mjs\";\nimport { A11Y_EXPANDED, A11Y_HIDDEN } from \"../../helpers/a11y.mjs\";\nexport const PLUGIN_KEY = 'collapsibleColumns';\nexport const PLUGIN_PRIORITY = 290;\nconst SETTING_KEYS = ['nestedHeaders'];\nconst COLLAPSIBLE_ELEMENT_CLASS = 'collapsibleIndicator';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nconst actionDictionary = new Map([['collapse', {\n  hideColumn: true,\n  beforeHook: 'beforeColumnCollapse',\n  afterHook: 'afterColumnCollapse'\n}], ['expand', {\n  hideColumn: false,\n  beforeHook: 'beforeColumnExpand',\n  afterHook: 'afterColumnExpand'\n}]]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin CollapsibleColumns\n * @class CollapsibleColumns\n *\n * @description\n * The _CollapsibleColumns_ plugin allows collapsing of columns, covered by a header with the `colspan` property defined.\n *\n * Clicking the \"collapse/expand\" button collapses (or expands) all \"child\" headers except the first one.\n *\n * Setting the {@link Options#collapsiblecolumns} property to `true` will display a \"collapse/expand\" button in every header\n * with a defined `colspan` property.\n *\n * To limit this functionality to a smaller group of headers, define the `collapsibleColumns` property as an array\n * of objects, as in the example below.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: generateDataObj(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   nestedHeaders: true,\n *   // enable plugin\n *   collapsibleColumns: true,\n * });\n *\n * // or\n * const hot = new Handsontable(container, {\n *   data: generateDataObj(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   nestedHeaders: true,\n *   // enable and configure which columns can be collapsed\n *   collapsibleColumns: [\n *     {row: -4, col: 1, collapsible: true},\n *     {row: -3, col: 5, collapsible: true}\n *   ],\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={generateDataObj()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   nestedHeaders={true}\n *   // enable plugin\n *   collapsibleColumns={true}\n * />\n *\n * // or\n * <HotTable\n *   data={generateDataObj()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   nestedHeaders={true}\n *   // enable and configure which columns can be collapsed\n *   collapsibleColumns={[\n *     {row: -4, col: 1, collapsible: true},\n *     {row: -3, col: 5, collapsible: true}\n *   ]}\n * />\n * ```\n * :::\n */\nvar _collapsedColumnsMap = /*#__PURE__*/new WeakMap();\nvar _onAfterGetColHeader = /*#__PURE__*/new WeakSet();\nvar _onBeforeOnCellMouseDown = /*#__PURE__*/new WeakSet();\nvar _onInit = /*#__PURE__*/new WeakSet();\nvar _onAfterLoadData = /*#__PURE__*/new WeakSet();\nexport class CollapsibleColumns extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Updates the plugin state after new dataset load.\n     *\n     * @param {Array[]} sourceData Array of arrays or array of objects containing data.\n     * @param {boolean} initialLoad Flag that determines whether the data has been loaded\n     *                              during the initialization.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterLoadData);\n    /**\n     * Updates the plugin state after HoT initialization.\n     */\n    _classPrivateMethodInitSpec(this, _onInit);\n    /**\n     * Indicator mouse event callback.\n     *\n     * @param {object} event Mouse event.\n     * @param {object} coords Event coordinates.\n     */\n    _classPrivateMethodInitSpec(this, _onBeforeOnCellMouseDown);\n    /**\n     * Adds the indicator to the headers.\n     *\n     * @param {number} column Column index.\n     * @param {HTMLElement} TH TH element.\n     * @param {number} headerLevel The index of header level counting from the top (positive\n     *                             values counting from 0 to N).\n     */\n    _classPrivateMethodInitSpec(this, _onAfterGetColHeader);\n    /**\n     * Cached reference to the NestedHeaders plugin.\n     *\n     * @private\n     * @type {NestedHeaders}\n     */\n    _defineProperty(this, \"nestedHeadersPlugin\", null);\n    /**\n     * The NestedHeaders plugin StateManager instance.\n     *\n     * @private\n     * @type {StateManager}\n     */\n    _defineProperty(this, \"headerStateManager\", null);\n    /**\n     * Map of collapsed columns by the plugin.\n     *\n     * @private\n     * @type {HidingMap|null}\n     */\n    _classPrivateFieldInitSpec(this, _collapsedColumnsMap, {\n      writable: true,\n      value: null\n    });\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get PLUGIN_DEPS() {\n    return ['plugin:NestedHeaders'];\n  }\n  static get SETTING_KEYS() {\n    return [PLUGIN_KEY, ...SETTING_KEYS];\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link CollapsibleColumns#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const {\n      nestedHeaders\n    } = this.hot.getSettings();\n    if (!nestedHeaders) {\n      warn('You need to configure the Nested Headers plugin in order to use collapsible headers.');\n    }\n    _classPrivateFieldSet(this, _collapsedColumnsMap, this.hot.columnIndexMapper.createAndRegisterIndexMap(this.pluginName, 'hiding'));\n    this.nestedHeadersPlugin = this.hot.getPlugin('nestedHeaders');\n    this.headerStateManager = this.nestedHeadersPlugin.getStateManager();\n    this.addHook('init', () => _classPrivateMethodGet(this, _onInit, _onInit2).call(this));\n    this.addHook('afterLoadData', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _classPrivateMethodGet(_this, _onAfterLoadData, _onAfterLoadData2).call(_this, ...args);\n    });\n    this.addHook('afterGetColHeader', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _classPrivateMethodGet(_this, _onAfterGetColHeader, _onAfterGetColHeader2).call(_this, ...args);\n    });\n    this.addHook('beforeOnCellMouseDown', (event, coords, TD) => _classPrivateMethodGet(this, _onBeforeOnCellMouseDown, _onBeforeOnCellMouseDown2).call(this, event, coords, TD));\n    this.registerShortcuts();\n    super.enablePlugin();\n    // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n    this.updatePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *   - [`collapsibleColumns`](@/api/options.md#collapsiblecolumns)\n   *   - [`nestedHeaders`](@/api/options.md#nestedheaders)\n   */\n  updatePlugin() {\n    // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n    if (!this.hot.view) {\n      return;\n    }\n    if (!this.nestedHeadersPlugin.detectedOverlappedHeaders) {\n      const {\n        collapsibleColumns\n      } = this.hot.getSettings();\n      if (typeof collapsibleColumns === 'boolean') {\n        // Add `collapsible: true` attribute to all headers with colspan higher than 1.\n        this.headerStateManager.mapState(headerSettings => {\n          return {\n            collapsible: headerSettings.origColspan > 1\n          };\n        });\n      } else if (Array.isArray(collapsibleColumns)) {\n        this.headerStateManager.mapState(() => {\n          return {\n            collapsible: false\n          };\n        });\n        this.headerStateManager.mergeStateWith(collapsibleColumns);\n      }\n    }\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.columnIndexMapper.unregisterMap(this.pluginName);\n    _classPrivateFieldSet(this, _collapsedColumnsMap, null);\n    this.nestedHeadersPlugin = null;\n    this.unregisterShortcuts();\n    this.clearButtons();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Enter']],\n      callback: () => {\n        var _this$headerStateMana;\n        const {\n          row,\n          col\n        } = this.hot.getSelectedRangeLast().highlight;\n        const {\n          collapsible,\n          isCollapsed,\n          columnIndex\n        } = (_this$headerStateMana = this.headerStateManager.getHeaderTreeNodeData(row, col)) !== null && _this$headerStateMana !== void 0 ? _this$headerStateMana : {};\n        if (!collapsible) {\n          return;\n        }\n        if (isCollapsed) {\n          this.expandSection({\n            row,\n            col: columnIndex\n          });\n        } else {\n          this.collapseSection({\n            row,\n            col: columnIndex\n          });\n        }\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        return (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight.isHeader();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Clears the expand/collapse buttons.\n   *\n   * @private\n   */\n  clearButtons() {\n    if (!this.hot.view) {\n      return;\n    }\n    const headerLevels = this.hot.view._wt.getSetting('columnHeaders').length;\n    const mainHeaders = this.hot.view._wt.wtTable.THEAD;\n    const topHeaders = this.hot.view._wt.wtOverlays.topOverlay.clone.wtTable.THEAD;\n    const topLeftCornerHeaders = this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay ? this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;\n    const removeButton = function (button) {\n      if (button) {\n        button.parentNode.removeChild(button);\n      }\n    };\n    rangeEach(0, headerLevels - 1, i => {\n      const masterLevel = mainHeaders.childNodes[i];\n      const topLevel = topHeaders.childNodes[i];\n      const topLeftCornerLevel = topLeftCornerHeaders ? topLeftCornerHeaders.childNodes[i] : null;\n      rangeEach(0, masterLevel.childNodes.length - 1, j => {\n        let button = masterLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n        removeButton(button);\n        if (topLevel && topLevel.childNodes[j]) {\n          button = topLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n          removeButton(button);\n        }\n        if (topLeftCornerHeaders && topLeftCornerLevel && topLeftCornerLevel.childNodes[j]) {\n          button = topLeftCornerLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n          removeButton(button);\n        }\n      });\n    }, true);\n  }\n\n  /**\n   * Expands section at the provided coords.\n   *\n   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).\n   */\n  expandSection(coords) {\n    this.toggleCollapsibleSection([coords], 'expand');\n  }\n\n  /**\n   * Collapses section at the provided coords.\n   *\n   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).\n   */\n  collapseSection(coords) {\n    this.toggleCollapsibleSection([coords], 'collapse');\n  }\n\n  /**\n   * Collapses or expand all collapsible sections, depending on the action parameter.\n   *\n   * @param {string} action 'collapse' or 'expand'.\n   */\n  toggleAllCollapsibleSections(action) {\n    const coords = this.headerStateManager.mapNodes(headerSettings => {\n      const {\n        collapsible,\n        origColspan,\n        headerLevel,\n        columnIndex,\n        isCollapsed\n      } = headerSettings;\n      if (collapsible === true && origColspan > 1 && (isCollapsed && action === 'expand' || !isCollapsed && action === 'collapse')) {\n        return {\n          row: this.headerStateManager.levelToRowCoords(headerLevel),\n          col: columnIndex\n        };\n      }\n    });\n    this.toggleCollapsibleSection(coords, action);\n  }\n\n  /**\n   * Collapses all collapsible sections.\n   */\n  collapseAll() {\n    this.toggleAllCollapsibleSections('collapse');\n  }\n\n  /**\n   * Expands all collapsible sections.\n   */\n  expandAll() {\n    this.toggleAllCollapsibleSections('expand');\n  }\n\n  /**\n   * Collapses/Expands a section.\n   *\n   * @param {Array} coords Array of coords - section coordinates.\n   * @param {string} [action] Action definition ('collapse' or 'expand').\n   * @fires Hooks#beforeColumnCollapse\n   * @fires Hooks#beforeColumnExpand\n   * @fires Hooks#afterColumnCollapse\n   * @fires Hooks#afterColumnExpand\n   */\n  toggleCollapsibleSection(coords, action) {\n    if (!actionDictionary.has(action)) {\n      throw new Error(`Unsupported action is passed (${action}).`);\n    }\n    if (!Array.isArray(coords)) {\n      return;\n    }\n\n    // Ignore coordinates which points to the cells range.\n    const filteredCoords = arrayFilter(coords, _ref => {\n      let {\n        row\n      } = _ref;\n      return row < 0;\n    });\n    let isActionPossible = filteredCoords.length > 0;\n    arrayEach(filteredCoords, _ref2 => {\n      var _this$headerStateMana2;\n      let {\n        row,\n        col: column\n      } = _ref2;\n      const {\n        collapsible,\n        isCollapsed\n      } = (_this$headerStateMana2 = this.headerStateManager.getHeaderSettings(row, column)) !== null && _this$headerStateMana2 !== void 0 ? _this$headerStateMana2 : {};\n      if (!collapsible || isCollapsed && action === 'collapse' || !isCollapsed && action === 'expand') {\n        isActionPossible = false;\n        return false;\n      }\n    });\n    const nodeModRollbacks = [];\n    const affectedColumnsIndexes = [];\n    if (isActionPossible) {\n      arrayEach(filteredCoords, _ref3 => {\n        let {\n          row,\n          col: column\n        } = _ref3;\n        const {\n          colspanCompensation,\n          affectedColumns,\n          rollbackModification\n        } = this.headerStateManager.triggerNodeModification(action, row, column);\n        if (colspanCompensation > 0) {\n          affectedColumnsIndexes.push(...affectedColumns);\n          nodeModRollbacks.push(rollbackModification);\n        }\n      });\n    }\n    const currentCollapsedColumns = this.getCollapsedColumns();\n    let destinationCollapsedColumns = [];\n    if (action === 'collapse') {\n      destinationCollapsedColumns = arrayUnique([...currentCollapsedColumns, ...affectedColumnsIndexes]);\n    } else if (action === 'expand') {\n      destinationCollapsedColumns = arrayFilter(currentCollapsedColumns, index => !affectedColumnsIndexes.includes(index));\n    }\n    const actionTranslator = actionDictionary.get(action);\n    const isActionAllowed = this.hot.runHooks(actionTranslator.beforeHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible);\n    if (isActionAllowed === false) {\n      // Rollback all header nodes modification (collapse or expand).\n      arrayEach(nodeModRollbacks, nodeModRollback => {\n        nodeModRollback();\n      });\n      return;\n    }\n    this.hot.batchExecution(() => {\n      arrayEach(affectedColumnsIndexes, visualColumn => {\n        _classPrivateFieldGet(this, _collapsedColumnsMap).setValueAtIndex(this.hot.toPhysicalColumn(visualColumn), actionTranslator.hideColumn);\n      });\n    }, true);\n    const isActionPerformed = this.getCollapsedColumns().length !== currentCollapsedColumns.length;\n    this.hot.runHooks(actionTranslator.afterHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible, isActionPerformed);\n    this.hot.render();\n    this.hot.view.adjustElementsSize(true);\n  }\n\n  /**\n   * Gets an array of physical indexes of collapsed columns.\n   *\n   * @private\n   * @returns {number[]}\n   */\n  getCollapsedColumns() {\n    return _classPrivateFieldGet(this, _collapsedColumnsMap).getHiddenIndexes();\n  }\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(this, _collapsedColumnsMap, null);\n    super.destroy();\n  }\n}\nfunction _onAfterGetColHeader2(column, TH, headerLevel) {\n  var _this$headerStateMana3;\n  const {\n    collapsible,\n    origColspan,\n    isCollapsed\n  } = (_this$headerStateMana3 = this.headerStateManager.getHeaderSettings(headerLevel, column)) !== null && _this$headerStateMana3 !== void 0 ? _this$headerStateMana3 : {};\n  const isNodeCollapsible = collapsible && origColspan > 1 && column >= this.hot.getSettings().fixedColumnsStart;\n  const isAriaTagsEnabled = this.hot.getSettings().ariaTags;\n  let collapsibleElement = TH.querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n  removeAttribute(TH, [A11Y_EXPANDED('')[0]]);\n  if (isNodeCollapsible) {\n    if (!collapsibleElement) {\n      collapsibleElement = this.hot.rootDocument.createElement('div');\n      addClass(collapsibleElement, COLLAPSIBLE_ELEMENT_CLASS);\n      TH.querySelector('div:first-child').appendChild(collapsibleElement);\n    }\n    removeClass(collapsibleElement, ['collapsed', 'expanded']);\n    if (isCollapsed) {\n      addClass(collapsibleElement, 'collapsed');\n      fastInnerText(collapsibleElement, '+');\n\n      // Add ARIA tags\n      if (isAriaTagsEnabled) {\n        setAttribute(TH, ...A11Y_EXPANDED(false));\n      }\n    } else {\n      addClass(collapsibleElement, 'expanded');\n      fastInnerText(collapsibleElement, '-');\n\n      // Add ARIA tags\n      if (isAriaTagsEnabled) {\n        setAttribute(TH, ...A11Y_EXPANDED(true));\n      }\n    }\n    if (isAriaTagsEnabled) {\n      setAttribute(collapsibleElement, ...A11Y_HIDDEN());\n    }\n  } else {\n    var _collapsibleElement;\n    (_collapsibleElement = collapsibleElement) === null || _collapsibleElement === void 0 || _collapsibleElement.remove();\n  }\n}\nfunction _onBeforeOnCellMouseDown2(event, coords) {\n  if (hasClass(event.target, COLLAPSIBLE_ELEMENT_CLASS)) {\n    if (hasClass(event.target, 'expanded')) {\n      this.eventManager.fireEvent(event.target, 'mouseup');\n      this.toggleCollapsibleSection([coords], 'collapse');\n    } else if (hasClass(event.target, 'collapsed')) {\n      this.eventManager.fireEvent(event.target, 'mouseup');\n      this.toggleCollapsibleSection([coords], 'expand');\n    }\n    stopImmediatePropagation(event);\n  }\n}\nfunction _onInit2() {\n  // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n  this.updatePlugin();\n}\nfunction _onAfterLoadData2(sourceData, initialLoad) {\n  if (!initialLoad) {\n    this.updatePlugin();\n  }\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","obj","privateSet","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","privateMap","value","set","privateCollection","has","TypeError","_defineProperty","key","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","Number","_classPrivateFieldGet","receiver","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","_classPrivateMethodGet","fn","_classPrivateFieldSet","_classApplyDescriptorSet","action","BasePlugin","arrayEach","arrayFilter","arrayUnique","rangeEach","warn","addClass","hasClass","removeClass","fastInnerText","removeAttribute","setAttribute","stopImmediatePropagation","A11Y_EXPANDED","A11Y_HIDDEN","PLUGIN_KEY","PLUGIN_PRIORITY","SETTING_KEYS","COLLAPSIBLE_ELEMENT_CLASS","SHORTCUTS_GROUP","actionDictionary","Map","hideColumn","beforeHook","afterHook","_collapsedColumnsMap","WeakMap","_onAfterGetColHeader","WeakSet","_onBeforeOnCellMouseDown","_onInit","_onAfterLoadData","CollapsibleColumns","constructor","arguments","PLUGIN_DEPS","isEnabled","hot","getSettings","enablePlugin","_this","enabled","nestedHeaders","columnIndexMapper","createAndRegisterIndexMap","pluginName","nestedHeadersPlugin","getPlugin","headerStateManager","getStateManager","addHook","_onInit2","_len","length","args","Array","_key","_onAfterLoadData2","_len2","_key2","_onAfterGetColHeader2","event","coords","TD","_onBeforeOnCellMouseDown2","registerShortcuts","updatePlugin","view","detectedOverlappedHeaders","collapsibleColumns","mapState","headerSettings","collapsible","origColspan","isArray","mergeStateWith","disablePlugin","unregisterMap","unregisterShortcuts","clearButtons","getShortcutManager","getContext","addShortcut","keys","callback","_this$headerStateMana","row","col","getSelectedRangeLast","highlight","isCollapsed","columnIndex","getHeaderTreeNodeData","expandSection","collapseSection","runOnlyIf","_this$hot$getSelected","isHeader","group","removeShortcutsByGroup","headerLevels","_wt","getSetting","mainHeaders","wtTable","THEAD","topHeaders","wtOverlays","topOverlay","clone","topLeftCornerHeaders","topInlineStartCornerOverlay","removeButton","button","parentNode","removeChild","masterLevel","childNodes","topLevel","topLeftCornerLevel","j","querySelector","toggleCollapsibleSection","toggleAllCollapsibleSections","mapNodes","headerLevel","levelToRowCoords","collapseAll","expandAll","Error","filteredCoords","_ref","isActionPossible","_ref2","_this$headerStateMana2","column","getHeaderSettings","nodeModRollbacks","affectedColumnsIndexes","_ref3","colspanCompensation","affectedColumns","rollbackModification","triggerNodeModification","push","currentCollapsedColumns","getCollapsedColumns","destinationCollapsedColumns","index","includes","actionTranslator","isActionAllowed","runHooks","nodeModRollback","batchExecution","visualColumn","setValueAtIndex","toPhysicalColumn","isActionPerformed","render","adjustElementsSize","getHiddenIndexes","destroy","TH","_this$headerStateMana3","isNodeCollapsible","fixedColumnsStart","isAriaTagsEnabled","ariaTags","collapsibleElement","rootDocument","createElement","appendChild","_collapsibleElement","remove","target","eventManager","fireEvent","sourceData","initialLoad"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/plugins/collapsibleColumns/collapsibleColumns.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayFilter, arrayUnique } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\nimport { addClass, hasClass, removeClass, fastInnerText, removeAttribute, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../helpers/dom/event.mjs\";\nimport { A11Y_EXPANDED, A11Y_HIDDEN } from \"../../helpers/a11y.mjs\";\nexport const PLUGIN_KEY = 'collapsibleColumns';\nexport const PLUGIN_PRIORITY = 290;\nconst SETTING_KEYS = ['nestedHeaders'];\nconst COLLAPSIBLE_ELEMENT_CLASS = 'collapsibleIndicator';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nconst actionDictionary = new Map([['collapse', {\n  hideColumn: true,\n  beforeHook: 'beforeColumnCollapse',\n  afterHook: 'afterColumnCollapse'\n}], ['expand', {\n  hideColumn: false,\n  beforeHook: 'beforeColumnExpand',\n  afterHook: 'afterColumnExpand'\n}]]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin CollapsibleColumns\n * @class CollapsibleColumns\n *\n * @description\n * The _CollapsibleColumns_ plugin allows collapsing of columns, covered by a header with the `colspan` property defined.\n *\n * Clicking the \"collapse/expand\" button collapses (or expands) all \"child\" headers except the first one.\n *\n * Setting the {@link Options#collapsiblecolumns} property to `true` will display a \"collapse/expand\" button in every header\n * with a defined `colspan` property.\n *\n * To limit this functionality to a smaller group of headers, define the `collapsibleColumns` property as an array\n * of objects, as in the example below.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: generateDataObj(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   nestedHeaders: true,\n *   // enable plugin\n *   collapsibleColumns: true,\n * });\n *\n * // or\n * const hot = new Handsontable(container, {\n *   data: generateDataObj(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   nestedHeaders: true,\n *   // enable and configure which columns can be collapsed\n *   collapsibleColumns: [\n *     {row: -4, col: 1, collapsible: true},\n *     {row: -3, col: 5, collapsible: true}\n *   ],\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={generateDataObj()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   nestedHeaders={true}\n *   // enable plugin\n *   collapsibleColumns={true}\n * />\n *\n * // or\n * <HotTable\n *   data={generateDataObj()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   nestedHeaders={true}\n *   // enable and configure which columns can be collapsed\n *   collapsibleColumns={[\n *     {row: -4, col: 1, collapsible: true},\n *     {row: -3, col: 5, collapsible: true}\n *   ]}\n * />\n * ```\n * :::\n */\nvar _collapsedColumnsMap = /*#__PURE__*/new WeakMap();\nvar _onAfterGetColHeader = /*#__PURE__*/new WeakSet();\nvar _onBeforeOnCellMouseDown = /*#__PURE__*/new WeakSet();\nvar _onInit = /*#__PURE__*/new WeakSet();\nvar _onAfterLoadData = /*#__PURE__*/new WeakSet();\nexport class CollapsibleColumns extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Updates the plugin state after new dataset load.\n     *\n     * @param {Array[]} sourceData Array of arrays or array of objects containing data.\n     * @param {boolean} initialLoad Flag that determines whether the data has been loaded\n     *                              during the initialization.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterLoadData);\n    /**\n     * Updates the plugin state after HoT initialization.\n     */\n    _classPrivateMethodInitSpec(this, _onInit);\n    /**\n     * Indicator mouse event callback.\n     *\n     * @param {object} event Mouse event.\n     * @param {object} coords Event coordinates.\n     */\n    _classPrivateMethodInitSpec(this, _onBeforeOnCellMouseDown);\n    /**\n     * Adds the indicator to the headers.\n     *\n     * @param {number} column Column index.\n     * @param {HTMLElement} TH TH element.\n     * @param {number} headerLevel The index of header level counting from the top (positive\n     *                             values counting from 0 to N).\n     */\n    _classPrivateMethodInitSpec(this, _onAfterGetColHeader);\n    /**\n     * Cached reference to the NestedHeaders plugin.\n     *\n     * @private\n     * @type {NestedHeaders}\n     */\n    _defineProperty(this, \"nestedHeadersPlugin\", null);\n    /**\n     * The NestedHeaders plugin StateManager instance.\n     *\n     * @private\n     * @type {StateManager}\n     */\n    _defineProperty(this, \"headerStateManager\", null);\n    /**\n     * Map of collapsed columns by the plugin.\n     *\n     * @private\n     * @type {HidingMap|null}\n     */\n    _classPrivateFieldInitSpec(this, _collapsedColumnsMap, {\n      writable: true,\n      value: null\n    });\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get PLUGIN_DEPS() {\n    return ['plugin:NestedHeaders'];\n  }\n  static get SETTING_KEYS() {\n    return [PLUGIN_KEY, ...SETTING_KEYS];\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link CollapsibleColumns#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const {\n      nestedHeaders\n    } = this.hot.getSettings();\n    if (!nestedHeaders) {\n      warn('You need to configure the Nested Headers plugin in order to use collapsible headers.');\n    }\n    _classPrivateFieldSet(this, _collapsedColumnsMap, this.hot.columnIndexMapper.createAndRegisterIndexMap(this.pluginName, 'hiding'));\n    this.nestedHeadersPlugin = this.hot.getPlugin('nestedHeaders');\n    this.headerStateManager = this.nestedHeadersPlugin.getStateManager();\n    this.addHook('init', () => _classPrivateMethodGet(this, _onInit, _onInit2).call(this));\n    this.addHook('afterLoadData', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _classPrivateMethodGet(_this, _onAfterLoadData, _onAfterLoadData2).call(_this, ...args);\n    });\n    this.addHook('afterGetColHeader', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _classPrivateMethodGet(_this, _onAfterGetColHeader, _onAfterGetColHeader2).call(_this, ...args);\n    });\n    this.addHook('beforeOnCellMouseDown', (event, coords, TD) => _classPrivateMethodGet(this, _onBeforeOnCellMouseDown, _onBeforeOnCellMouseDown2).call(this, event, coords, TD));\n    this.registerShortcuts();\n    super.enablePlugin();\n    // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n    this.updatePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *   - [`collapsibleColumns`](@/api/options.md#collapsiblecolumns)\n   *   - [`nestedHeaders`](@/api/options.md#nestedheaders)\n   */\n  updatePlugin() {\n    // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n    if (!this.hot.view) {\n      return;\n    }\n    if (!this.nestedHeadersPlugin.detectedOverlappedHeaders) {\n      const {\n        collapsibleColumns\n      } = this.hot.getSettings();\n      if (typeof collapsibleColumns === 'boolean') {\n        // Add `collapsible: true` attribute to all headers with colspan higher than 1.\n        this.headerStateManager.mapState(headerSettings => {\n          return {\n            collapsible: headerSettings.origColspan > 1\n          };\n        });\n      } else if (Array.isArray(collapsibleColumns)) {\n        this.headerStateManager.mapState(() => {\n          return {\n            collapsible: false\n          };\n        });\n        this.headerStateManager.mergeStateWith(collapsibleColumns);\n      }\n    }\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.columnIndexMapper.unregisterMap(this.pluginName);\n    _classPrivateFieldSet(this, _collapsedColumnsMap, null);\n    this.nestedHeadersPlugin = null;\n    this.unregisterShortcuts();\n    this.clearButtons();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Enter']],\n      callback: () => {\n        var _this$headerStateMana;\n        const {\n          row,\n          col\n        } = this.hot.getSelectedRangeLast().highlight;\n        const {\n          collapsible,\n          isCollapsed,\n          columnIndex\n        } = (_this$headerStateMana = this.headerStateManager.getHeaderTreeNodeData(row, col)) !== null && _this$headerStateMana !== void 0 ? _this$headerStateMana : {};\n        if (!collapsible) {\n          return;\n        }\n        if (isCollapsed) {\n          this.expandSection({\n            row,\n            col: columnIndex\n          });\n        } else {\n          this.collapseSection({\n            row,\n            col: columnIndex\n          });\n        }\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        return (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight.isHeader();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Clears the expand/collapse buttons.\n   *\n   * @private\n   */\n  clearButtons() {\n    if (!this.hot.view) {\n      return;\n    }\n    const headerLevels = this.hot.view._wt.getSetting('columnHeaders').length;\n    const mainHeaders = this.hot.view._wt.wtTable.THEAD;\n    const topHeaders = this.hot.view._wt.wtOverlays.topOverlay.clone.wtTable.THEAD;\n    const topLeftCornerHeaders = this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay ? this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;\n    const removeButton = function (button) {\n      if (button) {\n        button.parentNode.removeChild(button);\n      }\n    };\n    rangeEach(0, headerLevels - 1, i => {\n      const masterLevel = mainHeaders.childNodes[i];\n      const topLevel = topHeaders.childNodes[i];\n      const topLeftCornerLevel = topLeftCornerHeaders ? topLeftCornerHeaders.childNodes[i] : null;\n      rangeEach(0, masterLevel.childNodes.length - 1, j => {\n        let button = masterLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n        removeButton(button);\n        if (topLevel && topLevel.childNodes[j]) {\n          button = topLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n          removeButton(button);\n        }\n        if (topLeftCornerHeaders && topLeftCornerLevel && topLeftCornerLevel.childNodes[j]) {\n          button = topLeftCornerLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n          removeButton(button);\n        }\n      });\n    }, true);\n  }\n\n  /**\n   * Expands section at the provided coords.\n   *\n   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).\n   */\n  expandSection(coords) {\n    this.toggleCollapsibleSection([coords], 'expand');\n  }\n\n  /**\n   * Collapses section at the provided coords.\n   *\n   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).\n   */\n  collapseSection(coords) {\n    this.toggleCollapsibleSection([coords], 'collapse');\n  }\n\n  /**\n   * Collapses or expand all collapsible sections, depending on the action parameter.\n   *\n   * @param {string} action 'collapse' or 'expand'.\n   */\n  toggleAllCollapsibleSections(action) {\n    const coords = this.headerStateManager.mapNodes(headerSettings => {\n      const {\n        collapsible,\n        origColspan,\n        headerLevel,\n        columnIndex,\n        isCollapsed\n      } = headerSettings;\n      if (collapsible === true && origColspan > 1 && (isCollapsed && action === 'expand' || !isCollapsed && action === 'collapse')) {\n        return {\n          row: this.headerStateManager.levelToRowCoords(headerLevel),\n          col: columnIndex\n        };\n      }\n    });\n    this.toggleCollapsibleSection(coords, action);\n  }\n\n  /**\n   * Collapses all collapsible sections.\n   */\n  collapseAll() {\n    this.toggleAllCollapsibleSections('collapse');\n  }\n\n  /**\n   * Expands all collapsible sections.\n   */\n  expandAll() {\n    this.toggleAllCollapsibleSections('expand');\n  }\n\n  /**\n   * Collapses/Expands a section.\n   *\n   * @param {Array} coords Array of coords - section coordinates.\n   * @param {string} [action] Action definition ('collapse' or 'expand').\n   * @fires Hooks#beforeColumnCollapse\n   * @fires Hooks#beforeColumnExpand\n   * @fires Hooks#afterColumnCollapse\n   * @fires Hooks#afterColumnExpand\n   */\n  toggleCollapsibleSection(coords, action) {\n    if (!actionDictionary.has(action)) {\n      throw new Error(`Unsupported action is passed (${action}).`);\n    }\n    if (!Array.isArray(coords)) {\n      return;\n    }\n\n    // Ignore coordinates which points to the cells range.\n    const filteredCoords = arrayFilter(coords, _ref => {\n      let {\n        row\n      } = _ref;\n      return row < 0;\n    });\n    let isActionPossible = filteredCoords.length > 0;\n    arrayEach(filteredCoords, _ref2 => {\n      var _this$headerStateMana2;\n      let {\n        row,\n        col: column\n      } = _ref2;\n      const {\n        collapsible,\n        isCollapsed\n      } = (_this$headerStateMana2 = this.headerStateManager.getHeaderSettings(row, column)) !== null && _this$headerStateMana2 !== void 0 ? _this$headerStateMana2 : {};\n      if (!collapsible || isCollapsed && action === 'collapse' || !isCollapsed && action === 'expand') {\n        isActionPossible = false;\n        return false;\n      }\n    });\n    const nodeModRollbacks = [];\n    const affectedColumnsIndexes = [];\n    if (isActionPossible) {\n      arrayEach(filteredCoords, _ref3 => {\n        let {\n          row,\n          col: column\n        } = _ref3;\n        const {\n          colspanCompensation,\n          affectedColumns,\n          rollbackModification\n        } = this.headerStateManager.triggerNodeModification(action, row, column);\n        if (colspanCompensation > 0) {\n          affectedColumnsIndexes.push(...affectedColumns);\n          nodeModRollbacks.push(rollbackModification);\n        }\n      });\n    }\n    const currentCollapsedColumns = this.getCollapsedColumns();\n    let destinationCollapsedColumns = [];\n    if (action === 'collapse') {\n      destinationCollapsedColumns = arrayUnique([...currentCollapsedColumns, ...affectedColumnsIndexes]);\n    } else if (action === 'expand') {\n      destinationCollapsedColumns = arrayFilter(currentCollapsedColumns, index => !affectedColumnsIndexes.includes(index));\n    }\n    const actionTranslator = actionDictionary.get(action);\n    const isActionAllowed = this.hot.runHooks(actionTranslator.beforeHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible);\n    if (isActionAllowed === false) {\n      // Rollback all header nodes modification (collapse or expand).\n      arrayEach(nodeModRollbacks, nodeModRollback => {\n        nodeModRollback();\n      });\n      return;\n    }\n    this.hot.batchExecution(() => {\n      arrayEach(affectedColumnsIndexes, visualColumn => {\n        _classPrivateFieldGet(this, _collapsedColumnsMap).setValueAtIndex(this.hot.toPhysicalColumn(visualColumn), actionTranslator.hideColumn);\n      });\n    }, true);\n    const isActionPerformed = this.getCollapsedColumns().length !== currentCollapsedColumns.length;\n    this.hot.runHooks(actionTranslator.afterHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible, isActionPerformed);\n    this.hot.render();\n    this.hot.view.adjustElementsSize(true);\n  }\n\n  /**\n   * Gets an array of physical indexes of collapsed columns.\n   *\n   * @private\n   * @returns {number[]}\n   */\n  getCollapsedColumns() {\n    return _classPrivateFieldGet(this, _collapsedColumnsMap).getHiddenIndexes();\n  }\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(this, _collapsedColumnsMap, null);\n    super.destroy();\n  }\n}\nfunction _onAfterGetColHeader2(column, TH, headerLevel) {\n  var _this$headerStateMana3;\n  const {\n    collapsible,\n    origColspan,\n    isCollapsed\n  } = (_this$headerStateMana3 = this.headerStateManager.getHeaderSettings(headerLevel, column)) !== null && _this$headerStateMana3 !== void 0 ? _this$headerStateMana3 : {};\n  const isNodeCollapsible = collapsible && origColspan > 1 && column >= this.hot.getSettings().fixedColumnsStart;\n  const isAriaTagsEnabled = this.hot.getSettings().ariaTags;\n  let collapsibleElement = TH.querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n  removeAttribute(TH, [A11Y_EXPANDED('')[0]]);\n  if (isNodeCollapsible) {\n    if (!collapsibleElement) {\n      collapsibleElement = this.hot.rootDocument.createElement('div');\n      addClass(collapsibleElement, COLLAPSIBLE_ELEMENT_CLASS);\n      TH.querySelector('div:first-child').appendChild(collapsibleElement);\n    }\n    removeClass(collapsibleElement, ['collapsed', 'expanded']);\n    if (isCollapsed) {\n      addClass(collapsibleElement, 'collapsed');\n      fastInnerText(collapsibleElement, '+');\n\n      // Add ARIA tags\n      if (isAriaTagsEnabled) {\n        setAttribute(TH, ...A11Y_EXPANDED(false));\n      }\n    } else {\n      addClass(collapsibleElement, 'expanded');\n      fastInnerText(collapsibleElement, '-');\n\n      // Add ARIA tags\n      if (isAriaTagsEnabled) {\n        setAttribute(TH, ...A11Y_EXPANDED(true));\n      }\n    }\n    if (isAriaTagsEnabled) {\n      setAttribute(collapsibleElement, ...A11Y_HIDDEN());\n    }\n  } else {\n    var _collapsibleElement;\n    (_collapsibleElement = collapsibleElement) === null || _collapsibleElement === void 0 || _collapsibleElement.remove();\n  }\n}\nfunction _onBeforeOnCellMouseDown2(event, coords) {\n  if (hasClass(event.target, COLLAPSIBLE_ELEMENT_CLASS)) {\n    if (hasClass(event.target, 'expanded')) {\n      this.eventManager.fireEvent(event.target, 'mouseup');\n      this.toggleCollapsibleSection([coords], 'collapse');\n    } else if (hasClass(event.target, 'collapsed')) {\n      this.eventManager.fireEvent(event.target, 'mouseup');\n      this.toggleCollapsibleSection([coords], 'expand');\n    }\n    stopImmediatePropagation(event);\n  }\n}\nfunction _onInit2() {\n  // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n  this.updatePlugin();\n}\nfunction _onAfterLoadData2(sourceData, initialLoad) {\n  if (!initialLoad) {\n    this.updatePlugin();\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}