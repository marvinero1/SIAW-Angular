{"ast":null,"code":"/**\n * Get normalized Date object for the ISO formatted date strings.\n * Natively, the date object parsed from a ISO 8601 string will be offsetted by the timezone difference, which may result in returning a wrong date.\n * See: Github issue #3338.\n *\n * @param {string} dateString String representing the date.\n * @returns {Date} The proper Date object.\n */\nexport function getNormalizedDate(dateString) {\n  const nativeDate = new Date(dateString);\n\n  // NaN if dateString is not in ISO format\n  if (!isNaN(new Date(`${dateString}T00:00`).getDate())) {\n    // Compensate timezone offset\n    return new Date(nativeDate.getTime() + nativeDate.getTimezoneOffset() * 60000);\n  }\n  return nativeDate;\n}","map":{"version":3,"names":["getNormalizedDate","dateString","nativeDate","Date","isNaN","getDate","getTime","getTimezoneOffset"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/helpers/date.mjs"],"sourcesContent":["/**\n * Get normalized Date object for the ISO formatted date strings.\n * Natively, the date object parsed from a ISO 8601 string will be offsetted by the timezone difference, which may result in returning a wrong date.\n * See: Github issue #3338.\n *\n * @param {string} dateString String representing the date.\n * @returns {Date} The proper Date object.\n */\nexport function getNormalizedDate(dateString) {\n  const nativeDate = new Date(dateString);\n\n  // NaN if dateString is not in ISO format\n  if (!isNaN(new Date(`${dateString}T00:00`).getDate())) {\n    // Compensate timezone offset\n    return new Date(nativeDate.getTime() + nativeDate.getTimezoneOffset() * 60000);\n  }\n  return nativeDate;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAiB,CAACC,UAAU,EAAE;EAC5C,MAAMC,UAAU,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;;EAEvC;EACA,IAAI,CAACG,KAAK,CAAC,IAAID,IAAI,CAAE,GAAEF,UAAW,QAAO,CAAC,CAACI,OAAO,EAAE,CAAC,EAAE;IACrD;IACA,OAAO,IAAIF,IAAI,CAACD,UAAU,CAACI,OAAO,EAAE,GAAGJ,UAAU,CAACK,iBAAiB,EAAE,GAAG,KAAK,CAAC;EAChF;EACA,OAAOL,UAAU;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}