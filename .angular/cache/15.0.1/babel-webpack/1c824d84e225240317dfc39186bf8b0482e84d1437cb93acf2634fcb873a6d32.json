{"ast":null,"code":"import moment from 'moment';\nimport { isEmpty } from \"../../../helpers/mixed.mjs\";\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\n/**\n * Date sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    const {\n      sortEmptyCells\n    } = columnPluginSettings;\n    if (value === nextValue) {\n      return DO_NOT_SWAP;\n    }\n    if (isEmpty(value)) {\n      if (isEmpty(nextValue)) {\n        return DO_NOT_SWAP;\n      }\n\n      // Just fist value is empty and `sortEmptyCells` option was set\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n      return FIRST_AFTER_SECOND;\n    }\n    if (isEmpty(nextValue)) {\n      // Just second value is empty and `sortEmptyCells` option was set\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n      return FIRST_BEFORE_SECOND;\n    }\n    const dateFormat = columnMeta.dateFormat;\n    const firstDate = moment(value, dateFormat);\n    const nextDate = moment(nextValue, dateFormat);\n    if (!firstDate.isValid()) {\n      return FIRST_AFTER_SECOND;\n    }\n    if (!nextDate.isValid()) {\n      return FIRST_BEFORE_SECOND;\n    }\n    if (nextDate.isAfter(firstDate)) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n    if (nextDate.isBefore(firstDate)) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n    return DO_NOT_SWAP;\n  };\n}\nexport const COLUMN_DATA_TYPE = 'date';","map":{"version":3,"names":["moment","isEmpty","DO_NOT_SWAP","FIRST_BEFORE_SECOND","FIRST_AFTER_SECOND","compareFunctionFactory","sortOrder","columnMeta","columnPluginSettings","value","nextValue","sortEmptyCells","dateFormat","firstDate","nextDate","isValid","isAfter","isBefore","COLUMN_DATA_TYPE"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/plugins/columnSorting/sortFunction/date.mjs"],"sourcesContent":["import moment from 'moment';\nimport { isEmpty } from \"../../../helpers/mixed.mjs\";\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\n/**\n * Date sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    const {\n      sortEmptyCells\n    } = columnPluginSettings;\n    if (value === nextValue) {\n      return DO_NOT_SWAP;\n    }\n    if (isEmpty(value)) {\n      if (isEmpty(nextValue)) {\n        return DO_NOT_SWAP;\n      }\n\n      // Just fist value is empty and `sortEmptyCells` option was set\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n      return FIRST_AFTER_SECOND;\n    }\n    if (isEmpty(nextValue)) {\n      // Just second value is empty and `sortEmptyCells` option was set\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n      return FIRST_BEFORE_SECOND;\n    }\n    const dateFormat = columnMeta.dateFormat;\n    const firstDate = moment(value, dateFormat);\n    const nextDate = moment(nextValue, dateFormat);\n    if (!firstDate.isValid()) {\n      return FIRST_AFTER_SECOND;\n    }\n    if (!nextDate.isValid()) {\n      return FIRST_BEFORE_SECOND;\n    }\n    if (nextDate.isAfter(firstDate)) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n    if (nextDate.isBefore(firstDate)) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n    return DO_NOT_SWAP;\n  };\n}\nexport const COLUMN_DATA_TYPE = 'date';"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,SAASC,OAAO,QAAQ,4BAA4B;AACpD,SAASC,WAAW,EAAEC,mBAAmB,EAAEC,kBAAkB,QAAQ,0BAA0B;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsB,CAACC,SAAS,EAAEC,UAAU,EAAEC,oBAAoB,EAAE;EAClF,OAAO,UAAUC,KAAK,EAAEC,SAAS,EAAE;IACjC,MAAM;MACJC;IACF,CAAC,GAAGH,oBAAoB;IACxB,IAAIC,KAAK,KAAKC,SAAS,EAAE;MACvB,OAAOR,WAAW;IACpB;IACA,IAAID,OAAO,CAACQ,KAAK,CAAC,EAAE;MAClB,IAAIR,OAAO,CAACS,SAAS,CAAC,EAAE;QACtB,OAAOR,WAAW;MACpB;;MAEA;MACA,IAAIS,cAAc,EAAE;QAClB,OAAOL,SAAS,KAAK,KAAK,GAAGH,mBAAmB,GAAGC,kBAAkB;MACvE;MACA,OAAOA,kBAAkB;IAC3B;IACA,IAAIH,OAAO,CAACS,SAAS,CAAC,EAAE;MACtB;MACA,IAAIC,cAAc,EAAE;QAClB,OAAOL,SAAS,KAAK,KAAK,GAAGF,kBAAkB,GAAGD,mBAAmB;MACvE;MACA,OAAOA,mBAAmB;IAC5B;IACA,MAAMS,UAAU,GAAGL,UAAU,CAACK,UAAU;IACxC,MAAMC,SAAS,GAAGb,MAAM,CAACS,KAAK,EAAEG,UAAU,CAAC;IAC3C,MAAME,QAAQ,GAAGd,MAAM,CAACU,SAAS,EAAEE,UAAU,CAAC;IAC9C,IAAI,CAACC,SAAS,CAACE,OAAO,EAAE,EAAE;MACxB,OAAOX,kBAAkB;IAC3B;IACA,IAAI,CAACU,QAAQ,CAACC,OAAO,EAAE,EAAE;MACvB,OAAOZ,mBAAmB;IAC5B;IACA,IAAIW,QAAQ,CAACE,OAAO,CAACH,SAAS,CAAC,EAAE;MAC/B,OAAOP,SAAS,KAAK,KAAK,GAAGH,mBAAmB,GAAGC,kBAAkB;IACvE;IACA,IAAIU,QAAQ,CAACG,QAAQ,CAACJ,SAAS,CAAC,EAAE;MAChC,OAAOP,SAAS,KAAK,KAAK,GAAGF,kBAAkB,GAAGD,mBAAmB;IACvE;IACA,OAAOD,WAAW;EACpB,CAAC;AACH;AACA,OAAO,MAAMgB,gBAAgB,GAAG,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}