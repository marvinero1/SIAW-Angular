{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport hideRowItem from \"./contextMenuItem/hideRow.mjs\";\nimport showRowItem from \"./contextMenuItem/showRow.mjs\";\nimport { HidingMap } from \"../../translations/index.mjs\";\nHooks.getSingleton().register('beforeHideRows');\nHooks.getSingleton().register('afterHideRows');\nHooks.getSingleton().register('beforeUnhideRows');\nHooks.getSingleton().register('afterUnhideRows');\nexport const PLUGIN_KEY = 'hiddenRows';\nexport const PLUGIN_PRIORITY = 320;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin HiddenRows\n * @class HiddenRows\n *\n * @description\n * The `HiddenRows` plugin lets you [hide specified rows](@/guides/rows/row-hiding.md).\n *\n * \"Hiding a row\" means that the hidden row doesn't get rendered as a DOM element.\n *\n * The `HiddenRows` plugin doesn't modify the source data,\n * and doesn't participate in data transformation\n * (the shape of the data returned by the [`getData*()` methods](@/api/core.md#getdata) stays intact).\n *\n * You can set the following configuration options:\n *\n * | Option | Required | Type | Default | Description |\n * |---|---|---|---|---|\n * | `rows` | No | Array | - | [Hides specified rows by default](@/guides/rows/row-hiding.md#step-1-specify-rows-hidden-by-default) |\n * | `indicators` | No | Boolean | `false` | [Shows UI indicators](@/guides/rows/row-hiding.md#step-2-show-ui-indicators) |\n * | `copyPasteEnabled` | No | Boolean | `true` | [Sets up copy/paste behavior](@/guides/rows/row-hiding.md#step-4-set-up-copy-and-paste-behavior) |\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   hiddenRows: {\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     rows: [1, 2, 5]\n *   }\n * });\n *\n * // access the `HiddenRows` plugin's instance\n * const hiddenRowsPlugin = hot.getPlugin('hiddenRows');\n *\n * // hide a single row\n * hiddenRowsPlugin.hideRow(1);\n *\n * // hide multiple rows\n * hiddenRowsPlugin.hideRow(1, 2, 9);\n *\n * // hide multiple rows as an array\n * hiddenRowsPlugin.hideRows([1, 2, 9]);\n *\n * // unhide a single row\n * hiddenRowsPlugin.showRow(1);\n *\n * // unhide multiple rows\n * hiddenRowsPlugin.showRow(1, 2, 9);\n *\n * // unhide multiple rows as an array\n * hiddenRowsPlugin.showRows([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   hiddenRows={{\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     rows: [1, 2, 5]\n *   }}\n * />\n *\n * // access the `HiddenRows` plugin's instance\n * const hot = hotRef.current.hotInstance;\n * const hiddenRowsPlugin = hot.getPlugin('hiddenRows');\n *\n * // hide a single row\n * hiddenRowsPlugin.hideRow(1);\n *\n * // hide multiple rows\n * hiddenRowsPlugin.hideRow(1, 2, 9);\n *\n * // hide multiple rows as an array\n * hiddenRowsPlugin.hideRows([1, 2, 9]);\n *\n * // unhide a single row\n * hiddenRowsPlugin.showRow(1);\n *\n * // unhide multiple rows\n * hiddenRowsPlugin.showRow(1, 2, 9);\n *\n * // unhide multiple rows as an array\n * hiddenRowsPlugin.showRows([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n */\nvar _settings = /*#__PURE__*/new WeakMap();\nvar _hiddenRowsMap = /*#__PURE__*/new WeakMap();\nvar _onModifyRowHeight = /*#__PURE__*/new WeakSet();\nvar _onAfterGetCellMeta = /*#__PURE__*/new WeakSet();\nvar _onModifyCopyableRange = /*#__PURE__*/new WeakSet();\nvar _onAfterGetRowHeader = /*#__PURE__*/new WeakSet();\nvar _onAfterContextMenuDefaultOptions = /*#__PURE__*/new WeakSet();\nvar _onMapInit = /*#__PURE__*/new WeakSet();\nexport class HiddenRows extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * On map initialized hook callback.\n     */\n    _classPrivateMethodInitSpec(this, _onMapInit);\n    /**\n     * Add Show-hide rows to context menu.\n     *\n     * @param {object} options An array of objects containing information about the pre-defined Context Menu items.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterContextMenuDefaultOptions);\n    /**\n     * Adds the needed classes to the headers.\n     *\n     * @param {number} row Visual row index.\n     * @param {HTMLElement} TH Header's TH element.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterGetRowHeader);\n    /**\n     * Modifies the copyable range, accordingly to the provided config.\n     *\n     * @param {Array} ranges An array of objects defining copyable cells.\n     * @returns {Array}\n     */\n    _classPrivateMethodInitSpec(this, _onModifyCopyableRange);\n    /**\n     * Sets the copy-related cell meta.\n     *\n     * @param {number} row Visual row index.\n     * @param {number} column Visual column index.\n     * @param {object} cellProperties Object containing the cell properties.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterGetCellMeta);\n    /**\n     * Adds the additional row height for the hidden row indicators.\n     *\n     * @param {number|undefined} height Row height.\n     * @param {number} row Visual row index.\n     * @returns {number}\n     */\n    _classPrivateMethodInitSpec(this, _onModifyRowHeight);\n    /**\n     * Cached settings from Handsontable settings.\n     *\n     * @private\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _settings, {\n      writable: true,\n      value: {}\n    });\n    /**\n     * Map of hidden rows by the plugin.\n     *\n     * @private\n     * @type {HidingMap|null}\n     */\n    _classPrivateFieldInitSpec(this, _hiddenRowsMap, {\n      writable: true,\n      value: null\n    });\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link HiddenRows#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY];\n    if (isObject(pluginSettings)) {\n      _classPrivateFieldSet(this, _settings, pluginSettings);\n      if (isUndefined(pluginSettings.copyPasteEnabled)) {\n        pluginSettings.copyPasteEnabled = true;\n      }\n    }\n    _classPrivateFieldSet(this, _hiddenRowsMap, new HidingMap());\n    _classPrivateFieldGet(this, _hiddenRowsMap).addLocalHook('init', () => _classPrivateMethodGet(this, _onMapInit, _onMapInit2).call(this));\n    this.hot.rowIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(this, _hiddenRowsMap));\n    this.addHook('afterContextMenuDefaultOptions', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _classPrivateMethodGet(_this, _onAfterContextMenuDefaultOptions, _onAfterContextMenuDefaultOptions2).call(_this, ...args);\n    });\n    this.addHook('afterGetCellMeta', (row, col, cellProperties) => _classPrivateMethodGet(this, _onAfterGetCellMeta, _onAfterGetCellMeta2).call(this, row, col, cellProperties));\n    this.addHook('modifyRowHeight', (height, row) => _classPrivateMethodGet(this, _onModifyRowHeight, _onModifyRowHeight2).call(this, height, row));\n    this.addHook('afterGetRowHeader', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _classPrivateMethodGet(_this, _onAfterGetRowHeader, _onAfterGetRowHeader2).call(_this, ...args);\n    });\n    this.addHook('modifyCopyableRange', ranges => _classPrivateMethodGet(this, _onModifyCopyableRange, _onModifyCopyableRange2).call(this, ranges));\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`hiddenRows`](@/api/options.md#hiddenrows)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.rowIndexMapper.unregisterMap(this.pluginName);\n    _classPrivateFieldSet(this, _settings, {});\n    super.disablePlugin();\n    this.resetCellsMeta();\n  }\n\n  /**\n   * Shows the rows provided in the array.\n   *\n   * @param {number[]} rows Array of visual row indexes.\n   */\n  showRows(rows) {\n    const currentHideConfig = this.getHiddenRows();\n    const isValidConfig = this.isValidConfig(rows);\n    let destinationHideConfig = currentHideConfig;\n    const hidingMapValues = _classPrivateFieldGet(this, _hiddenRowsMap).getValues().slice();\n    const isAnyRowShowed = rows.length > 0;\n    if (isValidConfig && isAnyRowShowed) {\n      const physicalRows = rows.map(visualRow => this.hot.toPhysicalRow(visualRow));\n\n      // Preparing new values for hiding map.\n      arrayEach(physicalRows, physicalRow => {\n        hidingMapValues[physicalRow] = false;\n      });\n\n      // Preparing new hiding config.\n      destinationHideConfig = arrayReduce(hidingMapValues, (hiddenIndexes, isHidden, physicalIndex) => {\n        if (isHidden) {\n          hiddenIndexes.push(this.hot.toVisualRow(physicalIndex));\n        }\n        return hiddenIndexes;\n      }, []);\n    }\n    const continueHiding = this.hot.runHooks('beforeUnhideRows', currentHideConfig, destinationHideConfig, isValidConfig && isAnyRowShowed);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isValidConfig && isAnyRowShowed) {\n      _classPrivateFieldGet(this, _hiddenRowsMap).setValues(hidingMapValues);\n    }\n    this.hot.runHooks('afterUnhideRows', currentHideConfig, destinationHideConfig, isValidConfig && isAnyRowShowed, isValidConfig && destinationHideConfig.length < currentHideConfig.length);\n  }\n\n  /**\n   * Shows the row provided as row index (counting from 0).\n   *\n   * @param {...number} row Visual row index.\n   */\n  showRow() {\n    for (var _len3 = arguments.length, row = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      row[_key3] = arguments[_key3];\n    }\n    this.showRows(row);\n  }\n\n  /**\n   * Hides the rows provided in the array.\n   *\n   * @param {number[]} rows Array of visual row indexes.\n   */\n  hideRows(rows) {\n    const currentHideConfig = this.getHiddenRows();\n    const isConfigValid = this.isValidConfig(rows);\n    let destinationHideConfig = currentHideConfig;\n    if (isConfigValid) {\n      destinationHideConfig = Array.from(new Set(currentHideConfig.concat(rows)));\n    }\n    const continueHiding = this.hot.runHooks('beforeHideRows', currentHideConfig, destinationHideConfig, isConfigValid);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isConfigValid) {\n      this.hot.batchExecution(() => {\n        arrayEach(rows, visualRow => {\n          _classPrivateFieldGet(this, _hiddenRowsMap).setValueAtIndex(this.hot.toPhysicalRow(visualRow), true);\n        });\n      }, true);\n    }\n    this.hot.runHooks('afterHideRows', currentHideConfig, destinationHideConfig, isConfigValid, isConfigValid && destinationHideConfig.length > currentHideConfig.length);\n  }\n\n  /**\n   * Hides the row provided as row index (counting from 0).\n   *\n   * @param {...number} row Visual row index.\n   */\n  hideRow() {\n    for (var _len4 = arguments.length, row = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      row[_key4] = arguments[_key4];\n    }\n    this.hideRows(row);\n  }\n\n  /**\n   * Returns an array of visual indexes of hidden rows.\n   *\n   * @returns {number[]}\n   */\n  getHiddenRows() {\n    return arrayMap(_classPrivateFieldGet(this, _hiddenRowsMap).getHiddenIndexes(), physicalRowIndex => {\n      return this.hot.toVisualRow(physicalRowIndex);\n    });\n  }\n\n  /**\n   * Checks if the provided row is hidden.\n   *\n   * @param {number} row Visual row index.\n   * @returns {boolean}\n   */\n  isHidden(row) {\n    return _classPrivateFieldGet(this, _hiddenRowsMap).getValueAtIndex(this.hot.toPhysicalRow(row)) || false;\n  }\n\n  /**\n   * Checks whether all of the provided row indexes are within the bounds of the table.\n   *\n   * @param {Array} hiddenRows List of hidden visual row indexes.\n   * @returns {boolean}\n   */\n  isValidConfig(hiddenRows) {\n    const nrOfRows = this.hot.countRows();\n    if (Array.isArray(hiddenRows) && hiddenRows.length > 0) {\n      return hiddenRows.every(visualRow => Number.isInteger(visualRow) && visualRow >= 0 && visualRow < nrOfRows);\n    }\n    return false;\n  }\n\n  /**\n   * Resets all rendered cells meta.\n   *\n   * @private\n   */\n  resetCellsMeta() {\n    arrayEach(this.hot.getCellsMeta(), meta => {\n      if (meta) {\n        meta.skipRowOnPaste = false;\n      }\n    });\n  }\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(this, _settings, null);\n    _classPrivateFieldSet(this, _hiddenRowsMap, null);\n    super.destroy();\n  }\n}\nfunction _onModifyRowHeight2(height, row) {\n  // Hook is triggered internally only for the visible rows. Conditional will be handled for the API\n  // calls of the `getRowHeight` function on not visible indexes.\n  if (this.isHidden(row)) {\n    return 0;\n  }\n  return height;\n}\nfunction _onAfterGetCellMeta2(row, column, cellProperties) {\n  if (_classPrivateFieldGet(this, _settings).copyPasteEnabled === false && this.isHidden(row)) {\n    // Cell property handled by the `Autofill` and the `CopyPaste` plugins.\n    cellProperties.skipRowOnPaste = true;\n  }\n  if (this.isHidden(row - 1)) {\n    cellProperties.className = cellProperties.className || '';\n    if (cellProperties.className.indexOf('afterHiddenRow') === -1) {\n      cellProperties.className += ' afterHiddenRow';\n    }\n  } else if (cellProperties.className) {\n    const classArr = cellProperties.className.split(' ');\n    if (classArr.length > 0) {\n      const containAfterHiddenRow = classArr.indexOf('afterHiddenRow');\n      if (containAfterHiddenRow > -1) {\n        classArr.splice(containAfterHiddenRow, 1);\n      }\n      cellProperties.className = classArr.join(' ');\n    }\n  }\n}\nfunction _onModifyCopyableRange2(ranges) {\n  // Ranges shouldn't be modified when `copyPasteEnabled` option is set to `true` (by default).\n  if (_classPrivateFieldGet(this, _settings).copyPasteEnabled) {\n    return ranges;\n  }\n  const newRanges = [];\n  const pushRange = (startRow, endRow, startCol, endCol) => {\n    newRanges.push({\n      startRow,\n      endRow,\n      startCol,\n      endCol\n    });\n  };\n  arrayEach(ranges, range => {\n    let isHidden = true;\n    let rangeStart = 0;\n    rangeEach(range.startRow, range.endRow, visualRow => {\n      if (this.isHidden(visualRow)) {\n        if (!isHidden) {\n          pushRange(rangeStart, visualRow - 1, range.startCol, range.endCol);\n        }\n        isHidden = true;\n      } else {\n        if (isHidden) {\n          rangeStart = visualRow;\n        }\n        if (visualRow === range.endRow) {\n          pushRange(rangeStart, visualRow, range.startCol, range.endCol);\n        }\n        isHidden = false;\n      }\n    });\n  });\n  return newRanges;\n}\nfunction _onAfterGetRowHeader2(row, TH) {\n  if (!_classPrivateFieldGet(this, _settings).indicators || row < 0) {\n    return;\n  }\n  const classList = [];\n  if (row >= 1 && this.isHidden(row - 1)) {\n    classList.push('afterHiddenRow');\n  }\n  if (row < this.hot.countRows() - 1 && this.isHidden(row + 1)) {\n    classList.push('beforeHiddenRow');\n  }\n  addClass(TH, classList);\n}\nfunction _onAfterContextMenuDefaultOptions2(options) {\n  options.items.push({\n    name: SEPARATOR\n  }, hideRowItem(this), showRowItem(this));\n}\nfunction _onMapInit2() {\n  if (Array.isArray(_classPrivateFieldGet(this, _settings).rows)) {\n    this.hideRows(_classPrivateFieldGet(this, _settings).rows);\n  }\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","obj","privateSet","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","privateMap","value","set","privateCollection","has","TypeError","_classPrivateMethodGet","receiver","fn","_classPrivateFieldGet","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","call","_classPrivateFieldSet","_classApplyDescriptorSet","action","writable","BasePlugin","addClass","rangeEach","arrayEach","arrayMap","arrayReduce","isObject","isUndefined","SEPARATOR","Hooks","hideRowItem","showRowItem","HidingMap","getSingleton","register","PLUGIN_KEY","PLUGIN_PRIORITY","_settings","WeakMap","_hiddenRowsMap","_onModifyRowHeight","WeakSet","_onAfterGetCellMeta","_onModifyCopyableRange","_onAfterGetRowHeader","_onAfterContextMenuDefaultOptions","_onMapInit","HiddenRows","constructor","arguments","isEnabled","hot","getSettings","enablePlugin","_this","enabled","pluginSettings","copyPasteEnabled","addLocalHook","_onMapInit2","rowIndexMapper","registerMap","pluginName","addHook","_len","length","args","Array","_key","_onAfterContextMenuDefaultOptions2","row","col","cellProperties","_onAfterGetCellMeta2","height","_onModifyRowHeight2","_len2","_key2","_onAfterGetRowHeader2","ranges","_onModifyCopyableRange2","updatePlugin","disablePlugin","unregisterMap","resetCellsMeta","showRows","rows","currentHideConfig","getHiddenRows","isValidConfig","destinationHideConfig","hidingMapValues","getValues","slice","isAnyRowShowed","physicalRows","map","visualRow","toPhysicalRow","physicalRow","hiddenIndexes","isHidden","physicalIndex","push","toVisualRow","continueHiding","runHooks","setValues","showRow","_len3","_key3","hideRows","isConfigValid","from","Set","concat","batchExecution","setValueAtIndex","hideRow","_len4","_key4","getHiddenIndexes","physicalRowIndex","getValueAtIndex","hiddenRows","nrOfRows","countRows","isArray","every","Number","isInteger","getCellsMeta","meta","skipRowOnPaste","destroy","column","className","indexOf","classArr","split","containAfterHiddenRow","splice","join","newRanges","pushRange","startRow","endRow","startCol","endCol","range","rangeStart","TH","indicators","classList","options","items","name"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/plugins/hiddenRows/hiddenRows.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport hideRowItem from \"./contextMenuItem/hideRow.mjs\";\nimport showRowItem from \"./contextMenuItem/showRow.mjs\";\nimport { HidingMap } from \"../../translations/index.mjs\";\nHooks.getSingleton().register('beforeHideRows');\nHooks.getSingleton().register('afterHideRows');\nHooks.getSingleton().register('beforeUnhideRows');\nHooks.getSingleton().register('afterUnhideRows');\nexport const PLUGIN_KEY = 'hiddenRows';\nexport const PLUGIN_PRIORITY = 320;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin HiddenRows\n * @class HiddenRows\n *\n * @description\n * The `HiddenRows` plugin lets you [hide specified rows](@/guides/rows/row-hiding.md).\n *\n * \"Hiding a row\" means that the hidden row doesn't get rendered as a DOM element.\n *\n * The `HiddenRows` plugin doesn't modify the source data,\n * and doesn't participate in data transformation\n * (the shape of the data returned by the [`getData*()` methods](@/api/core.md#getdata) stays intact).\n *\n * You can set the following configuration options:\n *\n * | Option | Required | Type | Default | Description |\n * |---|---|---|---|---|\n * | `rows` | No | Array | - | [Hides specified rows by default](@/guides/rows/row-hiding.md#step-1-specify-rows-hidden-by-default) |\n * | `indicators` | No | Boolean | `false` | [Shows UI indicators](@/guides/rows/row-hiding.md#step-2-show-ui-indicators) |\n * | `copyPasteEnabled` | No | Boolean | `true` | [Sets up copy/paste behavior](@/guides/rows/row-hiding.md#step-4-set-up-copy-and-paste-behavior) |\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   hiddenRows: {\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     rows: [1, 2, 5]\n *   }\n * });\n *\n * // access the `HiddenRows` plugin's instance\n * const hiddenRowsPlugin = hot.getPlugin('hiddenRows');\n *\n * // hide a single row\n * hiddenRowsPlugin.hideRow(1);\n *\n * // hide multiple rows\n * hiddenRowsPlugin.hideRow(1, 2, 9);\n *\n * // hide multiple rows as an array\n * hiddenRowsPlugin.hideRows([1, 2, 9]);\n *\n * // unhide a single row\n * hiddenRowsPlugin.showRow(1);\n *\n * // unhide multiple rows\n * hiddenRowsPlugin.showRow(1, 2, 9);\n *\n * // unhide multiple rows as an array\n * hiddenRowsPlugin.showRows([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   hiddenRows={{\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     rows: [1, 2, 5]\n *   }}\n * />\n *\n * // access the `HiddenRows` plugin's instance\n * const hot = hotRef.current.hotInstance;\n * const hiddenRowsPlugin = hot.getPlugin('hiddenRows');\n *\n * // hide a single row\n * hiddenRowsPlugin.hideRow(1);\n *\n * // hide multiple rows\n * hiddenRowsPlugin.hideRow(1, 2, 9);\n *\n * // hide multiple rows as an array\n * hiddenRowsPlugin.hideRows([1, 2, 9]);\n *\n * // unhide a single row\n * hiddenRowsPlugin.showRow(1);\n *\n * // unhide multiple rows\n * hiddenRowsPlugin.showRow(1, 2, 9);\n *\n * // unhide multiple rows as an array\n * hiddenRowsPlugin.showRows([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n */\nvar _settings = /*#__PURE__*/new WeakMap();\nvar _hiddenRowsMap = /*#__PURE__*/new WeakMap();\nvar _onModifyRowHeight = /*#__PURE__*/new WeakSet();\nvar _onAfterGetCellMeta = /*#__PURE__*/new WeakSet();\nvar _onModifyCopyableRange = /*#__PURE__*/new WeakSet();\nvar _onAfterGetRowHeader = /*#__PURE__*/new WeakSet();\nvar _onAfterContextMenuDefaultOptions = /*#__PURE__*/new WeakSet();\nvar _onMapInit = /*#__PURE__*/new WeakSet();\nexport class HiddenRows extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * On map initialized hook callback.\n     */\n    _classPrivateMethodInitSpec(this, _onMapInit);\n    /**\n     * Add Show-hide rows to context menu.\n     *\n     * @param {object} options An array of objects containing information about the pre-defined Context Menu items.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterContextMenuDefaultOptions);\n    /**\n     * Adds the needed classes to the headers.\n     *\n     * @param {number} row Visual row index.\n     * @param {HTMLElement} TH Header's TH element.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterGetRowHeader);\n    /**\n     * Modifies the copyable range, accordingly to the provided config.\n     *\n     * @param {Array} ranges An array of objects defining copyable cells.\n     * @returns {Array}\n     */\n    _classPrivateMethodInitSpec(this, _onModifyCopyableRange);\n    /**\n     * Sets the copy-related cell meta.\n     *\n     * @param {number} row Visual row index.\n     * @param {number} column Visual column index.\n     * @param {object} cellProperties Object containing the cell properties.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterGetCellMeta);\n    /**\n     * Adds the additional row height for the hidden row indicators.\n     *\n     * @param {number|undefined} height Row height.\n     * @param {number} row Visual row index.\n     * @returns {number}\n     */\n    _classPrivateMethodInitSpec(this, _onModifyRowHeight);\n    /**\n     * Cached settings from Handsontable settings.\n     *\n     * @private\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _settings, {\n      writable: true,\n      value: {}\n    });\n    /**\n     * Map of hidden rows by the plugin.\n     *\n     * @private\n     * @type {HidingMap|null}\n     */\n    _classPrivateFieldInitSpec(this, _hiddenRowsMap, {\n      writable: true,\n      value: null\n    });\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link HiddenRows#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY];\n    if (isObject(pluginSettings)) {\n      _classPrivateFieldSet(this, _settings, pluginSettings);\n      if (isUndefined(pluginSettings.copyPasteEnabled)) {\n        pluginSettings.copyPasteEnabled = true;\n      }\n    }\n    _classPrivateFieldSet(this, _hiddenRowsMap, new HidingMap());\n    _classPrivateFieldGet(this, _hiddenRowsMap).addLocalHook('init', () => _classPrivateMethodGet(this, _onMapInit, _onMapInit2).call(this));\n    this.hot.rowIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(this, _hiddenRowsMap));\n    this.addHook('afterContextMenuDefaultOptions', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _classPrivateMethodGet(_this, _onAfterContextMenuDefaultOptions, _onAfterContextMenuDefaultOptions2).call(_this, ...args);\n    });\n    this.addHook('afterGetCellMeta', (row, col, cellProperties) => _classPrivateMethodGet(this, _onAfterGetCellMeta, _onAfterGetCellMeta2).call(this, row, col, cellProperties));\n    this.addHook('modifyRowHeight', (height, row) => _classPrivateMethodGet(this, _onModifyRowHeight, _onModifyRowHeight2).call(this, height, row));\n    this.addHook('afterGetRowHeader', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _classPrivateMethodGet(_this, _onAfterGetRowHeader, _onAfterGetRowHeader2).call(_this, ...args);\n    });\n    this.addHook('modifyCopyableRange', ranges => _classPrivateMethodGet(this, _onModifyCopyableRange, _onModifyCopyableRange2).call(this, ranges));\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`hiddenRows`](@/api/options.md#hiddenrows)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.rowIndexMapper.unregisterMap(this.pluginName);\n    _classPrivateFieldSet(this, _settings, {});\n    super.disablePlugin();\n    this.resetCellsMeta();\n  }\n\n  /**\n   * Shows the rows provided in the array.\n   *\n   * @param {number[]} rows Array of visual row indexes.\n   */\n  showRows(rows) {\n    const currentHideConfig = this.getHiddenRows();\n    const isValidConfig = this.isValidConfig(rows);\n    let destinationHideConfig = currentHideConfig;\n    const hidingMapValues = _classPrivateFieldGet(this, _hiddenRowsMap).getValues().slice();\n    const isAnyRowShowed = rows.length > 0;\n    if (isValidConfig && isAnyRowShowed) {\n      const physicalRows = rows.map(visualRow => this.hot.toPhysicalRow(visualRow));\n\n      // Preparing new values for hiding map.\n      arrayEach(physicalRows, physicalRow => {\n        hidingMapValues[physicalRow] = false;\n      });\n\n      // Preparing new hiding config.\n      destinationHideConfig = arrayReduce(hidingMapValues, (hiddenIndexes, isHidden, physicalIndex) => {\n        if (isHidden) {\n          hiddenIndexes.push(this.hot.toVisualRow(physicalIndex));\n        }\n        return hiddenIndexes;\n      }, []);\n    }\n    const continueHiding = this.hot.runHooks('beforeUnhideRows', currentHideConfig, destinationHideConfig, isValidConfig && isAnyRowShowed);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isValidConfig && isAnyRowShowed) {\n      _classPrivateFieldGet(this, _hiddenRowsMap).setValues(hidingMapValues);\n    }\n    this.hot.runHooks('afterUnhideRows', currentHideConfig, destinationHideConfig, isValidConfig && isAnyRowShowed, isValidConfig && destinationHideConfig.length < currentHideConfig.length);\n  }\n\n  /**\n   * Shows the row provided as row index (counting from 0).\n   *\n   * @param {...number} row Visual row index.\n   */\n  showRow() {\n    for (var _len3 = arguments.length, row = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      row[_key3] = arguments[_key3];\n    }\n    this.showRows(row);\n  }\n\n  /**\n   * Hides the rows provided in the array.\n   *\n   * @param {number[]} rows Array of visual row indexes.\n   */\n  hideRows(rows) {\n    const currentHideConfig = this.getHiddenRows();\n    const isConfigValid = this.isValidConfig(rows);\n    let destinationHideConfig = currentHideConfig;\n    if (isConfigValid) {\n      destinationHideConfig = Array.from(new Set(currentHideConfig.concat(rows)));\n    }\n    const continueHiding = this.hot.runHooks('beforeHideRows', currentHideConfig, destinationHideConfig, isConfigValid);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isConfigValid) {\n      this.hot.batchExecution(() => {\n        arrayEach(rows, visualRow => {\n          _classPrivateFieldGet(this, _hiddenRowsMap).setValueAtIndex(this.hot.toPhysicalRow(visualRow), true);\n        });\n      }, true);\n    }\n    this.hot.runHooks('afterHideRows', currentHideConfig, destinationHideConfig, isConfigValid, isConfigValid && destinationHideConfig.length > currentHideConfig.length);\n  }\n\n  /**\n   * Hides the row provided as row index (counting from 0).\n   *\n   * @param {...number} row Visual row index.\n   */\n  hideRow() {\n    for (var _len4 = arguments.length, row = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      row[_key4] = arguments[_key4];\n    }\n    this.hideRows(row);\n  }\n\n  /**\n   * Returns an array of visual indexes of hidden rows.\n   *\n   * @returns {number[]}\n   */\n  getHiddenRows() {\n    return arrayMap(_classPrivateFieldGet(this, _hiddenRowsMap).getHiddenIndexes(), physicalRowIndex => {\n      return this.hot.toVisualRow(physicalRowIndex);\n    });\n  }\n\n  /**\n   * Checks if the provided row is hidden.\n   *\n   * @param {number} row Visual row index.\n   * @returns {boolean}\n   */\n  isHidden(row) {\n    return _classPrivateFieldGet(this, _hiddenRowsMap).getValueAtIndex(this.hot.toPhysicalRow(row)) || false;\n  }\n\n  /**\n   * Checks whether all of the provided row indexes are within the bounds of the table.\n   *\n   * @param {Array} hiddenRows List of hidden visual row indexes.\n   * @returns {boolean}\n   */\n  isValidConfig(hiddenRows) {\n    const nrOfRows = this.hot.countRows();\n    if (Array.isArray(hiddenRows) && hiddenRows.length > 0) {\n      return hiddenRows.every(visualRow => Number.isInteger(visualRow) && visualRow >= 0 && visualRow < nrOfRows);\n    }\n    return false;\n  }\n\n  /**\n   * Resets all rendered cells meta.\n   *\n   * @private\n   */\n  resetCellsMeta() {\n    arrayEach(this.hot.getCellsMeta(), meta => {\n      if (meta) {\n        meta.skipRowOnPaste = false;\n      }\n    });\n  }\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(this, _settings, null);\n    _classPrivateFieldSet(this, _hiddenRowsMap, null);\n    super.destroy();\n  }\n}\nfunction _onModifyRowHeight2(height, row) {\n  // Hook is triggered internally only for the visible rows. Conditional will be handled for the API\n  // calls of the `getRowHeight` function on not visible indexes.\n  if (this.isHidden(row)) {\n    return 0;\n  }\n  return height;\n}\nfunction _onAfterGetCellMeta2(row, column, cellProperties) {\n  if (_classPrivateFieldGet(this, _settings).copyPasteEnabled === false && this.isHidden(row)) {\n    // Cell property handled by the `Autofill` and the `CopyPaste` plugins.\n    cellProperties.skipRowOnPaste = true;\n  }\n  if (this.isHidden(row - 1)) {\n    cellProperties.className = cellProperties.className || '';\n    if (cellProperties.className.indexOf('afterHiddenRow') === -1) {\n      cellProperties.className += ' afterHiddenRow';\n    }\n  } else if (cellProperties.className) {\n    const classArr = cellProperties.className.split(' ');\n    if (classArr.length > 0) {\n      const containAfterHiddenRow = classArr.indexOf('afterHiddenRow');\n      if (containAfterHiddenRow > -1) {\n        classArr.splice(containAfterHiddenRow, 1);\n      }\n      cellProperties.className = classArr.join(' ');\n    }\n  }\n}\nfunction _onModifyCopyableRange2(ranges) {\n  // Ranges shouldn't be modified when `copyPasteEnabled` option is set to `true` (by default).\n  if (_classPrivateFieldGet(this, _settings).copyPasteEnabled) {\n    return ranges;\n  }\n  const newRanges = [];\n  const pushRange = (startRow, endRow, startCol, endCol) => {\n    newRanges.push({\n      startRow,\n      endRow,\n      startCol,\n      endCol\n    });\n  };\n  arrayEach(ranges, range => {\n    let isHidden = true;\n    let rangeStart = 0;\n    rangeEach(range.startRow, range.endRow, visualRow => {\n      if (this.isHidden(visualRow)) {\n        if (!isHidden) {\n          pushRange(rangeStart, visualRow - 1, range.startCol, range.endCol);\n        }\n        isHidden = true;\n      } else {\n        if (isHidden) {\n          rangeStart = visualRow;\n        }\n        if (visualRow === range.endRow) {\n          pushRange(rangeStart, visualRow, range.startCol, range.endCol);\n        }\n        isHidden = false;\n      }\n    });\n  });\n  return newRanges;\n}\nfunction _onAfterGetRowHeader2(row, TH) {\n  if (!_classPrivateFieldGet(this, _settings).indicators || row < 0) {\n    return;\n  }\n  const classList = [];\n  if (row >= 1 && this.isHidden(row - 1)) {\n    classList.push('afterHiddenRow');\n  }\n  if (row < this.hot.countRows() - 1 && this.isHidden(row + 1)) {\n    classList.push('beforeHiddenRow');\n  }\n  addClass(TH, classList);\n}\nfunction _onAfterContextMenuDefaultOptions2(options) {\n  options.items.push({\n    name: SEPARATOR\n  }, hideRowItem(this), showRowItem(this));\n}\nfunction _onMapInit2() {\n  if (Array.isArray(_classPrivateFieldGet(this, _settings).rows)) {\n    this.hideRows(_classPrivateFieldGet(this, _settings).rows);\n  }\n}"],"mappings":"AAAA,OAAO,kCAAkC;AACzC,OAAO,mCAAmC;AAC1C,SAASA,2BAA2B,CAACC,GAAG,EAAEC,UAAU,EAAE;EAAEC,0BAA0B,CAACF,GAAG,EAAEC,UAAU,CAAC;EAAEA,UAAU,CAACE,GAAG,CAACH,GAAG,CAAC;AAAE;AAC1H,SAASI,0BAA0B,CAACJ,GAAG,EAAEK,UAAU,EAAEC,KAAK,EAAE;EAAEJ,0BAA0B,CAACF,GAAG,EAAEK,UAAU,CAAC;EAAEA,UAAU,CAACE,GAAG,CAACP,GAAG,EAAEM,KAAK,CAAC;AAAE;AACvI,SAASJ,0BAA0B,CAACF,GAAG,EAAEQ,iBAAiB,EAAE;EAAE,IAAIA,iBAAiB,CAACC,GAAG,CAACT,GAAG,CAAC,EAAE;IAAE,MAAM,IAAIU,SAAS,CAAC,gEAAgE,CAAC;EAAE;AAAE;AACzL,SAASC,sBAAsB,CAACC,QAAQ,EAAEX,UAAU,EAAEY,EAAE,EAAE;EAAE,IAAI,CAACZ,UAAU,CAACQ,GAAG,CAACG,QAAQ,CAAC,EAAE;IAAE,MAAM,IAAIF,SAAS,CAAC,gDAAgD,CAAC;EAAE;EAAE,OAAOG,EAAE;AAAE;AACjL,SAASC,qBAAqB,CAACF,QAAQ,EAAEP,UAAU,EAAE;EAAE,IAAIU,UAAU,GAAGC,4BAA4B,CAACJ,QAAQ,EAAEP,UAAU,EAAE,KAAK,CAAC;EAAE,OAAOY,wBAAwB,CAACL,QAAQ,EAAEG,UAAU,CAAC;AAAE;AAC1L,SAASE,wBAAwB,CAACL,QAAQ,EAAEG,UAAU,EAAE;EAAE,IAAIA,UAAU,CAACG,GAAG,EAAE;IAAE,OAAOH,UAAU,CAACG,GAAG,CAACC,IAAI,CAACP,QAAQ,CAAC;EAAE;EAAE,OAAOG,UAAU,CAACT,KAAK;AAAE;AACjJ,SAASc,qBAAqB,CAACR,QAAQ,EAAEP,UAAU,EAAEC,KAAK,EAAE;EAAE,IAAIS,UAAU,GAAGC,4BAA4B,CAACJ,QAAQ,EAAEP,UAAU,EAAE,KAAK,CAAC;EAAEgB,wBAAwB,CAACT,QAAQ,EAAEG,UAAU,EAAET,KAAK,CAAC;EAAE,OAAOA,KAAK;AAAE;AAC/M,SAASU,4BAA4B,CAACJ,QAAQ,EAAEP,UAAU,EAAEiB,MAAM,EAAE;EAAE,IAAI,CAACjB,UAAU,CAACI,GAAG,CAACG,QAAQ,CAAC,EAAE;IAAE,MAAM,IAAIF,SAAS,CAAC,eAAe,GAAGY,MAAM,GAAG,gCAAgC,CAAC;EAAE;EAAE,OAAOjB,UAAU,CAACa,GAAG,CAACN,QAAQ,CAAC;AAAE;AAC5N,SAASS,wBAAwB,CAACT,QAAQ,EAAEG,UAAU,EAAET,KAAK,EAAE;EAAE,IAAIS,UAAU,CAACR,GAAG,EAAE;IAAEQ,UAAU,CAACR,GAAG,CAACY,IAAI,CAACP,QAAQ,EAAEN,KAAK,CAAC;EAAE,CAAC,MAAM;IAAE,IAAI,CAACS,UAAU,CAACQ,QAAQ,EAAE;MAAE,MAAM,IAAIb,SAAS,CAAC,0CAA0C,CAAC;IAAE;IAAEK,UAAU,CAACT,KAAK,GAAGA,KAAK;EAAE;AAAE;AACjQ,SAASkB,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,QAAQ,QAAQ,+BAA+B;AACxD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,yBAAyB;AAC1E,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,SAAS,QAAQ,0CAA0C;AACpE,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,WAAW,MAAM,+BAA+B;AACvD,OAAOC,WAAW,MAAM,+BAA+B;AACvD,SAASC,SAAS,QAAQ,8BAA8B;AACxDH,KAAK,CAACI,YAAY,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC;AAC/CL,KAAK,CAACI,YAAY,EAAE,CAACC,QAAQ,CAAC,eAAe,CAAC;AAC9CL,KAAK,CAACI,YAAY,EAAE,CAACC,QAAQ,CAAC,kBAAkB,CAAC;AACjDL,KAAK,CAACI,YAAY,EAAE,CAACC,QAAQ,CAAC,iBAAiB,CAAC;AAChD,OAAO,MAAMC,UAAU,GAAG,YAAY;AACtC,OAAO,MAAMC,eAAe,GAAG,GAAG;;AAElaAAa,IAAIC,OAAO,EAAE;AAC1C,IAAIC,cAAc,GAAG,aAAa,IAAID,OAAO,EAAE;AAC/C,IAAIE,kBAAkB,GAAG,aAAa,IAAIC,OAAO,EAAE;AACnD,IAAIC,mBAAmB,GAAG,aAAa,IAAID,OAAO,EAAE;AACpD,IAAIE,sBAAsB,GAAG,aAAa,IAAIF,OAAO,EAAE;AACvD,IAAIG,oBAAoB,GAAG,aAAa,IAAIH,OAAO,EAAE;AACrD,IAAII,iCAAiC,GAAG,aAAa,IAAIJ,OAAO,EAAE;AAClE,IAAIK,UAAU,GAAG,aAAa,IAAIL,OAAO,EAAE;AAC3C,OAAO,MAAMM,UAAU,SAAS3B,UAAU,CAAC;EACzC4B,WAAW,GAAG;IACZ,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB;AACJ;AACA;IACItD,2BAA2B,CAAC,IAAI,EAAEmD,UAAU,CAAC;IAC7C;AACJ;AACA;AACA;AACA;IACInD,2BAA2B,CAAC,IAAI,EAAEkD,iCAAiC,CAAC;IACpE;AACJ;AACA;AACA;AACA;AACA;IACIlD,2BAA2B,CAAC,IAAI,EAAEiD,oBAAoB,CAAC;IACvD;AACJ;AACA;AACA;AACA;AACA;IACIjD,2BAA2B,CAAC,IAAI,EAAEgD,sBAAsB,CAAC;IACzD;AACJ;AACA;AACA;AACA;AACA;AACA;IACIhD,2BAA2B,CAAC,IAAI,EAAE+C,mBAAmB,CAAC;IACtD;AACJ;AACA;AACA;AACA;AACA;AACA;IACI/C,2BAA2B,CAAC,IAAI,EAAE6C,kBAAkB,CAAC;IACrD;AACJ;AACA;AACA;AACA;AACA;IACIxC,0BAA0B,CAAC,IAAI,EAAEqC,SAAS,EAAE;MAC1ClB,QAAQ,EAAE,IAAI;MACdjB,KAAK,EAAE,CAAC;IACV,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;IACIF,0BAA0B,CAAC,IAAI,EAAEuC,cAAc,EAAE;MAC/CpB,QAAQ,EAAE,IAAI;MACdjB,KAAK,EAAE;IACT,CAAC,CAAC;EACJ;EACA,WAAWiC,UAAU,GAAG;IACtB,OAAOA,UAAU;EACnB;EACA,WAAWC,eAAe,GAAG;IAC3B,OAAOA,eAAe;EACxB;EACA;AACF;AACA;AACA;AACA;AACA;EACEc,SAAS,GAAG;IACV,OAAO,CAAC,CAAC,IAAI,CAACC,GAAG,CAACC,WAAW,EAAE,CAACjB,UAAU,CAAC;EAC7C;;EAEA;AACF;AACA;EACEkB,YAAY,GAAG;IACb,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI,IAAI,CAACC,OAAO,EAAE;MAChB;IACF;IACA,MAAMC,cAAc,GAAG,IAAI,CAACL,GAAG,CAACC,WAAW,EAAE,CAACjB,UAAU,CAAC;IACzD,IAAIT,QAAQ,CAAC8B,cAAc,CAAC,EAAE;MAC5BxC,qBAAqB,CAAC,IAAI,EAAEqB,SAAS,EAAEmB,cAAc,CAAC;MACtD,IAAI7B,WAAW,CAAC6B,cAAc,CAACC,gBAAgB,CAAC,EAAE;QAChDD,cAAc,CAACC,gBAAgB,GAAG,IAAI;MACxC;IACF;IACAzC,qBAAqB,CAAC,IAAI,EAAEuB,cAAc,EAAE,IAAIP,SAAS,EAAE,CAAC;IAC5DtB,qBAAqB,CAAC,IAAI,EAAE6B,cAAc,CAAC,CAACmB,YAAY,CAAC,MAAM,EAAE,MAAMnD,sBAAsB,CAAC,IAAI,EAAEuC,UAAU,EAAEa,WAAW,CAAC,CAAC5C,IAAI,CAAC,IAAI,CAAC,CAAC;IACxI,IAAI,CAACoC,GAAG,CAACS,cAAc,CAACC,WAAW,CAAC,IAAI,CAACC,UAAU,EAAEpD,qBAAqB,CAAC,IAAI,EAAE6B,cAAc,CAAC,CAAC;IACjG,IAAI,CAACwB,OAAO,CAAC,gCAAgC,EAAE,YAAY;MACzD,KAAK,IAAIC,IAAI,GAAGf,SAAS,CAACgB,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACH,IAAI,CAAC,EAAEI,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGJ,IAAI,EAAEI,IAAI,EAAE,EAAE;QACvFF,IAAI,CAACE,IAAI,CAAC,GAAGnB,SAAS,CAACmB,IAAI,CAAC;MAC9B;MACA,OAAO7D,sBAAsB,CAAC+C,KAAK,EAAET,iCAAiC,EAAEwB,kCAAkC,CAAC,CAACtD,IAAI,CAACuC,KAAK,EAAE,GAAGY,IAAI,CAAC;IAClI,CAAC,CAAC;IACF,IAAI,CAACH,OAAO,CAAC,kBAAkB,EAAE,CAACO,GAAG,EAAEC,GAAG,EAAEC,cAAc,KAAKjE,sBAAsB,CAAC,IAAI,EAAEmC,mBAAmB,EAAE+B,oBAAoB,CAAC,CAAC1D,IAAI,CAAC,IAAI,EAAEuD,GAAG,EAAEC,GAAG,EAAEC,cAAc,CAAC,CAAC;IAC5K,IAAI,CAACT,OAAO,CAAC,iBAAiB,EAAE,CAACW,MAAM,EAAEJ,GAAG,KAAK/D,sBAAsB,CAAC,IAAI,EAAEiC,kBAAkB,EAAEmC,mBAAmB,CAAC,CAAC5D,IAAI,CAAC,IAAI,EAAE2D,MAAM,EAAEJ,GAAG,CAAC,CAAC;IAC/I,IAAI,CAACP,OAAO,CAAC,mBAAmB,EAAE,YAAY;MAC5C,KAAK,IAAIa,KAAK,GAAG3B,SAAS,CAACgB,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACS,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;QAC7FX,IAAI,CAACW,KAAK,CAAC,GAAG5B,SAAS,CAAC4B,KAAK,CAAC;MAChC;MACA,OAAOtE,sBAAsB,CAAC+C,KAAK,EAAEV,oBAAoB,EAAEkC,qBAAqB,CAAC,CAAC/D,IAAI,CAACuC,KAAK,EAAE,GAAGY,IAAI,CAAC;IACxG,CAAC,CAAC;IACF,IAAI,CAACH,OAAO,CAAC,qBAAqB,EAAEgB,MAAM,IAAIxE,sBAAsB,CAAC,IAAI,EAAEoC,sBAAsB,EAAEqC,uBAAuB,CAAC,CAACjE,IAAI,CAAC,IAAI,EAAEgE,MAAM,CAAC,CAAC;IAC/I,KAAK,CAAC1B,YAAY,EAAE;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE4B,YAAY,GAAG;IACb,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAAC7B,YAAY,EAAE;IACnB,KAAK,CAAC4B,YAAY,EAAE;EACtB;;EAEA;AACF;AACA;EACEC,aAAa,GAAG;IACd,IAAI,CAAC/B,GAAG,CAACS,cAAc,CAACuB,aAAa,CAAC,IAAI,CAACrB,UAAU,CAAC;IACtD9C,qBAAqB,CAAC,IAAI,EAAEqB,SAAS,EAAE,CAAC,CAAC,CAAC;IAC1C,KAAK,CAAC6C,aAAa,EAAE;IACrB,IAAI,CAACE,cAAc,EAAE;EACvB;;EAEA;AACF;AACA;AACA;AACA;EACEC,QAAQ,CAACC,IAAI,EAAE;IACb,MAAMC,iBAAiB,GAAG,IAAI,CAACC,aAAa,EAAE;IAC9C,MAAMC,aAAa,GAAG,IAAI,CAACA,aAAa,CAACH,IAAI,CAAC;IAC9C,IAAII,qBAAqB,GAAGH,iBAAiB;IAC7C,MAAMI,eAAe,GAAGjF,qBAAqB,CAAC,IAAI,EAAE6B,cAAc,CAAC,CAACqD,SAAS,EAAE,CAACC,KAAK,EAAE;IACvF,MAAMC,cAAc,GAAGR,IAAI,CAACrB,MAAM,GAAG,CAAC;IACtC,IAAIwB,aAAa,IAAIK,cAAc,EAAE;MACnC,MAAMC,YAAY,GAAGT,IAAI,CAACU,GAAG,CAACC,SAAS,IAAI,IAAI,CAAC9C,GAAG,CAAC+C,aAAa,CAACD,SAAS,CAAC,CAAC;;MAE7E;MACA1E,SAAS,CAACwE,YAAY,EAAEI,WAAW,IAAI;QACrCR,eAAe,CAACQ,WAAW,CAAC,GAAG,KAAK;MACtC,CAAC,CAAC;;MAEF;MACAT,qBAAqB,GAAGjE,WAAW,CAACkE,eAAe,EAAE,CAACS,aAAa,EAAEC,QAAQ,EAAEC,aAAa,KAAK;QAC/F,IAAID,QAAQ,EAAE;UACZD,aAAa,CAACG,IAAI,CAAC,IAAI,CAACpD,GAAG,CAACqD,WAAW,CAACF,aAAa,CAAC,CAAC;QACzD;QACA,OAAOF,aAAa;MACtB,CAAC,EAAE,EAAE,CAAC;IACR;IACA,MAAMK,cAAc,GAAG,IAAI,CAACtD,GAAG,CAACuD,QAAQ,CAAC,kBAAkB,EAAEnB,iBAAiB,EAAEG,qBAAqB,EAAED,aAAa,IAAIK,cAAc,CAAC;IACvI,IAAIW,cAAc,KAAK,KAAK,EAAE;MAC5B;IACF;IACA,IAAIhB,aAAa,IAAIK,cAAc,EAAE;MACnCpF,qBAAqB,CAAC,IAAI,EAAE6B,cAAc,CAAC,CAACoE,SAAS,CAAChB,eAAe,CAAC;IACxE;IACA,IAAI,CAACxC,GAAG,CAACuD,QAAQ,CAAC,iBAAiB,EAAEnB,iBAAiB,EAAEG,qBAAqB,EAAED,aAAa,IAAIK,cAAc,EAAEL,aAAa,IAAIC,qBAAqB,CAACzB,MAAM,GAAGsB,iBAAiB,CAACtB,MAAM,CAAC;EAC3L;;EAEA;AACF;AACA;AACA;AACA;EACE2C,OAAO,GAAG;IACR,KAAK,IAAIC,KAAK,GAAG5D,SAAS,CAACgB,MAAM,EAAEK,GAAG,GAAG,IAAIH,KAAK,CAAC0C,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;MAC5FxC,GAAG,CAACwC,KAAK,CAAC,GAAG7D,SAAS,CAAC6D,KAAK,CAAC;IAC/B;IACA,IAAI,CAACzB,QAAQ,CAACf,GAAG,CAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACEyC,QAAQ,CAACzB,IAAI,EAAE;IACb,MAAMC,iBAAiB,GAAG,IAAI,CAACC,aAAa,EAAE;IAC9C,MAAMwB,aAAa,GAAG,IAAI,CAACvB,aAAa,CAACH,IAAI,CAAC;IAC9C,IAAII,qBAAqB,GAAGH,iBAAiB;IAC7C,IAAIyB,aAAa,EAAE;MACjBtB,qBAAqB,GAAGvB,KAAK,CAAC8C,IAAI,CAAC,IAAIC,GAAG,CAAC3B,iBAAiB,CAAC4B,MAAM,CAAC7B,IAAI,CAAC,CAAC,CAAC;IAC7E;IACA,MAAMmB,cAAc,GAAG,IAAI,CAACtD,GAAG,CAACuD,QAAQ,CAAC,gBAAgB,EAAEnB,iBAAiB,EAAEG,qBAAqB,EAAEsB,aAAa,CAAC;IACnH,IAAIP,cAAc,KAAK,KAAK,EAAE;MAC5B;IACF;IACA,IAAIO,aAAa,EAAE;MACjB,IAAI,CAAC7D,GAAG,CAACiE,cAAc,CAAC,MAAM;QAC5B7F,SAAS,CAAC+D,IAAI,EAAEW,SAAS,IAAI;UAC3BvF,qBAAqB,CAAC,IAAI,EAAE6B,cAAc,CAAC,CAAC8E,eAAe,CAAC,IAAI,CAAClE,GAAG,CAAC+C,aAAa,CAACD,SAAS,CAAC,EAAE,IAAI,CAAC;QACtG,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;IACV;IACA,IAAI,CAAC9C,GAAG,CAACuD,QAAQ,CAAC,eAAe,EAAEnB,iBAAiB,EAAEG,qBAAqB,EAAEsB,aAAa,EAAEA,aAAa,IAAItB,qBAAqB,CAACzB,MAAM,GAAGsB,iBAAiB,CAACtB,MAAM,CAAC;EACvK;;EAEA;AACF;AACA;AACA;AACA;EACEqD,OAAO,GAAG;IACR,KAAK,IAAIC,KAAK,GAAGtE,SAAS,CAACgB,MAAM,EAAEK,GAAG,GAAG,IAAIH,KAAK,CAACoD,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;MAC5FlD,GAAG,CAACkD,KAAK,CAAC,GAAGvE,SAAS,CAACuE,KAAK,CAAC;IAC/B;IACA,IAAI,CAACT,QAAQ,CAACzC,GAAG,CAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACEkB,aAAa,GAAG;IACd,OAAOhE,QAAQ,CAACd,qBAAqB,CAAC,IAAI,EAAE6B,cAAc,CAAC,CAACkF,gBAAgB,EAAE,EAAEC,gBAAgB,IAAI;MAClG,OAAO,IAAI,CAACvE,GAAG,CAACqD,WAAW,CAACkB,gBAAgB,CAAC;IAC/C,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACErB,QAAQ,CAAC/B,GAAG,EAAE;IACZ,OAAO5D,qBAAqB,CAAC,IAAI,EAAE6B,cAAc,CAAC,CAACoF,eAAe,CAAC,IAAI,CAACxE,GAAG,CAAC+C,aAAa,CAAC5B,GAAG,CAAC,CAAC,IAAI,KAAK;EAC1G;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEmB,aAAa,CAACmC,UAAU,EAAE;IACxB,MAAMC,QAAQ,GAAG,IAAI,CAAC1E,GAAG,CAAC2E,SAAS,EAAE;IACrC,IAAI3D,KAAK,CAAC4D,OAAO,CAACH,UAAU,CAAC,IAAIA,UAAU,CAAC3D,MAAM,GAAG,CAAC,EAAE;MACtD,OAAO2D,UAAU,CAACI,KAAK,CAAC/B,SAAS,IAAIgC,MAAM,CAACC,SAAS,CAACjC,SAAS,CAAC,IAAIA,SAAS,IAAI,CAAC,IAAIA,SAAS,GAAG4B,QAAQ,CAAC;IAC7G;IACA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACEzC,cAAc,GAAG;IACf7D,SAAS,CAAC,IAAI,CAAC4B,GAAG,CAACgF,YAAY,EAAE,EAAEC,IAAI,IAAI;MACzC,IAAIA,IAAI,EAAE;QACRA,IAAI,CAACC,cAAc,GAAG,KAAK;MAC7B;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;EACEC,OAAO,GAAG;IACRtH,qBAAqB,CAAC,IAAI,EAAEqB,SAAS,EAAE,IAAI,CAAC;IAC5CrB,qBAAqB,CAAC,IAAI,EAAEuB,cAAc,EAAE,IAAI,CAAC;IACjD,KAAK,CAAC+F,OAAO,EAAE;EACjB;AACF;AACA,SAAS3D,mBAAmB,CAACD,MAAM,EAAEJ,GAAG,EAAE;EACxC;EACA;EACA,IAAI,IAAI,CAAC+B,QAAQ,CAAC/B,GAAG,CAAC,EAAE;IACtB,OAAO,CAAC;EACV;EACA,OAAOI,MAAM;AACf;AACA,SAASD,oBAAoB,CAACH,GAAG,EAAEiE,MAAM,EAAE/D,cAAc,EAAE;EACzD,IAAI9D,qBAAqB,CAAC,IAAI,EAAE2B,SAAS,CAAC,CAACoB,gBAAgB,KAAK,KAAK,IAAI,IAAI,CAAC4C,QAAQ,CAAC/B,GAAG,CAAC,EAAE;IAC3F;IACAE,cAAc,CAAC6D,cAAc,GAAG,IAAI;EACtC;EACA,IAAI,IAAI,CAAChC,QAAQ,CAAC/B,GAAG,GAAG,CAAC,CAAC,EAAE;IAC1BE,cAAc,CAACgE,SAAS,GAAGhE,cAAc,CAACgE,SAAS,IAAI,EAAE;IACzD,IAAIhE,cAAc,CAACgE,SAAS,CAACC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAE;MAC7DjE,cAAc,CAACgE,SAAS,IAAI,iBAAiB;IAC/C;EACF,CAAC,MAAM,IAAIhE,cAAc,CAACgE,SAAS,EAAE;IACnC,MAAME,QAAQ,GAAGlE,cAAc,CAACgE,SAAS,CAACG,KAAK,CAAC,GAAG,CAAC;IACpD,IAAID,QAAQ,CAACzE,MAAM,GAAG,CAAC,EAAE;MACvB,MAAM2E,qBAAqB,GAAGF,QAAQ,CAACD,OAAO,CAAC,gBAAgB,CAAC;MAChE,IAAIG,qBAAqB,GAAG,CAAC,CAAC,EAAE;QAC9BF,QAAQ,CAACG,MAAM,CAACD,qBAAqB,EAAE,CAAC,CAAC;MAC3C;MACApE,cAAc,CAACgE,SAAS,GAAGE,QAAQ,CAACI,IAAI,CAAC,GAAG,CAAC;IAC/C;EACF;AACF;AACA,SAAS9D,uBAAuB,CAACD,MAAM,EAAE;EACvC;EACA,IAAIrE,qBAAqB,CAAC,IAAI,EAAE2B,SAAS,CAAC,CAACoB,gBAAgB,EAAE;IAC3D,OAAOsB,MAAM;EACf;EACA,MAAMgE,SAAS,GAAG,EAAE;EACpB,MAAMC,SAAS,GAAG,CAACC,QAAQ,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,KAAK;IACxDL,SAAS,CAACxC,IAAI,CAAC;MACb0C,QAAQ;MACRC,MAAM;MACNC,QAAQ;MACRC;IACF,CAAC,CAAC;EACJ,CAAC;EACD7H,SAAS,CAACwD,MAAM,EAAEsE,KAAK,IAAI;IACzB,IAAIhD,QAAQ,GAAG,IAAI;IACnB,IAAIiD,UAAU,GAAG,CAAC;IAClBhI,SAAS,CAAC+H,KAAK,CAACJ,QAAQ,EAAEI,KAAK,CAACH,MAAM,EAAEjD,SAAS,IAAI;MACnD,IAAI,IAAI,CAACI,QAAQ,CAACJ,SAAS,CAAC,EAAE;QAC5B,IAAI,CAACI,QAAQ,EAAE;UACb2C,SAAS,CAACM,UAAU,EAAErD,SAAS,GAAG,CAAC,EAAEoD,KAAK,CAACF,QAAQ,EAAEE,KAAK,CAACD,MAAM,CAAC;QACpE;QACA/C,QAAQ,GAAG,IAAI;MACjB,CAAC,MAAM;QACL,IAAIA,QAAQ,EAAE;UACZiD,UAAU,GAAGrD,SAAS;QACxB;QACA,IAAIA,SAAS,KAAKoD,KAAK,CAACH,MAAM,EAAE;UAC9BF,SAAS,CAACM,UAAU,EAAErD,SAAS,EAAEoD,KAAK,CAACF,QAAQ,EAAEE,KAAK,CAACD,MAAM,CAAC;QAChE;QACA/C,QAAQ,GAAG,KAAK;MAClB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAO0C,SAAS;AAClB;AACA,SAASjE,qBAAqB,CAACR,GAAG,EAAEiF,EAAE,EAAE;EACtC,IAAI,CAAC7I,qBAAqB,CAAC,IAAI,EAAE2B,SAAS,CAAC,CAACmH,UAAU,IAAIlF,GAAG,GAAG,CAAC,EAAE;IACjE;EACF;EACA,MAAMmF,SAAS,GAAG,EAAE;EACpB,IAAInF,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC+B,QAAQ,CAAC/B,GAAG,GAAG,CAAC,CAAC,EAAE;IACtCmF,SAAS,CAAClD,IAAI,CAAC,gBAAgB,CAAC;EAClC;EACA,IAAIjC,GAAG,GAAG,IAAI,CAACnB,GAAG,CAAC2E,SAAS,EAAE,GAAG,CAAC,IAAI,IAAI,CAACzB,QAAQ,CAAC/B,GAAG,GAAG,CAAC,CAAC,EAAE;IAC5DmF,SAAS,CAAClD,IAAI,CAAC,iBAAiB,CAAC;EACnC;EACAlF,QAAQ,CAACkI,EAAE,EAAEE,SAAS,CAAC;AACzB;AACA,SAASpF,kCAAkC,CAACqF,OAAO,EAAE;EACnDA,OAAO,CAACC,KAAK,CAACpD,IAAI,CAAC;IACjBqD,IAAI,EAAEhI;EACR,CAAC,EAAEE,WAAW,CAAC,IAAI,CAAC,EAAEC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC1C;AACA,SAAS4B,WAAW,GAAG;EACrB,IAAIQ,KAAK,CAAC4D,OAAO,CAACrH,qBAAqB,CAAC,IAAI,EAAE2B,SAAS,CAAC,CAACiD,IAAI,CAAC,EAAE;IAC9D,IAAI,CAACyB,QAAQ,CAACrG,qBAAqB,CAAC,IAAI,EAAE2B,SAAS,CAAC,CAACiD,IAAI,CAAC;EAC5D;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}