{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nvar _totalTargetWidth = /*#__PURE__*/new WeakMap();\nvar _totalColumns = /*#__PURE__*/new WeakMap();\nvar _stretchingColumnWidthFn = /*#__PURE__*/new WeakMap();\nvar _columnWidthFn = /*#__PURE__*/new WeakMap();\nvar _stretchMode = /*#__PURE__*/new WeakMap();\n/**\n * @typedef {object} ColumnStretchingOptions\n * @property {number} totalColumns Total number of columns.\n * @property {Function} columnWidthFn Function that returns the width of the column at a given index (in px).\n * @property {'all' | 'last' | 'none'} stretchMode Stretch mode 'all', 'last' or 'none'.\n * @property {Function} stretchingColumnWidthFn Function that returns the new width of the stretched column.\n */\n/**\n * @class ColumnStretching\n */\nexport class ColumnStretching {\n  /**\n   * Default column width.\n   *\n   * @type {number}\n   */\n  static get DEFAULT_WIDTH() {\n    return 50;\n  }\n\n  /**\n   * @type {number}\n   */\n\n  /**\n   * @param {ColumnStretchingOptions} options Object with all options specified for column viewport calculation.\n   */\n  constructor(_ref) {\n    let {\n      totalColumns,\n      stretchMode,\n      stretchingColumnWidthFn,\n      columnWidthFn\n    } = _ref;\n    _defineProperty(this, \"stretchAllRatio\", 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"stretchLastWidth\", 0);\n    /**\n     * @type {number[]}\n     */\n    _defineProperty(this, \"stretchAllColumnsWidth\", []);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _totalTargetWidth, {\n      writable: true,\n      value: 0\n    });\n    /**\n     * @type {boolean}\n     */\n    _defineProperty(this, \"needVerifyLastColumnWidth\", true);\n    /**\n     * The total number of columns.\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _totalColumns, {\n      writable: true,\n      value: () => 0\n    });\n    /**\n     * Function that returns the width of the stretched column at a given index (in px).\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _stretchingColumnWidthFn, {\n      writable: true,\n      value: width => width\n    });\n    /**\n     * Function that returns the width of the column at a given index (in px).\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _columnWidthFn, {\n      writable: true,\n      value: width => width\n    });\n    /**\n     * Stretch mode.\n     *\n     * @type {function(): 'all' | 'last' | 'none'}\n     */\n    _classPrivateFieldInitSpec(this, _stretchMode, {\n      writable: true,\n      value: () => 'none'\n    });\n    _classPrivateFieldSet(this, _totalColumns, totalColumns);\n    _classPrivateFieldSet(this, _stretchMode, stretchMode);\n    _classPrivateFieldSet(this, _stretchingColumnWidthFn, stretchingColumnWidthFn !== null && stretchingColumnWidthFn !== void 0 ? stretchingColumnWidthFn : _classPrivateFieldGet(this, _stretchingColumnWidthFn));\n    _classPrivateFieldSet(this, _columnWidthFn, columnWidthFn !== null && columnWidthFn !== void 0 ? columnWidthFn : _classPrivateFieldGet(this, _columnWidthFn));\n  }\n\n  /**\n   * Recalculate columns stretching.\n   *\n   * @param {number} totalWidth The total width of the table.\n   */\n  refreshStretching(totalWidth) {\n    if (_classPrivateFieldGet(this, _stretchMode).call(this) === 'none') {\n      return;\n    }\n    _classPrivateFieldSet(this, _totalTargetWidth, totalWidth);\n    let sumAll = 0;\n    for (let i = 0; i < _classPrivateFieldGet(this, _totalColumns).call(this); i++) {\n      const columnWidth = this._getColumnWidth(i);\n      const permanentColumnWidth = _classPrivateFieldGet(this, _stretchingColumnWidthFn).call(this, undefined, i);\n      if (typeof permanentColumnWidth === 'number') {\n        totalWidth -= permanentColumnWidth;\n      } else {\n        sumAll += columnWidth;\n      }\n    }\n    const remainingSize = totalWidth - sumAll;\n    if (_classPrivateFieldGet(this, _stretchMode).call(this) === 'all' && remainingSize > 0) {\n      this.stretchAllRatio = totalWidth / sumAll;\n      this.stretchAllColumnsWidth = [];\n      this.needVerifyLastColumnWidth = true;\n    } else if (_classPrivateFieldGet(this, _stretchMode).call(this) === 'last' && totalWidth !== Infinity) {\n      const columnWidth = this._getColumnWidth(_classPrivateFieldGet(this, _totalColumns).call(this) - 1);\n      const lastColumnWidth = remainingSize + columnWidth;\n      this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : columnWidth;\n    }\n  }\n\n  /**\n   * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n   *\n   * @param {number} column The visual column index.\n   * @param {number} baseWidth The default column width.\n   * @returns {number|null}\n   */\n  getStretchedColumnWidth(column, baseWidth) {\n    let result = null;\n    if (_classPrivateFieldGet(this, _stretchMode).call(this) === 'all' && this.stretchAllRatio !== 0) {\n      result = this._getStretchedAllColumnWidth(column, baseWidth);\n    } else if (_classPrivateFieldGet(this, _stretchMode).call(this) === 'last' && this.stretchLastWidth !== 0) {\n      result = this._getStretchedLastColumnWidth(column);\n    }\n    return result;\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @param {number} baseWidth The default column width.\n   * @returns {number}\n   * @private\n   */\n  _getStretchedAllColumnWidth(column, baseWidth) {\n    let sumRatioWidth = 0;\n    if (!this.stretchAllColumnsWidth[column]) {\n      const stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n      const newStretchedWidth = _classPrivateFieldGet(this, _stretchingColumnWidthFn).call(this, stretchedWidth, column);\n      if (newStretchedWidth === undefined) {\n        this.stretchAllColumnsWidth[column] = stretchedWidth;\n      } else {\n        this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n      }\n    }\n    if (this.stretchAllColumnsWidth.length === _classPrivateFieldGet(this, _totalColumns).call(this) && this.needVerifyLastColumnWidth) {\n      this.needVerifyLastColumnWidth = false;\n      for (let i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n        sumRatioWidth += this.stretchAllColumnsWidth[i];\n      }\n      if (sumRatioWidth !== _classPrivateFieldGet(this, _totalTargetWidth)) {\n        this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += _classPrivateFieldGet(this, _totalTargetWidth) - sumRatioWidth;\n      }\n    }\n    return this.stretchAllColumnsWidth[column];\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @returns {number|null}\n   * @private\n   */\n  _getStretchedLastColumnWidth(column) {\n    if (column === _classPrivateFieldGet(this, _totalColumns).call(this) - 1) {\n      return this.stretchLastWidth;\n    }\n    return null;\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @returns {number}\n   * @private\n   */\n  _getColumnWidth(column) {\n    let width = _classPrivateFieldGet(this, _columnWidthFn).call(this, column);\n    if (isNaN(width)) {\n      width = ColumnStretching.DEFAULT_WIDTH;\n    }\n    return width;\n  }\n}","map":{"version":3,"names":["_classPrivateFieldInitSpec","obj","privateMap","value","_checkPrivateRedeclaration","set","privateCollection","has","TypeError","_defineProperty","key","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","Number","_classPrivateFieldGet","receiver","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","_classPrivateFieldSet","_classApplyDescriptorSet","action","_totalTargetWidth","WeakMap","_totalColumns","_stretchingColumnWidthFn","_columnWidthFn","_stretchMode","ColumnStretching","DEFAULT_WIDTH","constructor","_ref","totalColumns","stretchMode","stretchingColumnWidthFn","columnWidthFn","width","refreshStretching","totalWidth","sumAll","columnWidth","_getColumnWidth","permanentColumnWidth","undefined","remainingSize","stretchAllRatio","stretchAllColumnsWidth","needVerifyLastColumnWidth","Infinity","lastColumnWidth","stretchLastWidth","getStretchedColumnWidth","column","baseWidth","result","_getStretchedAllColumnWidth","_getStretchedLastColumnWidth","sumRatioWidth","stretchedWidth","Math","round","newStretchedWidth","isNaN","length"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/3rdparty/walkontable/src/utils/columnStretching.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nvar _totalTargetWidth = /*#__PURE__*/new WeakMap();\nvar _totalColumns = /*#__PURE__*/new WeakMap();\nvar _stretchingColumnWidthFn = /*#__PURE__*/new WeakMap();\nvar _columnWidthFn = /*#__PURE__*/new WeakMap();\nvar _stretchMode = /*#__PURE__*/new WeakMap();\n/**\n * @typedef {object} ColumnStretchingOptions\n * @property {number} totalColumns Total number of columns.\n * @property {Function} columnWidthFn Function that returns the width of the column at a given index (in px).\n * @property {'all' | 'last' | 'none'} stretchMode Stretch mode 'all', 'last' or 'none'.\n * @property {Function} stretchingColumnWidthFn Function that returns the new width of the stretched column.\n */\n/**\n * @class ColumnStretching\n */\nexport class ColumnStretching {\n  /**\n   * Default column width.\n   *\n   * @type {number}\n   */\n  static get DEFAULT_WIDTH() {\n    return 50;\n  }\n\n  /**\n   * @type {number}\n   */\n\n  /**\n   * @param {ColumnStretchingOptions} options Object with all options specified for column viewport calculation.\n   */\n  constructor(_ref) {\n    let {\n      totalColumns,\n      stretchMode,\n      stretchingColumnWidthFn,\n      columnWidthFn\n    } = _ref;\n    _defineProperty(this, \"stretchAllRatio\", 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"stretchLastWidth\", 0);\n    /**\n     * @type {number[]}\n     */\n    _defineProperty(this, \"stretchAllColumnsWidth\", []);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _totalTargetWidth, {\n      writable: true,\n      value: 0\n    });\n    /**\n     * @type {boolean}\n     */\n    _defineProperty(this, \"needVerifyLastColumnWidth\", true);\n    /**\n     * The total number of columns.\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _totalColumns, {\n      writable: true,\n      value: () => 0\n    });\n    /**\n     * Function that returns the width of the stretched column at a given index (in px).\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _stretchingColumnWidthFn, {\n      writable: true,\n      value: width => width\n    });\n    /**\n     * Function that returns the width of the column at a given index (in px).\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _columnWidthFn, {\n      writable: true,\n      value: width => width\n    });\n    /**\n     * Stretch mode.\n     *\n     * @type {function(): 'all' | 'last' | 'none'}\n     */\n    _classPrivateFieldInitSpec(this, _stretchMode, {\n      writable: true,\n      value: () => 'none'\n    });\n    _classPrivateFieldSet(this, _totalColumns, totalColumns);\n    _classPrivateFieldSet(this, _stretchMode, stretchMode);\n    _classPrivateFieldSet(this, _stretchingColumnWidthFn, stretchingColumnWidthFn !== null && stretchingColumnWidthFn !== void 0 ? stretchingColumnWidthFn : _classPrivateFieldGet(this, _stretchingColumnWidthFn));\n    _classPrivateFieldSet(this, _columnWidthFn, columnWidthFn !== null && columnWidthFn !== void 0 ? columnWidthFn : _classPrivateFieldGet(this, _columnWidthFn));\n  }\n\n  /**\n   * Recalculate columns stretching.\n   *\n   * @param {number} totalWidth The total width of the table.\n   */\n  refreshStretching(totalWidth) {\n    if (_classPrivateFieldGet(this, _stretchMode).call(this) === 'none') {\n      return;\n    }\n    _classPrivateFieldSet(this, _totalTargetWidth, totalWidth);\n    let sumAll = 0;\n    for (let i = 0; i < _classPrivateFieldGet(this, _totalColumns).call(this); i++) {\n      const columnWidth = this._getColumnWidth(i);\n      const permanentColumnWidth = _classPrivateFieldGet(this, _stretchingColumnWidthFn).call(this, undefined, i);\n      if (typeof permanentColumnWidth === 'number') {\n        totalWidth -= permanentColumnWidth;\n      } else {\n        sumAll += columnWidth;\n      }\n    }\n    const remainingSize = totalWidth - sumAll;\n    if (_classPrivateFieldGet(this, _stretchMode).call(this) === 'all' && remainingSize > 0) {\n      this.stretchAllRatio = totalWidth / sumAll;\n      this.stretchAllColumnsWidth = [];\n      this.needVerifyLastColumnWidth = true;\n    } else if (_classPrivateFieldGet(this, _stretchMode).call(this) === 'last' && totalWidth !== Infinity) {\n      const columnWidth = this._getColumnWidth(_classPrivateFieldGet(this, _totalColumns).call(this) - 1);\n      const lastColumnWidth = remainingSize + columnWidth;\n      this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : columnWidth;\n    }\n  }\n\n  /**\n   * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n   *\n   * @param {number} column The visual column index.\n   * @param {number} baseWidth The default column width.\n   * @returns {number|null}\n   */\n  getStretchedColumnWidth(column, baseWidth) {\n    let result = null;\n    if (_classPrivateFieldGet(this, _stretchMode).call(this) === 'all' && this.stretchAllRatio !== 0) {\n      result = this._getStretchedAllColumnWidth(column, baseWidth);\n    } else if (_classPrivateFieldGet(this, _stretchMode).call(this) === 'last' && this.stretchLastWidth !== 0) {\n      result = this._getStretchedLastColumnWidth(column);\n    }\n    return result;\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @param {number} baseWidth The default column width.\n   * @returns {number}\n   * @private\n   */\n  _getStretchedAllColumnWidth(column, baseWidth) {\n    let sumRatioWidth = 0;\n    if (!this.stretchAllColumnsWidth[column]) {\n      const stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n      const newStretchedWidth = _classPrivateFieldGet(this, _stretchingColumnWidthFn).call(this, stretchedWidth, column);\n      if (newStretchedWidth === undefined) {\n        this.stretchAllColumnsWidth[column] = stretchedWidth;\n      } else {\n        this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n      }\n    }\n    if (this.stretchAllColumnsWidth.length === _classPrivateFieldGet(this, _totalColumns).call(this) && this.needVerifyLastColumnWidth) {\n      this.needVerifyLastColumnWidth = false;\n      for (let i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n        sumRatioWidth += this.stretchAllColumnsWidth[i];\n      }\n      if (sumRatioWidth !== _classPrivateFieldGet(this, _totalTargetWidth)) {\n        this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += _classPrivateFieldGet(this, _totalTargetWidth) - sumRatioWidth;\n      }\n    }\n    return this.stretchAllColumnsWidth[column];\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @returns {number|null}\n   * @private\n   */\n  _getStretchedLastColumnWidth(column) {\n    if (column === _classPrivateFieldGet(this, _totalColumns).call(this) - 1) {\n      return this.stretchLastWidth;\n    }\n    return null;\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @returns {number}\n   * @private\n   */\n  _getColumnWidth(column) {\n    let width = _classPrivateFieldGet(this, _columnWidthFn).call(this, column);\n    if (isNaN(width)) {\n      width = ColumnStretching.DEFAULT_WIDTH;\n    }\n    return width;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}