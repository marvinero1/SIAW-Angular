{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n/**\n * @class ExtendMetaPropertiesMod\n */\nexport class ExtendMetaPropertiesMod {\n  constructor(metaManager) {\n    /**\n     * @type {MetaManager}\n     */\n    _defineProperty(this, \"metaManager\", void 0);\n    /**\n     * @type {Set}\n     */\n    _defineProperty(this, \"usageTracker\", new Set());\n    /**\n     * @type {Map}\n     */\n    _defineProperty(this, \"propDescriptors\", new Map([['ariaTags', {\n      onChange(propName, value, isInitialChange) {\n        if (!isInitialChange) {\n          throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable instance was initialized.`);\n        }\n      }\n    }], ['fixedColumnsLeft', {\n      target: 'fixedColumnsStart',\n      onChange(propName) {\n        const isRtl = this.metaManager.hot.isRtl();\n        if (isRtl && propName === 'fixedColumnsLeft') {\n          throw new Error('The `fixedColumnsLeft` is not supported for RTL. Please use option `fixedColumnsStart`.');\n        }\n        if (this.usageTracker.has('fixedColumnsLeft') && this.usageTracker.has('fixedColumnsStart')) {\n          throw new Error('The `fixedColumnsLeft` and `fixedColumnsStart` should not be used together. ' + 'Please use only the option `fixedColumnsStart`.');\n        }\n      }\n    }], ['layoutDirection', {\n      onChange(propName, value, isInitialChange) {\n        if (!isInitialChange) {\n          throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable is initialized.`);\n        }\n      }\n    }]\n    // Temporary commented out due to the bug in the React wrapper.\n    // ['renderAllColumns', {\n    //   onChange(propName, value, isInitialChange) {\n    //     if (!isInitialChange) {\n    //       throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable is initialized.`);\n    //     }\n    //   }\n    // }],\n    // ['renderAllRows', {\n    //   onChange(propName, value, isInitialChange) {\n    //     if (!isInitialChange) {\n    //       throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable is initialized.`);\n    //     }\n    //   }\n    // }],\n    ]));\n\n    this.metaManager = metaManager;\n    this.extendMetaProps();\n  }\n\n  /**\n   * Extends the meta options based on the object descriptors from the `propDescriptors` list.\n   */\n  extendMetaProps() {\n    this.propDescriptors.forEach((descriptor, alias) => {\n      const {\n        target,\n        onChange = () => {}\n      } = descriptor;\n      const hasTarget = typeof target === 'string';\n      const targetProp = hasTarget ? target : alias;\n      const origProp = `_${targetProp}`;\n      this.metaManager.globalMeta.meta[origProp] = this.metaManager.globalMeta.meta[targetProp];\n      this.installPropWatcher(alias, origProp, onChange);\n      if (hasTarget) {\n        this.installPropWatcher(target, origProp, onChange);\n      }\n    });\n  }\n\n  /**\n   * Installs the property watcher to the `propName` option and forwards getter and setter to\n   * the new one.\n   *\n   * @param {string} propName The property to watch.\n   * @param {string} origProp The property from/to the value is forwarded.\n   * @param {Function} onChange The callback.\n   */\n  installPropWatcher(propName, origProp, onChange) {\n    const self = this;\n    Object.defineProperty(this.metaManager.globalMeta.meta, propName, {\n      get() {\n        return this[origProp];\n      },\n      set(value) {\n        const isInitialChange = !self.usageTracker.has(propName);\n        self.usageTracker.add(propName);\n        onChange.call(self, propName, value, isInitialChange);\n        this[origProp] = value;\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n}","map":{"version":3,"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","ExtendMetaPropertiesMod","constructor","metaManager","Set","Map","onChange","propName","isInitialChange","Error","target","isRtl","hot","usageTracker","has","extendMetaProps","propDescriptors","forEach","descriptor","alias","hasTarget","targetProp","origProp","globalMeta","meta","installPropWatcher","self","get","set","add"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/dataMap/metaManager/mods/extendMetaProperties.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * @class ExtendMetaPropertiesMod\n */\nexport class ExtendMetaPropertiesMod {\n  constructor(metaManager) {\n    /**\n     * @type {MetaManager}\n     */\n    _defineProperty(this, \"metaManager\", void 0);\n    /**\n     * @type {Set}\n     */\n    _defineProperty(this, \"usageTracker\", new Set());\n    /**\n     * @type {Map}\n     */\n    _defineProperty(this, \"propDescriptors\", new Map([['ariaTags', {\n      onChange(propName, value, isInitialChange) {\n        if (!isInitialChange) {\n          throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable instance was initialized.`);\n        }\n      }\n    }], ['fixedColumnsLeft', {\n      target: 'fixedColumnsStart',\n      onChange(propName) {\n        const isRtl = this.metaManager.hot.isRtl();\n        if (isRtl && propName === 'fixedColumnsLeft') {\n          throw new Error('The `fixedColumnsLeft` is not supported for RTL. Please use option `fixedColumnsStart`.');\n        }\n        if (this.usageTracker.has('fixedColumnsLeft') && this.usageTracker.has('fixedColumnsStart')) {\n          throw new Error('The `fixedColumnsLeft` and `fixedColumnsStart` should not be used together. ' + 'Please use only the option `fixedColumnsStart`.');\n        }\n      }\n    }], ['layoutDirection', {\n      onChange(propName, value, isInitialChange) {\n        if (!isInitialChange) {\n          throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable is initialized.`);\n        }\n      }\n    }]\n    // Temporary commented out due to the bug in the React wrapper.\n    // ['renderAllColumns', {\n    //   onChange(propName, value, isInitialChange) {\n    //     if (!isInitialChange) {\n    //       throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable is initialized.`);\n    //     }\n    //   }\n    // }],\n    // ['renderAllRows', {\n    //   onChange(propName, value, isInitialChange) {\n    //     if (!isInitialChange) {\n    //       throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable is initialized.`);\n    //     }\n    //   }\n    // }],\n    ]));\n    this.metaManager = metaManager;\n    this.extendMetaProps();\n  }\n\n  /**\n   * Extends the meta options based on the object descriptors from the `propDescriptors` list.\n   */\n  extendMetaProps() {\n    this.propDescriptors.forEach((descriptor, alias) => {\n      const {\n        target,\n        onChange = () => {}\n      } = descriptor;\n      const hasTarget = typeof target === 'string';\n      const targetProp = hasTarget ? target : alias;\n      const origProp = `_${targetProp}`;\n      this.metaManager.globalMeta.meta[origProp] = this.metaManager.globalMeta.meta[targetProp];\n      this.installPropWatcher(alias, origProp, onChange);\n      if (hasTarget) {\n        this.installPropWatcher(target, origProp, onChange);\n      }\n    });\n  }\n\n  /**\n   * Installs the property watcher to the `propName` option and forwards getter and setter to\n   * the new one.\n   *\n   * @param {string} propName The property to watch.\n   * @param {string} origProp The property from/to the value is forwarded.\n   * @param {Function} onChange The callback.\n   */\n  installPropWatcher(propName, origProp, onChange) {\n    const self = this;\n    Object.defineProperty(this.metaManager.globalMeta.meta, propName, {\n      get() {\n        return this[origProp];\n      },\n      set(value) {\n        const isInitialChange = !self.usageTracker.has(propName);\n        self.usageTracker.add(propName);\n        onChange.call(self, propName, value, isInitialChange);\n        this[origProp] = value;\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}