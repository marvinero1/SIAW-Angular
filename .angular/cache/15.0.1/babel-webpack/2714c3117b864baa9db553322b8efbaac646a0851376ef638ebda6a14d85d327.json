{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nimport { removeClass, addClass, setAttribute, removeAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { SelectionScanner } from \"./scanner.mjs\";\nimport Border from \"./border/border.mjs\";\n/**\n * Module responsible for rendering selections (CSS classes) and borders based on the\n * collection of the Selection instances provided throughout the `selections` Walkontable\n * setting.\n *\n * @private\n */\nvar _activeOverlaysWot = /*#__PURE__*/new WeakMap();\nvar _selections = /*#__PURE__*/new WeakMap();\nvar _scanner = /*#__PURE__*/new WeakMap();\nvar _appliedClasses = /*#__PURE__*/new WeakMap();\nvar _destroyListeners = /*#__PURE__*/new WeakMap();\nvar _selectionBorders = /*#__PURE__*/new WeakMap();\nvar _resetCells = /*#__PURE__*/new WeakSet();\nexport class SelectionManager {\n  constructor(selections) {\n    /**\n     * Resets the elements to their initial state (remove the CSS classes that are added in the\n     * previous render cycle).\n     */\n    _classPrivateMethodInitSpec(this, _resetCells);\n    /**\n     * The overlay's Walkontable instance that are currently processed.\n     *\n     * @type {Walkontable}\n     */\n    _classPrivateFieldInitSpec(this, _activeOverlaysWot, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The Highlight instance that holds Selections instances within it.\n     *\n     * @type {Highlight|null}\n     */\n    _classPrivateFieldInitSpec(this, _selections, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The SelectionScanner allows to scan and collect the cell and header elements that matches\n     * to the coords defined in the selections.\n     *\n     * @type {SelectionScanner}\n     */\n    _classPrivateFieldInitSpec(this, _scanner, {\n      writable: true,\n      value: new SelectionScanner()\n    });\n    /**\n     * The Map tracks applied CSS classes. It's used to reset the elements state to their initial state.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _appliedClasses, {\n      writable: true,\n      value: new WeakMap()\n    });\n    /**\n     * The Map tracks applied \"destroy\" listeners for Selection instances.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _destroyListeners, {\n      writable: true,\n      value: new WeakSet()\n    });\n    /**\n     * The Map holds references to Border classes for Selection instances which requires that when\n     * the \"border\" setting is defined.\n     *\n     * @type {Map}\n     */\n    _classPrivateFieldInitSpec(this, _selectionBorders, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldSet(this, _selections, selections);\n  }\n\n  /**\n   * Sets the active Walkontable instance.\n   *\n   * @param {Walkontable} activeWot The overlays or master Walkontable instance.\n   * @returns {SelectionManager}\n   */\n  setActiveOverlay(activeWot) {\n    _classPrivateFieldSet(this, _activeOverlaysWot, activeWot);\n    _classPrivateFieldGet(this, _scanner).setActiveOverlay(_classPrivateFieldGet(this, _activeOverlaysWot));\n    if (!_classPrivateFieldGet(this, _appliedClasses).has(_classPrivateFieldGet(this, _activeOverlaysWot))) {\n      _classPrivateFieldGet(this, _appliedClasses).set(_classPrivateFieldGet(this, _activeOverlaysWot), new Set());\n    }\n    return this;\n  }\n\n  /**\n   * Gets the Selection instance of the \"focus\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getFocusSelection() {\n    return _classPrivateFieldGet(this, _selections) !== null ? _classPrivateFieldGet(this, _selections).getFocus() : null;\n  }\n\n  /**\n   * Gets the Selection instance of the \"area\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getAreaSelection() {\n    return _classPrivateFieldGet(this, _selections) !== null ? _classPrivateFieldGet(this, _selections).createLayeredArea() : null;\n  }\n\n  /**\n   * Gets the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border|null} Returns the Border instance (new for each overlay Walkontable instance).\n   */\n  getBorderInstance(selection) {\n    if (!selection.settings.border) {\n      return null;\n    }\n    if (_classPrivateFieldGet(this, _selectionBorders).has(selection)) {\n      const borders = _classPrivateFieldGet(this, _selectionBorders).get(selection);\n      if (borders.has(_classPrivateFieldGet(this, _activeOverlaysWot))) {\n        return borders.get(_classPrivateFieldGet(this, _activeOverlaysWot));\n      }\n      const border = new Border(_classPrivateFieldGet(this, _activeOverlaysWot), selection.settings);\n      borders.set(_classPrivateFieldGet(this, _activeOverlaysWot), border);\n      return border;\n    }\n    const border = new Border(_classPrivateFieldGet(this, _activeOverlaysWot), selection.settings);\n    _classPrivateFieldGet(this, _selectionBorders).set(selection, new Map([[_classPrivateFieldGet(this, _activeOverlaysWot), border]]));\n    return border;\n  }\n\n  /**\n   * Gets all Border instances associated with Selection instance for all overlays.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border[]}\n   */\n  getBorderInstances(selection) {\n    var _classPrivateFieldGet2, _classPrivateFieldGet3;\n    return Array.from((_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _selectionBorders).get(selection)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.values()) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : []);\n  }\n\n  /**\n   * Destroys the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   */\n  destroyBorders(selection) {\n    _classPrivateFieldGet(this, _selectionBorders).get(selection).forEach(border => border.destroy());\n    _classPrivateFieldGet(this, _selectionBorders).delete(selection);\n  }\n\n  /**\n   * Renders all the selections (add CSS classes to cells and draw borders).\n   *\n   * @param {boolean} fastDraw Indicates the render cycle type (fast/slow).\n   */\n  render(fastDraw) {\n    if (_classPrivateFieldGet(this, _selections) === null) {\n      return;\n    }\n    if (fastDraw) {\n      // there was no rerender, so we need to remove classNames by ourselves\n      _classPrivateMethodGet(this, _resetCells, _resetCells2).call(this);\n    }\n    const selections = Array.from(_classPrivateFieldGet(this, _selections));\n    const classNamesMap = new Map();\n    const headerAttributesMap = new Map();\n    for (let i = 0; i < selections.length; i++) {\n      const selection = selections[i];\n      const {\n        className,\n        headerAttributes,\n        createLayers,\n        selectionType\n      } = selection.settings;\n      if (!_classPrivateFieldGet(this, _destroyListeners).has(selection)) {\n        _classPrivateFieldGet(this, _destroyListeners).add(selection);\n        selection.addLocalHook('destroy', () => this.destroyBorders(selection));\n      }\n      const borderInstance = this.getBorderInstance(selection);\n      if (selection.isEmpty()) {\n        borderInstance === null || borderInstance === void 0 || borderInstance.disappear();\n        continue; // eslint-disable-line no-continue\n      }\n\n      if (className) {\n        const elements = _classPrivateFieldGet(this, _scanner).setActiveSelection(selection).scan();\n        elements.forEach(element => {\n          if (classNamesMap.has(element)) {\n            const classNamesLayers = classNamesMap.get(element);\n            if (classNamesLayers.has(className) && createLayers === true) {\n              classNamesLayers.set(className, classNamesLayers.get(className) + 1);\n            } else {\n              classNamesLayers.set(className, 1);\n            }\n          } else {\n            classNamesMap.set(element, new Map([[className, 1]]));\n          }\n          if (headerAttributes) {\n            if (!headerAttributesMap.has(element)) {\n              headerAttributesMap.set(element, []);\n            }\n            if (element.nodeName === 'TH') {\n              headerAttributesMap.get(element).push(...headerAttributes);\n            }\n          }\n        });\n      }\n      const corners = selection.getCorners();\n      _classPrivateFieldGet(this, _activeOverlaysWot).getSetting('onBeforeDrawBorders', corners, selectionType);\n      borderInstance === null || borderInstance === void 0 || borderInstance.appear(corners);\n    }\n    classNamesMap.forEach((classNamesLayers, element) => {\n      var _classPrivateFieldGet4;\n      const classNames = Array.from(classNamesLayers).map(_ref => {\n        let [className, occurrenceCount] = _ref;\n        if (occurrenceCount === 1) {\n          return className;\n        }\n        return [className, ...Array.from({\n          length: occurrenceCount - 1\n        }, (_, i) => `${className}-${i + 1}`)];\n      }).flat();\n      classNames.forEach(className => _classPrivateFieldGet(this, _appliedClasses).get(_classPrivateFieldGet(this, _activeOverlaysWot)).add(className));\n      addClass(element, classNames);\n      if (element.nodeName === 'TD' && Array.isArray((_classPrivateFieldGet4 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.cellAttributes)) {\n        setAttribute(element, _classPrivateFieldGet(this, _selections).options.cellAttributes);\n      }\n    });\n\n    // Set the attributes for the headers if they're focused.\n    Array.from(headerAttributesMap.keys()).forEach(element => {\n      setAttribute(element, [...headerAttributesMap.get(element)]);\n    });\n  }\n}\nfunction _resetCells2() {\n  const appliedOverlaysClasses = _classPrivateFieldGet(this, _appliedClasses).get(_classPrivateFieldGet(this, _activeOverlaysWot));\n  const classesToRemove = _classPrivateFieldGet(this, _activeOverlaysWot).wtSettings.getSetting('onBeforeRemoveCellClassNames');\n  if (Array.isArray(classesToRemove)) {\n    for (let i = 0; i < classesToRemove.length; i++) {\n      appliedOverlaysClasses.add(classesToRemove[i]);\n    }\n  }\n  appliedOverlaysClasses.forEach(className => {\n    var _classPrivateFieldGet5, _classPrivateFieldGet6;\n    const nodes = _classPrivateFieldGet(this, _activeOverlaysWot).wtTable.TABLE.querySelectorAll(`.${className}`);\n    let cellAttributes = [];\n    if (Array.isArray((_classPrivateFieldGet5 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.cellAttributes)) {\n      cellAttributes = _classPrivateFieldGet(this, _selections).options.cellAttributes.map(el => el[0]);\n    }\n    if (Array.isArray((_classPrivateFieldGet6 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.headerAttributes)) {\n      cellAttributes = [...cellAttributes, ..._classPrivateFieldGet(this, _selections).options.headerAttributes.map(el => el[0])];\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      removeClass(nodes[i], className);\n      removeAttribute(nodes[i], cellAttributes);\n    }\n  });\n  appliedOverlaysClasses.clear();\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","obj","privateSet","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","privateMap","value","set","privateCollection","has","TypeError","_classPrivateMethodGet","receiver","fn","_classPrivateFieldGet","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","call","_classPrivateFieldSet","_classApplyDescriptorSet","action","writable","removeClass","addClass","setAttribute","removeAttribute","SelectionScanner","Border","_activeOverlaysWot","WeakMap","_selections","_scanner","_appliedClasses","_destroyListeners","_selectionBorders","_resetCells","WeakSet","SelectionManager","constructor","selections","Map","setActiveOverlay","activeWot","Set","getFocusSelection","getFocus","getAreaSelection","createLayeredArea","getBorderInstance","selection","settings","border","borders","getBorderInstances","_classPrivateFieldGet2","_classPrivateFieldGet3","Array","from","values","destroyBorders","forEach","destroy","delete","render","fastDraw","_resetCells2","classNamesMap","headerAttributesMap","i","length","className","headerAttributes","createLayers","selectionType","addLocalHook","borderInstance","isEmpty","disappear","elements","setActiveSelection","scan","element","classNamesLayers","nodeName","push","corners","getCorners","getSetting","appear","_classPrivateFieldGet4","classNames","map","_ref","occurrenceCount","_","flat","isArray","options","cellAttributes","keys","appliedOverlaysClasses","classesToRemove","wtSettings","_classPrivateFieldGet5","_classPrivateFieldGet6","nodes","wtTable","TABLE","querySelectorAll","el","len","clear"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/3rdparty/walkontable/src/selection/manager.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { removeClass, addClass, setAttribute, removeAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { SelectionScanner } from \"./scanner.mjs\";\nimport Border from \"./border/border.mjs\";\n/**\n * Module responsible for rendering selections (CSS classes) and borders based on the\n * collection of the Selection instances provided throughout the `selections` Walkontable\n * setting.\n *\n * @private\n */\nvar _activeOverlaysWot = /*#__PURE__*/new WeakMap();\nvar _selections = /*#__PURE__*/new WeakMap();\nvar _scanner = /*#__PURE__*/new WeakMap();\nvar _appliedClasses = /*#__PURE__*/new WeakMap();\nvar _destroyListeners = /*#__PURE__*/new WeakMap();\nvar _selectionBorders = /*#__PURE__*/new WeakMap();\nvar _resetCells = /*#__PURE__*/new WeakSet();\nexport class SelectionManager {\n  constructor(selections) {\n    /**\n     * Resets the elements to their initial state (remove the CSS classes that are added in the\n     * previous render cycle).\n     */\n    _classPrivateMethodInitSpec(this, _resetCells);\n    /**\n     * The overlay's Walkontable instance that are currently processed.\n     *\n     * @type {Walkontable}\n     */\n    _classPrivateFieldInitSpec(this, _activeOverlaysWot, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The Highlight instance that holds Selections instances within it.\n     *\n     * @type {Highlight|null}\n     */\n    _classPrivateFieldInitSpec(this, _selections, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The SelectionScanner allows to scan and collect the cell and header elements that matches\n     * to the coords defined in the selections.\n     *\n     * @type {SelectionScanner}\n     */\n    _classPrivateFieldInitSpec(this, _scanner, {\n      writable: true,\n      value: new SelectionScanner()\n    });\n    /**\n     * The Map tracks applied CSS classes. It's used to reset the elements state to their initial state.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _appliedClasses, {\n      writable: true,\n      value: new WeakMap()\n    });\n    /**\n     * The Map tracks applied \"destroy\" listeners for Selection instances.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _destroyListeners, {\n      writable: true,\n      value: new WeakSet()\n    });\n    /**\n     * The Map holds references to Border classes for Selection instances which requires that when\n     * the \"border\" setting is defined.\n     *\n     * @type {Map}\n     */\n    _classPrivateFieldInitSpec(this, _selectionBorders, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldSet(this, _selections, selections);\n  }\n\n  /**\n   * Sets the active Walkontable instance.\n   *\n   * @param {Walkontable} activeWot The overlays or master Walkontable instance.\n   * @returns {SelectionManager}\n   */\n  setActiveOverlay(activeWot) {\n    _classPrivateFieldSet(this, _activeOverlaysWot, activeWot);\n    _classPrivateFieldGet(this, _scanner).setActiveOverlay(_classPrivateFieldGet(this, _activeOverlaysWot));\n    if (!_classPrivateFieldGet(this, _appliedClasses).has(_classPrivateFieldGet(this, _activeOverlaysWot))) {\n      _classPrivateFieldGet(this, _appliedClasses).set(_classPrivateFieldGet(this, _activeOverlaysWot), new Set());\n    }\n    return this;\n  }\n\n  /**\n   * Gets the Selection instance of the \"focus\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getFocusSelection() {\n    return _classPrivateFieldGet(this, _selections) !== null ? _classPrivateFieldGet(this, _selections).getFocus() : null;\n  }\n\n  /**\n   * Gets the Selection instance of the \"area\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getAreaSelection() {\n    return _classPrivateFieldGet(this, _selections) !== null ? _classPrivateFieldGet(this, _selections).createLayeredArea() : null;\n  }\n\n  /**\n   * Gets the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border|null} Returns the Border instance (new for each overlay Walkontable instance).\n   */\n  getBorderInstance(selection) {\n    if (!selection.settings.border) {\n      return null;\n    }\n    if (_classPrivateFieldGet(this, _selectionBorders).has(selection)) {\n      const borders = _classPrivateFieldGet(this, _selectionBorders).get(selection);\n      if (borders.has(_classPrivateFieldGet(this, _activeOverlaysWot))) {\n        return borders.get(_classPrivateFieldGet(this, _activeOverlaysWot));\n      }\n      const border = new Border(_classPrivateFieldGet(this, _activeOverlaysWot), selection.settings);\n      borders.set(_classPrivateFieldGet(this, _activeOverlaysWot), border);\n      return border;\n    }\n    const border = new Border(_classPrivateFieldGet(this, _activeOverlaysWot), selection.settings);\n    _classPrivateFieldGet(this, _selectionBorders).set(selection, new Map([[_classPrivateFieldGet(this, _activeOverlaysWot), border]]));\n    return border;\n  }\n\n  /**\n   * Gets all Border instances associated with Selection instance for all overlays.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border[]}\n   */\n  getBorderInstances(selection) {\n    var _classPrivateFieldGet2, _classPrivateFieldGet3;\n    return Array.from((_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _selectionBorders).get(selection)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.values()) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : []);\n  }\n\n  /**\n   * Destroys the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   */\n  destroyBorders(selection) {\n    _classPrivateFieldGet(this, _selectionBorders).get(selection).forEach(border => border.destroy());\n    _classPrivateFieldGet(this, _selectionBorders).delete(selection);\n  }\n\n  /**\n   * Renders all the selections (add CSS classes to cells and draw borders).\n   *\n   * @param {boolean} fastDraw Indicates the render cycle type (fast/slow).\n   */\n  render(fastDraw) {\n    if (_classPrivateFieldGet(this, _selections) === null) {\n      return;\n    }\n    if (fastDraw) {\n      // there was no rerender, so we need to remove classNames by ourselves\n      _classPrivateMethodGet(this, _resetCells, _resetCells2).call(this);\n    }\n    const selections = Array.from(_classPrivateFieldGet(this, _selections));\n    const classNamesMap = new Map();\n    const headerAttributesMap = new Map();\n    for (let i = 0; i < selections.length; i++) {\n      const selection = selections[i];\n      const {\n        className,\n        headerAttributes,\n        createLayers,\n        selectionType\n      } = selection.settings;\n      if (!_classPrivateFieldGet(this, _destroyListeners).has(selection)) {\n        _classPrivateFieldGet(this, _destroyListeners).add(selection);\n        selection.addLocalHook('destroy', () => this.destroyBorders(selection));\n      }\n      const borderInstance = this.getBorderInstance(selection);\n      if (selection.isEmpty()) {\n        borderInstance === null || borderInstance === void 0 || borderInstance.disappear();\n        continue; // eslint-disable-line no-continue\n      }\n      if (className) {\n        const elements = _classPrivateFieldGet(this, _scanner).setActiveSelection(selection).scan();\n        elements.forEach(element => {\n          if (classNamesMap.has(element)) {\n            const classNamesLayers = classNamesMap.get(element);\n            if (classNamesLayers.has(className) && createLayers === true) {\n              classNamesLayers.set(className, classNamesLayers.get(className) + 1);\n            } else {\n              classNamesLayers.set(className, 1);\n            }\n          } else {\n            classNamesMap.set(element, new Map([[className, 1]]));\n          }\n          if (headerAttributes) {\n            if (!headerAttributesMap.has(element)) {\n              headerAttributesMap.set(element, []);\n            }\n            if (element.nodeName === 'TH') {\n              headerAttributesMap.get(element).push(...headerAttributes);\n            }\n          }\n        });\n      }\n      const corners = selection.getCorners();\n      _classPrivateFieldGet(this, _activeOverlaysWot).getSetting('onBeforeDrawBorders', corners, selectionType);\n      borderInstance === null || borderInstance === void 0 || borderInstance.appear(corners);\n    }\n    classNamesMap.forEach((classNamesLayers, element) => {\n      var _classPrivateFieldGet4;\n      const classNames = Array.from(classNamesLayers).map(_ref => {\n        let [className, occurrenceCount] = _ref;\n        if (occurrenceCount === 1) {\n          return className;\n        }\n        return [className, ...Array.from({\n          length: occurrenceCount - 1\n        }, (_, i) => `${className}-${i + 1}`)];\n      }).flat();\n      classNames.forEach(className => _classPrivateFieldGet(this, _appliedClasses).get(_classPrivateFieldGet(this, _activeOverlaysWot)).add(className));\n      addClass(element, classNames);\n      if (element.nodeName === 'TD' && Array.isArray((_classPrivateFieldGet4 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.cellAttributes)) {\n        setAttribute(element, _classPrivateFieldGet(this, _selections).options.cellAttributes);\n      }\n    });\n\n    // Set the attributes for the headers if they're focused.\n    Array.from(headerAttributesMap.keys()).forEach(element => {\n      setAttribute(element, [...headerAttributesMap.get(element)]);\n    });\n  }\n}\nfunction _resetCells2() {\n  const appliedOverlaysClasses = _classPrivateFieldGet(this, _appliedClasses).get(_classPrivateFieldGet(this, _activeOverlaysWot));\n  const classesToRemove = _classPrivateFieldGet(this, _activeOverlaysWot).wtSettings.getSetting('onBeforeRemoveCellClassNames');\n  if (Array.isArray(classesToRemove)) {\n    for (let i = 0; i < classesToRemove.length; i++) {\n      appliedOverlaysClasses.add(classesToRemove[i]);\n    }\n  }\n  appliedOverlaysClasses.forEach(className => {\n    var _classPrivateFieldGet5, _classPrivateFieldGet6;\n    const nodes = _classPrivateFieldGet(this, _activeOverlaysWot).wtTable.TABLE.querySelectorAll(`.${className}`);\n    let cellAttributes = [];\n    if (Array.isArray((_classPrivateFieldGet5 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.cellAttributes)) {\n      cellAttributes = _classPrivateFieldGet(this, _selections).options.cellAttributes.map(el => el[0]);\n    }\n    if (Array.isArray((_classPrivateFieldGet6 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.headerAttributes)) {\n      cellAttributes = [...cellAttributes, ..._classPrivateFieldGet(this, _selections).options.headerAttributes.map(el => el[0])];\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      removeClass(nodes[i], className);\n      removeAttribute(nodes[i], cellAttributes);\n    }\n  });\n  appliedOverlaysClasses.clear();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}