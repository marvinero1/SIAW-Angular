{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nimport { addClass, closest, isChildOf, hasClass, outerWidth, outerHeight } from \"../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../helpers/dom/event.mjs\";\nimport { deepClone, deepExtend, isObject } from \"../../helpers/object.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport CommentEditor from \"./commentEditor.mjs\";\nimport DisplaySwitch from \"./displaySwitch.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport addEditCommentItem from \"./contextMenuItem/addEditComment.mjs\";\nimport removeCommentItem from \"./contextMenuItem/removeComment.mjs\";\nimport readOnlyCommentItem from \"./contextMenuItem/readOnlyComment.mjs\";\nexport const PLUGIN_KEY = 'comments';\nexport const PLUGIN_PRIORITY = 60;\nexport const META_COMMENT = 'comment';\nexport const META_COMMENT_VALUE = 'value';\nexport const META_STYLE = 'style';\nexport const META_READONLY = 'readOnly';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nconst SHORTCUTS_CONTEXT_NAME = `plugin:${PLUGIN_KEY}`;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @plugin Comments\n * @class Comments\n *\n * @description\n * This plugin allows setting and managing cell comments by either an option in the context menu or with the use of\n * the API.\n *\n * To enable the plugin, you'll need to set the comments property of the config object to `true`:\n * ```js\n * comments: true\n * ```\n *\n * or an object with extra predefined plugin config:\n *\n * ```js\n * comments: {\n *   displayDelay: 1000,\n *   readOnly: true,\n *   style: {\n *     width: 300,\n *     height: 100\n *   }\n * }\n * ```\n *\n * To add comments at the table initialization, define the `comment` property in the `cell` config array as in an example below.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   data: getData(),\n *   comments: true,\n *   cell: [\n *     {row: 1, col: 1, comment: {value: 'Foo'}},\n *     {row: 2, col: 2, comment: {value: 'Bar'}}\n *   ]\n * });\n *\n * // Access to the Comments plugin instance:\n * const commentsPlugin = hot.getPlugin('comments');\n *\n * // Manage comments programmatically:\n * commentsPlugin.setCommentAtCell(1, 6, 'Comment contents');\n * commentsPlugin.showAtCell(1, 6);\n * commentsPlugin.removeCommentAtCell(1, 6);\n *\n * // You can also set range once and use proper methods:\n * commentsPlugin.setRange({from: {row: 1, col: 6}});\n * commentsPlugin.setComment('Comment contents');\n * commentsPlugin.show();\n * commentsPlugin.removeComment();\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   comments={true}\n *   cell={[\n *     {row: 1, col: 1, comment: {value: 'Foo'}},\n *     {row: 2, col: 2, comment: {value: 'Bar'}}\n *   ]}\n * />\n *\n * // Access to the Comments plugin instance:\n * const hot = hotRef.current.hotInstance;\n * const commentsPlugin = hot.getPlugin('comments');\n *\n * // Manage comments programmatically:\n * commentsPlugin.setCommentAtCell(1, 6, 'Comment contents');\n * commentsPlugin.showAtCell(1, 6);\n * commentsPlugin.removeCommentAtCell(1, 6);\n *\n * // You can also set range once and use proper methods:\n * commentsPlugin.setRange({from: {row: 1, col: 6}});\n * commentsPlugin.setComment('Comment contents');\n * commentsPlugin.show();\n * commentsPlugin.removeComment();\n * ```\n * :::\n */\nvar _editor = /*#__PURE__*/new WeakMap();\nvar _displaySwitch = /*#__PURE__*/new WeakMap();\nvar _preventEditorAutoSwitch = /*#__PURE__*/new WeakMap();\nvar _preventEditorHiding = /*#__PURE__*/new WeakMap();\nvar _tempEditorDimensions = /*#__PURE__*/new WeakMap();\nvar _cellBelowCursor = /*#__PURE__*/new WeakMap();\nvar _commentValueBeforeSave = /*#__PURE__*/new WeakMap();\nvar _onMouseDown = /*#__PURE__*/new WeakSet();\nvar _onMouseOver = /*#__PURE__*/new WeakSet();\nvar _onMouseUp = /*#__PURE__*/new WeakSet();\nvar _onAfterRenderer = /*#__PURE__*/new WeakSet();\nvar _onEditorBlur = /*#__PURE__*/new WeakSet();\nvar _onEditorFocus = /*#__PURE__*/new WeakSet();\nvar _onEditorMouseDown = /*#__PURE__*/new WeakSet();\nvar _onEditorMouseUp = /*#__PURE__*/new WeakSet();\nvar _onAfterDocumentKeyDown = /*#__PURE__*/new WeakSet();\nvar _onAfterScroll = /*#__PURE__*/new WeakSet();\nexport class Comments extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Observes the changes in the scroll position if triggered it hides the comment editor.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterScroll);\n    /**\n     * Observes the pressed keys and if there is already opened the comment editor prevents open\n     * the table editor into the fast edit mode.\n     *\n     * @param {Event} event The keydown event.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterDocumentKeyDown);\n    /**\n     * `mouseup` hook. Along with `onEditorMouseDown` used to simulate the textarea resizing event.\n     *\n     * @param {MouseEvent} event The `mouseup` event.\n     */\n    _classPrivateMethodInitSpec(this, _onEditorMouseUp);\n    /**\n     * `mousedown` hook. Along with `onEditorMouseUp` used to simulate the textarea resizing event.\n     *\n     * @param {MouseEvent} event The `mousedown` event.\n     */\n    _classPrivateMethodInitSpec(this, _onEditorMouseDown);\n    /**\n     * Hook observer the \"focus\" event from the comments editor element. The hook takes the control of\n     * the keyboard shortcuts by switching the context to plugins one.\n     */\n    _classPrivateMethodInitSpec(this, _onEditorFocus);\n    /**\n     * Hook observer the \"blur\" event from the comments editor element. The hook clears the\n     * editor content and gives back the keyboard shortcuts control by switching to the \"grid\" context.\n     */\n    _classPrivateMethodInitSpec(this, _onEditorBlur);\n    /**\n     * The `afterRenderer` hook callback.\n     *\n     * @param {HTMLTableCellElement} TD The rendered `TD` element.\n     * @param {object} cellProperties The rendered cell's property object.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterRenderer);\n    /**\n     * `mouseup` event callback.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseUp);\n    /**\n     * `mouseover` event callback.\n     *\n     * @param {MouseEvent} event The `mouseover` event.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseOver);\n    /**\n     * `mousedown` event callback.\n     *\n     * @param {MouseEvent} event The `mousedown` event.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseDown);\n    /**\n     * Current cell range, an object with `from` property, with `row` and `col` properties (e.q. `{from: {row: 1, col: 6}}`).\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"range\", {});\n    /**\n     * Instance of {@link CommentEditor}.\n     *\n     * @private\n     * @type {CommentEditor}\n     */\n    _classPrivateFieldInitSpec(this, _editor, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Instance of {@link DisplaySwitch}.\n     *\n     * @private\n     * @type {DisplaySwitch}\n     */\n    _classPrivateFieldInitSpec(this, _displaySwitch, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Prevents showing/hiding editor that reacts on the logic triggered by the \"mouseover\" events.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _preventEditorAutoSwitch, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Prevents hiding editor when the table viewport is scrolled and that scroll is triggered by the\n     * keyboard shortcut that insert or edits the comment.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _preventEditorHiding, {\n      writable: true,\n      value: false\n    });\n    /**\n     * The property for holding editor dimensions for further processing.\n     *\n     * @private\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _tempEditorDimensions, {\n      writable: true,\n      value: {}\n    });\n    /**\n     * The flag that allows processing mousedown event correctly when comments editor is triggered.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _cellBelowCursor, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Holds the comment value before it's actually saved to the cell meta.\n     *\n     * @private\n     * @type {string}\n     */\n    _classPrivateFieldInitSpec(this, _commentValueBeforeSave, {\n      writable: true,\n      value: ''\n    });\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link Comments#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    if (!_classPrivateFieldGet(this, _editor)) {\n      _classPrivateFieldSet(this, _editor, new CommentEditor(this.hot.rootDocument, this.hot.isRtl()));\n    }\n    if (!_classPrivateFieldGet(this, _displaySwitch)) {\n      _classPrivateFieldSet(this, _displaySwitch, new DisplaySwitch(this.getDisplayDelaySetting()));\n    }\n    this.addHook('afterContextMenuDefaultOptions', options => this.addToContextMenu(options));\n    this.addHook('afterRenderer', (TD, row, col, prop, value, cellProperties) => _classPrivateMethodGet(this, _onAfterRenderer, _onAfterRenderer2).call(this, TD, cellProperties));\n    this.addHook('afterScroll', () => _classPrivateMethodGet(this, _onAfterScroll, _onAfterScroll2).call(this));\n    this.addHook('afterBeginEditing', () => this.hide());\n    this.addHook('afterDocumentKeyDown', event => _classPrivateMethodGet(this, _onAfterDocumentKeyDown, _onAfterDocumentKeyDown2).call(this, event));\n    _classPrivateFieldGet(this, _displaySwitch).addLocalHook('hide', () => this.hide());\n    _classPrivateFieldGet(this, _displaySwitch).addLocalHook('show', (row, col) => this.showAtCell(row, col));\n    this.registerShortcuts();\n    this.registerListeners();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *   - [`comments`](@/api/options.md#comments)\n   */\n  updatePlugin() {\n    _classPrivateFieldGet(this, _displaySwitch).updateDelay(this.getDisplayDelaySetting());\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.unregisterShortcuts();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling context menu.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    const manager = this.hot.getShortcutManager();\n    const gridContext = manager.getContext('grid');\n    const pluginContext = manager.addContext(SHORTCUTS_CONTEXT_NAME);\n    gridContext.addShortcut({\n      keys: [['Control', 'Alt', 'M']],\n      callback: () => {\n        const range = this.hot.getSelectedRangeLast();\n        _classPrivateFieldSet(this, _preventEditorHiding, true);\n        this.hot.scrollToFocusedCell(() => {\n          this.setRange(range);\n          this.show();\n          this.focusEditor();\n          manager.setActiveContextName(SHORTCUTS_CONTEXT_NAME);\n          this.hot._registerTimeout(() => {\n            _classPrivateFieldSet(this, _preventEditorHiding, false);\n          });\n        });\n      },\n      stopPropagation: true,\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        return ((_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight.isCell()) && !_classPrivateFieldGet(this, _editor).isVisible();\n      },\n      group: SHORTCUTS_GROUP\n    });\n    pluginContext.addShortcut({\n      keys: [['Escape']],\n      callback: () => {\n        _classPrivateFieldGet(this, _editor).setValue(_classPrivateFieldGet(this, _commentValueBeforeSave));\n        this.hide();\n        manager.setActiveContextName('grid');\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected2;\n        return ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.highlight.isCell()) && _classPrivateFieldGet(this, _editor).isVisible();\n      },\n      group: SHORTCUTS_GROUP\n    });\n    pluginContext.addShortcut({\n      keys: [['Control/Meta', 'Enter']],\n      callback: () => {\n        this.hide();\n        manager.setActiveContextName('grid');\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected3;\n        return ((_this$hot$getSelected3 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected3 === void 0 ? void 0 : _this$hot$getSelected3.highlight.isCell()) && _classPrivateFieldGet(this, _editor).isVisible();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling context menu.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Registers all necessary DOM listeners.\n   *\n   * @private\n   */\n  registerListeners() {\n    const {\n      rootDocument\n    } = this.hot;\n    const editorElement = this.getEditorInputElement();\n    this.eventManager.addEventListener(rootDocument, 'mouseover', event => _classPrivateMethodGet(this, _onMouseOver, _onMouseOver2).call(this, event));\n    this.eventManager.addEventListener(rootDocument, 'mousedown', event => _classPrivateMethodGet(this, _onMouseDown, _onMouseDown2).call(this, event));\n    this.eventManager.addEventListener(rootDocument, 'mouseup', () => _classPrivateMethodGet(this, _onMouseUp, _onMouseUp2).call(this));\n    this.eventManager.addEventListener(editorElement, 'focus', () => _classPrivateMethodGet(this, _onEditorFocus, _onEditorFocus2).call(this));\n    this.eventManager.addEventListener(editorElement, 'blur', () => _classPrivateMethodGet(this, _onEditorBlur, _onEditorBlur2).call(this));\n    this.eventManager.addEventListener(editorElement, 'mousedown', event => _classPrivateMethodGet(this, _onEditorMouseDown, _onEditorMouseDown2).call(this, event));\n    this.eventManager.addEventListener(editorElement, 'mouseup', event => _classPrivateMethodGet(this, _onEditorMouseUp, _onEditorMouseUp2).call(this, event));\n  }\n\n  /**\n   * Sets the current cell range to be able to use general methods like {@link Comments#setComment}, {@link Comments#removeComment}, {@link Comments#show}.\n   *\n   * @param {object} range Object with `from` property, each with `row` and `col` properties.\n   */\n  setRange(range) {\n    this.range = range;\n  }\n\n  /**\n   * Clears the currently selected cell.\n   */\n  clearRange() {\n    this.range = {};\n  }\n\n  /**\n   * Checks if the event target is a cell containing a comment.\n   *\n   * @private\n   * @param {Event} event DOM event.\n   * @returns {boolean}\n   */\n  targetIsCellWithComment(event) {\n    const closestCell = closest(event.target, 'TD', 'TBODY');\n    return !!(closestCell && hasClass(closestCell, 'htCommentCell') && closest(closestCell, [this.hot.rootElement]));\n  }\n\n  /**\n   * Checks if the event target is a comment textarea.\n   *\n   * @private\n   * @param {Event} event DOM event.\n   * @returns {boolean}\n   */\n  targetIsCommentTextArea(event) {\n    return this.getEditorInputElement() === event.target;\n  }\n\n  /**\n   * Sets a comment for a cell according to the previously set range (see {@link Comments#setRange}).\n   *\n   * @param {string} value Comment contents.\n   */\n  setComment(value) {\n    if (!this.range.from) {\n      throw new Error('Before using this method, first set cell range (hot.getPlugin(\"comment\").setRange())');\n    }\n    const editorValue = _classPrivateFieldGet(this, _editor).getValue();\n    let comment = '';\n    if (value !== null && value !== undefined) {\n      comment = value;\n    } else if (editorValue !== null && editorValue !== undefined) {\n      comment = editorValue;\n    }\n    const row = this.range.from.row;\n    const col = this.range.from.col;\n    this.updateCommentMeta(row, col, {\n      [META_COMMENT_VALUE]: comment\n    });\n    this.hot.render();\n  }\n\n  /**\n   * Sets a comment for a specified cell.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} value Comment contents.\n   */\n  setCommentAtCell(row, column, value) {\n    this.setRange({\n      from: this.hot._createCellCoords(row, column)\n    });\n    this.setComment(value);\n  }\n\n  /**\n   * Removes a comment from a cell according to previously set range (see {@link Comments#setRange}).\n   *\n   * @param {boolean} [forceRender=true] If set to `true`, the table will be re-rendered at the end of the operation.\n   */\n  removeComment() {\n    let forceRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (!this.range.from) {\n      throw new Error('Before using this method, first set cell range (hot.getPlugin(\"comment\").setRange())');\n    }\n    this.hot.setCellMeta(this.range.from.row, this.range.from.col, META_COMMENT);\n    if (forceRender) {\n      this.hot.render();\n    }\n    this.hide();\n  }\n\n  /**\n   * Removes a comment from a specified cell.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {boolean} [forceRender=true] If `true`, the table will be re-rendered at the end of the operation.\n   */\n  removeCommentAtCell(row, column) {\n    let forceRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this.setRange({\n      from: this.hot._createCellCoords(row, column)\n    });\n    this.removeComment(forceRender);\n  }\n\n  /**\n   * Gets comment from a cell according to previously set range (see {@link Comments#setRange}).\n   *\n   * @returns {string|undefined} Returns a content of the comment.\n   */\n  getComment() {\n    const row = this.range.from.row;\n    const column = this.range.from.col;\n    return this.getCommentMeta(row, column, META_COMMENT_VALUE);\n  }\n\n  /**\n   * Gets comment from a cell at the provided coordinates.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {string|undefined} Returns a content of the comment.\n   */\n  getCommentAtCell(row, column) {\n    return this.getCommentMeta(row, column, META_COMMENT_VALUE);\n  }\n\n  /**\n   * Shows the comment editor accordingly to the previously set range (see {@link Comments#setRange}).\n   *\n   * @returns {boolean} Returns `true` if comment editor was shown.\n   */\n  show() {\n    var _ref;\n    if (!this.range.from) {\n      throw new Error('Before using this method, first set cell range (hot.getPlugin(\"comment\").setRange())');\n    }\n    const {\n      from: {\n        row,\n        col\n      }\n    } = this.range;\n    if (row < 0 || row > this.hot.countSourceRows() - 1 || col < 0 || col > this.hot.countSourceCols() - 1) {\n      return false;\n    }\n    const meta = this.hot.getCellMeta(this.range.from.row, this.range.from.col);\n    _classPrivateFieldGet(this, _displaySwitch).cancelHiding();\n    _classPrivateFieldGet(this, _editor).setValue((_ref = meta[META_COMMENT] ? meta[META_COMMENT][META_COMMENT_VALUE] : null) !== null && _ref !== void 0 ? _ref : '');\n    _classPrivateFieldGet(this, _editor).show();\n    this.refreshEditor(true);\n    return true;\n  }\n\n  /**\n   * Shows comment editor according to cell coordinates.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {boolean} Returns `true` if comment editor was shown.\n   */\n  showAtCell(row, column) {\n    this.setRange({\n      from: this.hot._createCellCoords(row, column)\n    });\n    return this.show();\n  }\n\n  /**\n   * Hides the comment editor.\n   */\n  hide() {\n    _classPrivateFieldGet(this, _editor).hide();\n  }\n\n  /**\n   * Refreshes comment editor position and styling.\n   *\n   * @param {boolean} [force=false] If `true` then recalculation will be forced.\n   */\n  refreshEditor() {\n    var _renderableRow, _renderableColumn;\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!force && (!this.range.from || !_classPrivateFieldGet(this, _editor).isVisible())) {\n      return;\n    }\n    const {\n      rowIndexMapper,\n      columnIndexMapper\n    } = this.hot;\n    const {\n      row: visualRow,\n      col: visualColumn\n    } = this.range.from;\n    let renderableRow = rowIndexMapper.getRenderableFromVisualIndex(visualRow);\n    let renderableColumn = columnIndexMapper.getRenderableFromVisualIndex(visualColumn);\n    // Used when the requested row is hidden, and the editor needs to be positioned on the previous row's coords.\n    const targetingPreviousRow = renderableRow === null;\n\n    // Reset the editor position to (0, 0) so the opening direction calculation wouldn't be influenced by its\n    // previous position\n    _classPrivateFieldGet(this, _editor).setPosition(0, 0);\n    if (renderableRow === null) {\n      renderableRow = rowIndexMapper.getRenderableFromVisualIndex(rowIndexMapper.getNearestNotHiddenIndex(visualRow, -1));\n    }\n    if (renderableColumn === null) {\n      renderableColumn = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getNearestNotHiddenIndex(visualColumn, -1));\n    }\n    const isBeforeRenderedRows = renderableRow === null;\n    const isBeforeRenderedColumns = renderableColumn === null;\n    renderableRow = (_renderableRow = renderableRow) !== null && _renderableRow !== void 0 ? _renderableRow : 0;\n    renderableColumn = (_renderableColumn = renderableColumn) !== null && _renderableColumn !== void 0 ? _renderableColumn : 0;\n    const {\n      rootWindow,\n      view: {\n        _wt: wt\n      }\n    } = this.hot;\n    const {\n      wtTable\n    } = wt;\n    // TODO: Probably using `hot.getCell` would be the best. However, case for showing comment editor for hidden cell\n    // potentially should be removed with that change (currently a test for it is passing).\n    const TD = wt.getCell({\n      row: renderableRow,\n      col: renderableColumn\n    }, true);\n    const commentStyle = this.getCommentMeta(visualRow, visualColumn, META_STYLE);\n    if (commentStyle) {\n      _classPrivateFieldGet(this, _editor).setSize(commentStyle.width, commentStyle.height);\n    } else {\n      _classPrivateFieldGet(this, _editor).resetSize();\n    }\n    const lastColWidth = isBeforeRenderedColumns ? 0 : wtTable.getStretchedColumnWidth(renderableColumn);\n    const lastRowHeight = targetingPreviousRow && !isBeforeRenderedRows ? outerHeight(TD) : 0;\n    const {\n      left,\n      top,\n      width: cellWidth,\n      height: cellHeight\n    } = TD.getBoundingClientRect();\n    const {\n      width: editorWidth,\n      height: editorHeight\n    } = _classPrivateFieldGet(this, _editor).getSize();\n    const {\n      innerWidth,\n      innerHeight\n    } = this.hot.rootWindow;\n    const documentElement = this.hot.rootDocument.documentElement;\n    let x = left + rootWindow.scrollX + lastColWidth;\n    let y = top + rootWindow.scrollY + lastRowHeight;\n    if (this.hot.isRtl()) {\n      x -= editorWidth + lastColWidth;\n    }\n\n    // flip to the right or left the comments editor position when it goes out of browser viewport\n    if (this.hot.isLtr() && left + cellWidth + editorWidth > innerWidth) {\n      x = left + rootWindow.scrollX - editorWidth - 1;\n    } else if (this.hot.isRtl() && x < -(documentElement.scrollWidth - documentElement.clientWidth)) {\n      x = left + rootWindow.scrollX + lastColWidth + 1;\n    }\n    if (top + editorHeight > innerHeight) {\n      y -= editorHeight - cellHeight + 1;\n    }\n    _classPrivateFieldGet(this, _editor).setPosition(x, y);\n    _classPrivateFieldGet(this, _editor).setReadOnlyState(this.getCommentMeta(visualRow, visualColumn, META_READONLY));\n  }\n\n  /**\n   * Focuses the comments editor element.\n   */\n  focusEditor() {\n    _classPrivateFieldGet(this, _editor).focus();\n  }\n\n  /**\n   * Sets or update the comment-related cell meta.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {object} metaObject Object defining all the comment-related meta information.\n   */\n  updateCommentMeta(row, column, metaObject) {\n    const oldComment = this.hot.getCellMeta(row, column)[META_COMMENT];\n    let newComment;\n    if (oldComment) {\n      newComment = deepClone(oldComment);\n      deepExtend(newComment, metaObject);\n    } else {\n      newComment = metaObject;\n    }\n    this.hot.setCellMeta(row, column, META_COMMENT, newComment);\n  }\n\n  /**\n   * Gets the comment related meta information.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} property Cell meta property.\n   * @returns {Mixed}\n   */\n  getCommentMeta(row, column, property) {\n    const cellMeta = this.hot.getCellMeta(row, column);\n    if (!cellMeta[META_COMMENT]) {\n      return undefined;\n    }\n    return cellMeta[META_COMMENT][property];\n  }\n  /**\n   * Add Comments plugin options to the Context Menu.\n   *\n   * @private\n   * @param {object} options The menu options.\n   */\n  addToContextMenu(options) {\n    options.items.push({\n      name: SEPARATOR\n    }, addEditCommentItem(this), removeCommentItem(this), readOnlyCommentItem(this));\n  }\n\n  /**\n   * Get `displayDelay` setting of comment plugin.\n   *\n   * @private\n   * @returns {number|undefined}\n   */\n  getDisplayDelaySetting() {\n    const commentSetting = this.hot.getSettings()[PLUGIN_KEY];\n    if (isObject(commentSetting)) {\n      return commentSetting.displayDelay;\n    }\n  }\n\n  /**\n   * Gets the editors input element.\n   *\n   * @private\n   * @returns {HTMLTextAreaElement}\n   */\n  getEditorInputElement() {\n    return _classPrivateFieldGet(this, _editor).getInputElement();\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    if (_classPrivateFieldGet(this, _editor)) {\n      _classPrivateFieldGet(this, _editor).destroy();\n    }\n    if (_classPrivateFieldGet(this, _displaySwitch)) {\n      _classPrivateFieldGet(this, _displaySwitch).destroy();\n    }\n    super.destroy();\n  }\n}\nfunction _onMouseDown2(event) {\n  if (!this.hot.view || !this.hot.view._wt) {\n    return;\n  }\n  if (!_classPrivateFieldGet(this, _preventEditorAutoSwitch) && !this.targetIsCommentTextArea(event)) {\n    const eventCell = closest(event.target, 'TD', 'TBODY');\n    let coordinates = null;\n    if (eventCell) {\n      coordinates = this.hot.getCoords(eventCell);\n    }\n    if (!eventCell || this.range.from && coordinates && (this.range.from.row !== coordinates.row || this.range.from.col !== coordinates.col)) {\n      this.hide();\n    }\n  }\n}\nfunction _onMouseOver2(event) {\n  const {\n    rootDocument\n  } = this.hot;\n  if (_classPrivateFieldGet(this, _preventEditorAutoSwitch) || _classPrivateFieldGet(this, _editor).isFocused() || hasClass(event.target, 'wtBorder') || _classPrivateFieldGet(this, _cellBelowCursor) === event.target || !_classPrivateFieldGet(this, _editor)) {\n    return;\n  }\n  _classPrivateFieldSet(this, _cellBelowCursor, rootDocument.elementFromPoint(event.clientX, event.clientY));\n  if (this.targetIsCellWithComment(event)) {\n    const range = this.hot._createCellRange(this.hot.getCoords(event.target));\n    _classPrivateFieldGet(this, _displaySwitch).show(range);\n  } else if (isChildOf(event.target, rootDocument) && !this.targetIsCommentTextArea(event)) {\n    _classPrivateFieldGet(this, _displaySwitch).hide();\n  }\n}\nfunction _onMouseUp2() {\n  _classPrivateFieldSet(this, _preventEditorAutoSwitch, false);\n}\nfunction _onAfterRenderer2(TD, cellProperties) {\n  if (cellProperties[META_COMMENT] && cellProperties[META_COMMENT][META_COMMENT_VALUE]) {\n    addClass(TD, cellProperties.commentedCellClassName);\n  }\n}\nfunction _onEditorBlur2() {\n  _classPrivateFieldSet(this, _commentValueBeforeSave, '');\n  this.hot.getShortcutManager().setActiveContextName('grid');\n  this.setComment();\n}\nfunction _onEditorFocus2() {\n  _classPrivateFieldSet(this, _commentValueBeforeSave, this.getComment());\n  this.hot.listen();\n  this.hot.getShortcutManager().setActiveContextName(SHORTCUTS_CONTEXT_NAME);\n}\nfunction _onEditorMouseDown2(event) {\n  _classPrivateFieldSet(this, _tempEditorDimensions, {\n    width: outerWidth(event.target),\n    height: outerHeight(event.target)\n  });\n}\nfunction _onEditorMouseUp2(event) {\n  const currentWidth = outerWidth(event.target);\n  const currentHeight = outerHeight(event.target);\n  if (currentWidth !== _classPrivateFieldGet(this, _tempEditorDimensions).width + 1 || currentHeight !== _classPrivateFieldGet(this, _tempEditorDimensions).height + 2) {\n    this.updateCommentMeta(this.range.from.row, this.range.from.col, {\n      [META_STYLE]: {\n        width: currentWidth,\n        height: currentHeight\n      }\n    });\n  }\n}\nfunction _onAfterDocumentKeyDown2(event) {\n  if (_classPrivateFieldGet(this, _editor).isVisible()) {\n    stopImmediatePropagation(event);\n  }\n}\nfunction _onAfterScroll2() {\n  if (!_classPrivateFieldGet(this, _preventEditorHiding)) {\n    this.hide();\n  }\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","obj","privateSet","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","privateMap","value","set","privateCollection","has","TypeError","_defineProperty","key","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","Number","_classPrivateMethodGet","receiver","fn","_classPrivateFieldSet","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorSet","_classPrivateFieldGet","_classApplyDescriptorGet","action","get","addClass","closest","isChildOf","hasClass","outerWidth","outerHeight","stopImmediatePropagation","deepClone","deepExtend","isObject","BasePlugin","CommentEditor","DisplaySwitch","SEPARATOR","addEditCommentItem","removeCommentItem","readOnlyCommentItem","PLUGIN_KEY","PLUGIN_PRIORITY","META_COMMENT","META_COMMENT_VALUE","META_STYLE","META_READONLY","SHORTCUTS_GROUP","SHORTCUTS_CONTEXT_NAME","_editor","WeakMap","_displaySwitch","_preventEditorAutoSwitch","_preventEditorHiding","_tempEditorDimensions","_cellBelowCursor","_commentValueBeforeSave","_onMouseDown","WeakSet","_onMouseOver","_onMouseUp","_onAfterRenderer","_onEditorBlur","_onEditorFocus","_onEditorMouseDown","_onEditorMouseUp","_onAfterDocumentKeyDown","_onAfterScroll","Comments","constructor","arguments","isEnabled","hot","getSettings","enablePlugin","enabled","rootDocument","isRtl","getDisplayDelaySetting","addHook","options","addToContextMenu","TD","row","col","prop","cellProperties","_onAfterRenderer2","_onAfterScroll2","hide","event","_onAfterDocumentKeyDown2","addLocalHook","showAtCell","registerShortcuts","registerListeners","updatePlugin","updateDelay","disablePlugin","unregisterShortcuts","manager","getShortcutManager","gridContext","getContext","pluginContext","addContext","addShortcut","keys","callback","range","getSelectedRangeLast","scrollToFocusedCell","setRange","show","focusEditor","setActiveContextName","_registerTimeout","stopPropagation","runOnlyIf","_this$hot$getSelected","highlight","isCell","isVisible","group","setValue","_this$hot$getSelected2","_this$hot$getSelected3","removeShortcutsByGroup","editorElement","getEditorInputElement","eventManager","addEventListener","_onMouseOver2","_onMouseDown2","_onMouseUp2","_onEditorFocus2","_onEditorBlur2","_onEditorMouseDown2","_onEditorMouseUp2","clearRange","targetIsCellWithComment","closestCell","target","rootElement","targetIsCommentTextArea","setComment","from","Error","editorValue","getValue","comment","undefined","updateCommentMeta","render","setCommentAtCell","column","_createCellCoords","removeComment","forceRender","length","setCellMeta","removeCommentAtCell","getComment","getCommentMeta","getCommentAtCell","_ref","countSourceRows","countSourceCols","meta","getCellMeta","cancelHiding","refreshEditor","_renderableRow","_renderableColumn","force","rowIndexMapper","columnIndexMapper","visualRow","visualColumn","renderableRow","getRenderableFromVisualIndex","renderableColumn","targetingPreviousRow","setPosition","getNearestNotHiddenIndex","isBeforeRenderedRows","isBeforeRenderedColumns","rootWindow","view","_wt","wt","wtTable","getCell","commentStyle","setSize","width","height","resetSize","lastColWidth","getStretchedColumnWidth","lastRowHeight","left","top","cellWidth","cellHeight","getBoundingClientRect","editorWidth","editorHeight","getSize","innerWidth","innerHeight","documentElement","x","scrollX","y","scrollY","isLtr","scrollWidth","clientWidth","setReadOnlyState","focus","metaObject","oldComment","newComment","property","cellMeta","items","push","name","commentSetting","displayDelay","getInputElement","destroy","eventCell","coordinates","getCoords","isFocused","elementFromPoint","clientX","clientY","_createCellRange","commentedCellClassName","listen","currentWidth","currentHeight"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/plugins/comments/comments.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { addClass, closest, isChildOf, hasClass, outerWidth, outerHeight } from \"../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../helpers/dom/event.mjs\";\nimport { deepClone, deepExtend, isObject } from \"../../helpers/object.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport CommentEditor from \"./commentEditor.mjs\";\nimport DisplaySwitch from \"./displaySwitch.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport addEditCommentItem from \"./contextMenuItem/addEditComment.mjs\";\nimport removeCommentItem from \"./contextMenuItem/removeComment.mjs\";\nimport readOnlyCommentItem from \"./contextMenuItem/readOnlyComment.mjs\";\nexport const PLUGIN_KEY = 'comments';\nexport const PLUGIN_PRIORITY = 60;\nexport const META_COMMENT = 'comment';\nexport const META_COMMENT_VALUE = 'value';\nexport const META_STYLE = 'style';\nexport const META_READONLY = 'readOnly';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nconst SHORTCUTS_CONTEXT_NAME = `plugin:${PLUGIN_KEY}`;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @plugin Comments\n * @class Comments\n *\n * @description\n * This plugin allows setting and managing cell comments by either an option in the context menu or with the use of\n * the API.\n *\n * To enable the plugin, you'll need to set the comments property of the config object to `true`:\n * ```js\n * comments: true\n * ```\n *\n * or an object with extra predefined plugin config:\n *\n * ```js\n * comments: {\n *   displayDelay: 1000,\n *   readOnly: true,\n *   style: {\n *     width: 300,\n *     height: 100\n *   }\n * }\n * ```\n *\n * To add comments at the table initialization, define the `comment` property in the `cell` config array as in an example below.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   data: getData(),\n *   comments: true,\n *   cell: [\n *     {row: 1, col: 1, comment: {value: 'Foo'}},\n *     {row: 2, col: 2, comment: {value: 'Bar'}}\n *   ]\n * });\n *\n * // Access to the Comments plugin instance:\n * const commentsPlugin = hot.getPlugin('comments');\n *\n * // Manage comments programmatically:\n * commentsPlugin.setCommentAtCell(1, 6, 'Comment contents');\n * commentsPlugin.showAtCell(1, 6);\n * commentsPlugin.removeCommentAtCell(1, 6);\n *\n * // You can also set range once and use proper methods:\n * commentsPlugin.setRange({from: {row: 1, col: 6}});\n * commentsPlugin.setComment('Comment contents');\n * commentsPlugin.show();\n * commentsPlugin.removeComment();\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   comments={true}\n *   cell={[\n *     {row: 1, col: 1, comment: {value: 'Foo'}},\n *     {row: 2, col: 2, comment: {value: 'Bar'}}\n *   ]}\n * />\n *\n * // Access to the Comments plugin instance:\n * const hot = hotRef.current.hotInstance;\n * const commentsPlugin = hot.getPlugin('comments');\n *\n * // Manage comments programmatically:\n * commentsPlugin.setCommentAtCell(1, 6, 'Comment contents');\n * commentsPlugin.showAtCell(1, 6);\n * commentsPlugin.removeCommentAtCell(1, 6);\n *\n * // You can also set range once and use proper methods:\n * commentsPlugin.setRange({from: {row: 1, col: 6}});\n * commentsPlugin.setComment('Comment contents');\n * commentsPlugin.show();\n * commentsPlugin.removeComment();\n * ```\n * :::\n */\nvar _editor = /*#__PURE__*/new WeakMap();\nvar _displaySwitch = /*#__PURE__*/new WeakMap();\nvar _preventEditorAutoSwitch = /*#__PURE__*/new WeakMap();\nvar _preventEditorHiding = /*#__PURE__*/new WeakMap();\nvar _tempEditorDimensions = /*#__PURE__*/new WeakMap();\nvar _cellBelowCursor = /*#__PURE__*/new WeakMap();\nvar _commentValueBeforeSave = /*#__PURE__*/new WeakMap();\nvar _onMouseDown = /*#__PURE__*/new WeakSet();\nvar _onMouseOver = /*#__PURE__*/new WeakSet();\nvar _onMouseUp = /*#__PURE__*/new WeakSet();\nvar _onAfterRenderer = /*#__PURE__*/new WeakSet();\nvar _onEditorBlur = /*#__PURE__*/new WeakSet();\nvar _onEditorFocus = /*#__PURE__*/new WeakSet();\nvar _onEditorMouseDown = /*#__PURE__*/new WeakSet();\nvar _onEditorMouseUp = /*#__PURE__*/new WeakSet();\nvar _onAfterDocumentKeyDown = /*#__PURE__*/new WeakSet();\nvar _onAfterScroll = /*#__PURE__*/new WeakSet();\nexport class Comments extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Observes the changes in the scroll position if triggered it hides the comment editor.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterScroll);\n    /**\n     * Observes the pressed keys and if there is already opened the comment editor prevents open\n     * the table editor into the fast edit mode.\n     *\n     * @param {Event} event The keydown event.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterDocumentKeyDown);\n    /**\n     * `mouseup` hook. Along with `onEditorMouseDown` used to simulate the textarea resizing event.\n     *\n     * @param {MouseEvent} event The `mouseup` event.\n     */\n    _classPrivateMethodInitSpec(this, _onEditorMouseUp);\n    /**\n     * `mousedown` hook. Along with `onEditorMouseUp` used to simulate the textarea resizing event.\n     *\n     * @param {MouseEvent} event The `mousedown` event.\n     */\n    _classPrivateMethodInitSpec(this, _onEditorMouseDown);\n    /**\n     * Hook observer the \"focus\" event from the comments editor element. The hook takes the control of\n     * the keyboard shortcuts by switching the context to plugins one.\n     */\n    _classPrivateMethodInitSpec(this, _onEditorFocus);\n    /**\n     * Hook observer the \"blur\" event from the comments editor element. The hook clears the\n     * editor content and gives back the keyboard shortcuts control by switching to the \"grid\" context.\n     */\n    _classPrivateMethodInitSpec(this, _onEditorBlur);\n    /**\n     * The `afterRenderer` hook callback.\n     *\n     * @param {HTMLTableCellElement} TD The rendered `TD` element.\n     * @param {object} cellProperties The rendered cell's property object.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterRenderer);\n    /**\n     * `mouseup` event callback.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseUp);\n    /**\n     * `mouseover` event callback.\n     *\n     * @param {MouseEvent} event The `mouseover` event.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseOver);\n    /**\n     * `mousedown` event callback.\n     *\n     * @param {MouseEvent} event The `mousedown` event.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseDown);\n    /**\n     * Current cell range, an object with `from` property, with `row` and `col` properties (e.q. `{from: {row: 1, col: 6}}`).\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"range\", {});\n    /**\n     * Instance of {@link CommentEditor}.\n     *\n     * @private\n     * @type {CommentEditor}\n     */\n    _classPrivateFieldInitSpec(this, _editor, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Instance of {@link DisplaySwitch}.\n     *\n     * @private\n     * @type {DisplaySwitch}\n     */\n    _classPrivateFieldInitSpec(this, _displaySwitch, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Prevents showing/hiding editor that reacts on the logic triggered by the \"mouseover\" events.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _preventEditorAutoSwitch, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Prevents hiding editor when the table viewport is scrolled and that scroll is triggered by the\n     * keyboard shortcut that insert or edits the comment.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _preventEditorHiding, {\n      writable: true,\n      value: false\n    });\n    /**\n     * The property for holding editor dimensions for further processing.\n     *\n     * @private\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _tempEditorDimensions, {\n      writable: true,\n      value: {}\n    });\n    /**\n     * The flag that allows processing mousedown event correctly when comments editor is triggered.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _cellBelowCursor, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Holds the comment value before it's actually saved to the cell meta.\n     *\n     * @private\n     * @type {string}\n     */\n    _classPrivateFieldInitSpec(this, _commentValueBeforeSave, {\n      writable: true,\n      value: ''\n    });\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link Comments#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    if (!_classPrivateFieldGet(this, _editor)) {\n      _classPrivateFieldSet(this, _editor, new CommentEditor(this.hot.rootDocument, this.hot.isRtl()));\n    }\n    if (!_classPrivateFieldGet(this, _displaySwitch)) {\n      _classPrivateFieldSet(this, _displaySwitch, new DisplaySwitch(this.getDisplayDelaySetting()));\n    }\n    this.addHook('afterContextMenuDefaultOptions', options => this.addToContextMenu(options));\n    this.addHook('afterRenderer', (TD, row, col, prop, value, cellProperties) => _classPrivateMethodGet(this, _onAfterRenderer, _onAfterRenderer2).call(this, TD, cellProperties));\n    this.addHook('afterScroll', () => _classPrivateMethodGet(this, _onAfterScroll, _onAfterScroll2).call(this));\n    this.addHook('afterBeginEditing', () => this.hide());\n    this.addHook('afterDocumentKeyDown', event => _classPrivateMethodGet(this, _onAfterDocumentKeyDown, _onAfterDocumentKeyDown2).call(this, event));\n    _classPrivateFieldGet(this, _displaySwitch).addLocalHook('hide', () => this.hide());\n    _classPrivateFieldGet(this, _displaySwitch).addLocalHook('show', (row, col) => this.showAtCell(row, col));\n    this.registerShortcuts();\n    this.registerListeners();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *   - [`comments`](@/api/options.md#comments)\n   */\n  updatePlugin() {\n    _classPrivateFieldGet(this, _displaySwitch).updateDelay(this.getDisplayDelaySetting());\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.unregisterShortcuts();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling context menu.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    const manager = this.hot.getShortcutManager();\n    const gridContext = manager.getContext('grid');\n    const pluginContext = manager.addContext(SHORTCUTS_CONTEXT_NAME);\n    gridContext.addShortcut({\n      keys: [['Control', 'Alt', 'M']],\n      callback: () => {\n        const range = this.hot.getSelectedRangeLast();\n        _classPrivateFieldSet(this, _preventEditorHiding, true);\n        this.hot.scrollToFocusedCell(() => {\n          this.setRange(range);\n          this.show();\n          this.focusEditor();\n          manager.setActiveContextName(SHORTCUTS_CONTEXT_NAME);\n          this.hot._registerTimeout(() => {\n            _classPrivateFieldSet(this, _preventEditorHiding, false);\n          });\n        });\n      },\n      stopPropagation: true,\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        return ((_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight.isCell()) && !_classPrivateFieldGet(this, _editor).isVisible();\n      },\n      group: SHORTCUTS_GROUP\n    });\n    pluginContext.addShortcut({\n      keys: [['Escape']],\n      callback: () => {\n        _classPrivateFieldGet(this, _editor).setValue(_classPrivateFieldGet(this, _commentValueBeforeSave));\n        this.hide();\n        manager.setActiveContextName('grid');\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected2;\n        return ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.highlight.isCell()) && _classPrivateFieldGet(this, _editor).isVisible();\n      },\n      group: SHORTCUTS_GROUP\n    });\n    pluginContext.addShortcut({\n      keys: [['Control/Meta', 'Enter']],\n      callback: () => {\n        this.hide();\n        manager.setActiveContextName('grid');\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected3;\n        return ((_this$hot$getSelected3 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected3 === void 0 ? void 0 : _this$hot$getSelected3.highlight.isCell()) && _classPrivateFieldGet(this, _editor).isVisible();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling context menu.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Registers all necessary DOM listeners.\n   *\n   * @private\n   */\n  registerListeners() {\n    const {\n      rootDocument\n    } = this.hot;\n    const editorElement = this.getEditorInputElement();\n    this.eventManager.addEventListener(rootDocument, 'mouseover', event => _classPrivateMethodGet(this, _onMouseOver, _onMouseOver2).call(this, event));\n    this.eventManager.addEventListener(rootDocument, 'mousedown', event => _classPrivateMethodGet(this, _onMouseDown, _onMouseDown2).call(this, event));\n    this.eventManager.addEventListener(rootDocument, 'mouseup', () => _classPrivateMethodGet(this, _onMouseUp, _onMouseUp2).call(this));\n    this.eventManager.addEventListener(editorElement, 'focus', () => _classPrivateMethodGet(this, _onEditorFocus, _onEditorFocus2).call(this));\n    this.eventManager.addEventListener(editorElement, 'blur', () => _classPrivateMethodGet(this, _onEditorBlur, _onEditorBlur2).call(this));\n    this.eventManager.addEventListener(editorElement, 'mousedown', event => _classPrivateMethodGet(this, _onEditorMouseDown, _onEditorMouseDown2).call(this, event));\n    this.eventManager.addEventListener(editorElement, 'mouseup', event => _classPrivateMethodGet(this, _onEditorMouseUp, _onEditorMouseUp2).call(this, event));\n  }\n\n  /**\n   * Sets the current cell range to be able to use general methods like {@link Comments#setComment}, {@link Comments#removeComment}, {@link Comments#show}.\n   *\n   * @param {object} range Object with `from` property, each with `row` and `col` properties.\n   */\n  setRange(range) {\n    this.range = range;\n  }\n\n  /**\n   * Clears the currently selected cell.\n   */\n  clearRange() {\n    this.range = {};\n  }\n\n  /**\n   * Checks if the event target is a cell containing a comment.\n   *\n   * @private\n   * @param {Event} event DOM event.\n   * @returns {boolean}\n   */\n  targetIsCellWithComment(event) {\n    const closestCell = closest(event.target, 'TD', 'TBODY');\n    return !!(closestCell && hasClass(closestCell, 'htCommentCell') && closest(closestCell, [this.hot.rootElement]));\n  }\n\n  /**\n   * Checks if the event target is a comment textarea.\n   *\n   * @private\n   * @param {Event} event DOM event.\n   * @returns {boolean}\n   */\n  targetIsCommentTextArea(event) {\n    return this.getEditorInputElement() === event.target;\n  }\n\n  /**\n   * Sets a comment for a cell according to the previously set range (see {@link Comments#setRange}).\n   *\n   * @param {string} value Comment contents.\n   */\n  setComment(value) {\n    if (!this.range.from) {\n      throw new Error('Before using this method, first set cell range (hot.getPlugin(\"comment\").setRange())');\n    }\n    const editorValue = _classPrivateFieldGet(this, _editor).getValue();\n    let comment = '';\n    if (value !== null && value !== undefined) {\n      comment = value;\n    } else if (editorValue !== null && editorValue !== undefined) {\n      comment = editorValue;\n    }\n    const row = this.range.from.row;\n    const col = this.range.from.col;\n    this.updateCommentMeta(row, col, {\n      [META_COMMENT_VALUE]: comment\n    });\n    this.hot.render();\n  }\n\n  /**\n   * Sets a comment for a specified cell.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} value Comment contents.\n   */\n  setCommentAtCell(row, column, value) {\n    this.setRange({\n      from: this.hot._createCellCoords(row, column)\n    });\n    this.setComment(value);\n  }\n\n  /**\n   * Removes a comment from a cell according to previously set range (see {@link Comments#setRange}).\n   *\n   * @param {boolean} [forceRender=true] If set to `true`, the table will be re-rendered at the end of the operation.\n   */\n  removeComment() {\n    let forceRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (!this.range.from) {\n      throw new Error('Before using this method, first set cell range (hot.getPlugin(\"comment\").setRange())');\n    }\n    this.hot.setCellMeta(this.range.from.row, this.range.from.col, META_COMMENT);\n    if (forceRender) {\n      this.hot.render();\n    }\n    this.hide();\n  }\n\n  /**\n   * Removes a comment from a specified cell.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {boolean} [forceRender=true] If `true`, the table will be re-rendered at the end of the operation.\n   */\n  removeCommentAtCell(row, column) {\n    let forceRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this.setRange({\n      from: this.hot._createCellCoords(row, column)\n    });\n    this.removeComment(forceRender);\n  }\n\n  /**\n   * Gets comment from a cell according to previously set range (see {@link Comments#setRange}).\n   *\n   * @returns {string|undefined} Returns a content of the comment.\n   */\n  getComment() {\n    const row = this.range.from.row;\n    const column = this.range.from.col;\n    return this.getCommentMeta(row, column, META_COMMENT_VALUE);\n  }\n\n  /**\n   * Gets comment from a cell at the provided coordinates.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {string|undefined} Returns a content of the comment.\n   */\n  getCommentAtCell(row, column) {\n    return this.getCommentMeta(row, column, META_COMMENT_VALUE);\n  }\n\n  /**\n   * Shows the comment editor accordingly to the previously set range (see {@link Comments#setRange}).\n   *\n   * @returns {boolean} Returns `true` if comment editor was shown.\n   */\n  show() {\n    var _ref;\n    if (!this.range.from) {\n      throw new Error('Before using this method, first set cell range (hot.getPlugin(\"comment\").setRange())');\n    }\n    const {\n      from: {\n        row,\n        col\n      }\n    } = this.range;\n    if (row < 0 || row > this.hot.countSourceRows() - 1 || col < 0 || col > this.hot.countSourceCols() - 1) {\n      return false;\n    }\n    const meta = this.hot.getCellMeta(this.range.from.row, this.range.from.col);\n    _classPrivateFieldGet(this, _displaySwitch).cancelHiding();\n    _classPrivateFieldGet(this, _editor).setValue((_ref = meta[META_COMMENT] ? meta[META_COMMENT][META_COMMENT_VALUE] : null) !== null && _ref !== void 0 ? _ref : '');\n    _classPrivateFieldGet(this, _editor).show();\n    this.refreshEditor(true);\n    return true;\n  }\n\n  /**\n   * Shows comment editor according to cell coordinates.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {boolean} Returns `true` if comment editor was shown.\n   */\n  showAtCell(row, column) {\n    this.setRange({\n      from: this.hot._createCellCoords(row, column)\n    });\n    return this.show();\n  }\n\n  /**\n   * Hides the comment editor.\n   */\n  hide() {\n    _classPrivateFieldGet(this, _editor).hide();\n  }\n\n  /**\n   * Refreshes comment editor position and styling.\n   *\n   * @param {boolean} [force=false] If `true` then recalculation will be forced.\n   */\n  refreshEditor() {\n    var _renderableRow, _renderableColumn;\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!force && (!this.range.from || !_classPrivateFieldGet(this, _editor).isVisible())) {\n      return;\n    }\n    const {\n      rowIndexMapper,\n      columnIndexMapper\n    } = this.hot;\n    const {\n      row: visualRow,\n      col: visualColumn\n    } = this.range.from;\n    let renderableRow = rowIndexMapper.getRenderableFromVisualIndex(visualRow);\n    let renderableColumn = columnIndexMapper.getRenderableFromVisualIndex(visualColumn);\n    // Used when the requested row is hidden, and the editor needs to be positioned on the previous row's coords.\n    const targetingPreviousRow = renderableRow === null;\n\n    // Reset the editor position to (0, 0) so the opening direction calculation wouldn't be influenced by its\n    // previous position\n    _classPrivateFieldGet(this, _editor).setPosition(0, 0);\n    if (renderableRow === null) {\n      renderableRow = rowIndexMapper.getRenderableFromVisualIndex(rowIndexMapper.getNearestNotHiddenIndex(visualRow, -1));\n    }\n    if (renderableColumn === null) {\n      renderableColumn = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getNearestNotHiddenIndex(visualColumn, -1));\n    }\n    const isBeforeRenderedRows = renderableRow === null;\n    const isBeforeRenderedColumns = renderableColumn === null;\n    renderableRow = (_renderableRow = renderableRow) !== null && _renderableRow !== void 0 ? _renderableRow : 0;\n    renderableColumn = (_renderableColumn = renderableColumn) !== null && _renderableColumn !== void 0 ? _renderableColumn : 0;\n    const {\n      rootWindow,\n      view: {\n        _wt: wt\n      }\n    } = this.hot;\n    const {\n      wtTable\n    } = wt;\n    // TODO: Probably using `hot.getCell` would be the best. However, case for showing comment editor for hidden cell\n    // potentially should be removed with that change (currently a test for it is passing).\n    const TD = wt.getCell({\n      row: renderableRow,\n      col: renderableColumn\n    }, true);\n    const commentStyle = this.getCommentMeta(visualRow, visualColumn, META_STYLE);\n    if (commentStyle) {\n      _classPrivateFieldGet(this, _editor).setSize(commentStyle.width, commentStyle.height);\n    } else {\n      _classPrivateFieldGet(this, _editor).resetSize();\n    }\n    const lastColWidth = isBeforeRenderedColumns ? 0 : wtTable.getStretchedColumnWidth(renderableColumn);\n    const lastRowHeight = targetingPreviousRow && !isBeforeRenderedRows ? outerHeight(TD) : 0;\n    const {\n      left,\n      top,\n      width: cellWidth,\n      height: cellHeight\n    } = TD.getBoundingClientRect();\n    const {\n      width: editorWidth,\n      height: editorHeight\n    } = _classPrivateFieldGet(this, _editor).getSize();\n    const {\n      innerWidth,\n      innerHeight\n    } = this.hot.rootWindow;\n    const documentElement = this.hot.rootDocument.documentElement;\n    let x = left + rootWindow.scrollX + lastColWidth;\n    let y = top + rootWindow.scrollY + lastRowHeight;\n    if (this.hot.isRtl()) {\n      x -= editorWidth + lastColWidth;\n    }\n\n    // flip to the right or left the comments editor position when it goes out of browser viewport\n    if (this.hot.isLtr() && left + cellWidth + editorWidth > innerWidth) {\n      x = left + rootWindow.scrollX - editorWidth - 1;\n    } else if (this.hot.isRtl() && x < -(documentElement.scrollWidth - documentElement.clientWidth)) {\n      x = left + rootWindow.scrollX + lastColWidth + 1;\n    }\n    if (top + editorHeight > innerHeight) {\n      y -= editorHeight - cellHeight + 1;\n    }\n    _classPrivateFieldGet(this, _editor).setPosition(x, y);\n    _classPrivateFieldGet(this, _editor).setReadOnlyState(this.getCommentMeta(visualRow, visualColumn, META_READONLY));\n  }\n\n  /**\n   * Focuses the comments editor element.\n   */\n  focusEditor() {\n    _classPrivateFieldGet(this, _editor).focus();\n  }\n\n  /**\n   * Sets or update the comment-related cell meta.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {object} metaObject Object defining all the comment-related meta information.\n   */\n  updateCommentMeta(row, column, metaObject) {\n    const oldComment = this.hot.getCellMeta(row, column)[META_COMMENT];\n    let newComment;\n    if (oldComment) {\n      newComment = deepClone(oldComment);\n      deepExtend(newComment, metaObject);\n    } else {\n      newComment = metaObject;\n    }\n    this.hot.setCellMeta(row, column, META_COMMENT, newComment);\n  }\n\n  /**\n   * Gets the comment related meta information.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} property Cell meta property.\n   * @returns {Mixed}\n   */\n  getCommentMeta(row, column, property) {\n    const cellMeta = this.hot.getCellMeta(row, column);\n    if (!cellMeta[META_COMMENT]) {\n      return undefined;\n    }\n    return cellMeta[META_COMMENT][property];\n  }\n  /**\n   * Add Comments plugin options to the Context Menu.\n   *\n   * @private\n   * @param {object} options The menu options.\n   */\n  addToContextMenu(options) {\n    options.items.push({\n      name: SEPARATOR\n    }, addEditCommentItem(this), removeCommentItem(this), readOnlyCommentItem(this));\n  }\n\n  /**\n   * Get `displayDelay` setting of comment plugin.\n   *\n   * @private\n   * @returns {number|undefined}\n   */\n  getDisplayDelaySetting() {\n    const commentSetting = this.hot.getSettings()[PLUGIN_KEY];\n    if (isObject(commentSetting)) {\n      return commentSetting.displayDelay;\n    }\n  }\n\n  /**\n   * Gets the editors input element.\n   *\n   * @private\n   * @returns {HTMLTextAreaElement}\n   */\n  getEditorInputElement() {\n    return _classPrivateFieldGet(this, _editor).getInputElement();\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    if (_classPrivateFieldGet(this, _editor)) {\n      _classPrivateFieldGet(this, _editor).destroy();\n    }\n    if (_classPrivateFieldGet(this, _displaySwitch)) {\n      _classPrivateFieldGet(this, _displaySwitch).destroy();\n    }\n    super.destroy();\n  }\n}\nfunction _onMouseDown2(event) {\n  if (!this.hot.view || !this.hot.view._wt) {\n    return;\n  }\n  if (!_classPrivateFieldGet(this, _preventEditorAutoSwitch) && !this.targetIsCommentTextArea(event)) {\n    const eventCell = closest(event.target, 'TD', 'TBODY');\n    let coordinates = null;\n    if (eventCell) {\n      coordinates = this.hot.getCoords(eventCell);\n    }\n    if (!eventCell || this.range.from && coordinates && (this.range.from.row !== coordinates.row || this.range.from.col !== coordinates.col)) {\n      this.hide();\n    }\n  }\n}\nfunction _onMouseOver2(event) {\n  const {\n    rootDocument\n  } = this.hot;\n  if (_classPrivateFieldGet(this, _preventEditorAutoSwitch) || _classPrivateFieldGet(this, _editor).isFocused() || hasClass(event.target, 'wtBorder') || _classPrivateFieldGet(this, _cellBelowCursor) === event.target || !_classPrivateFieldGet(this, _editor)) {\n    return;\n  }\n  _classPrivateFieldSet(this, _cellBelowCursor, rootDocument.elementFromPoint(event.clientX, event.clientY));\n  if (this.targetIsCellWithComment(event)) {\n    const range = this.hot._createCellRange(this.hot.getCoords(event.target));\n    _classPrivateFieldGet(this, _displaySwitch).show(range);\n  } else if (isChildOf(event.target, rootDocument) && !this.targetIsCommentTextArea(event)) {\n    _classPrivateFieldGet(this, _displaySwitch).hide();\n  }\n}\nfunction _onMouseUp2() {\n  _classPrivateFieldSet(this, _preventEditorAutoSwitch, false);\n}\nfunction _onAfterRenderer2(TD, cellProperties) {\n  if (cellProperties[META_COMMENT] && cellProperties[META_COMMENT][META_COMMENT_VALUE]) {\n    addClass(TD, cellProperties.commentedCellClassName);\n  }\n}\nfunction _onEditorBlur2() {\n  _classPrivateFieldSet(this, _commentValueBeforeSave, '');\n  this.hot.getShortcutManager().setActiveContextName('grid');\n  this.setComment();\n}\nfunction _onEditorFocus2() {\n  _classPrivateFieldSet(this, _commentValueBeforeSave, this.getComment());\n  this.hot.listen();\n  this.hot.getShortcutManager().setActiveContextName(SHORTCUTS_CONTEXT_NAME);\n}\nfunction _onEditorMouseDown2(event) {\n  _classPrivateFieldSet(this, _tempEditorDimensions, {\n    width: outerWidth(event.target),\n    height: outerHeight(event.target)\n  });\n}\nfunction _onEditorMouseUp2(event) {\n  const currentWidth = outerWidth(event.target);\n  const currentHeight = outerHeight(event.target);\n  if (currentWidth !== _classPrivateFieldGet(this, _tempEditorDimensions).width + 1 || currentHeight !== _classPrivateFieldGet(this, _tempEditorDimensions).height + 2) {\n    this.updateCommentMeta(this.range.from.row, this.range.from.col, {\n      [META_STYLE]: {\n        width: currentWidth,\n        height: currentHeight\n      }\n    });\n  }\n}\nfunction _onAfterDocumentKeyDown2(event) {\n  if (_classPrivateFieldGet(this, _editor).isVisible()) {\n    stopImmediatePropagation(event);\n  }\n}\nfunction _onAfterScroll2() {\n  if (!_classPrivateFieldGet(this, _preventEditorHiding)) {\n    this.hide();\n  }\n}"],"mappings":"AAAA,OAAO,mCAAmC;AAC1C,OAAO,kCAAkC;AACzC,SAASA,2BAA2B,CAACC,GAAG,EAAEC,UAAU,EAAE;EAAEC,0BAA0B,CAACF,GAAG,EAAEC,UAAU,CAAC;EAAEA,UAAU,CAACE,GAAG,CAACH,GAAG,CAAC;AAAE;AAC1H,SAASI,0BAA0B,CAACJ,GAAG,EAAEK,UAAU,EAAEC,KAAK,EAAE;EAAEJ,0BAA0B,CAACF,GAAG,EAAEK,UAAU,CAAC;EAAEA,UAAU,CAACE,GAAG,CAACP,GAAG,EAAEM,KAAK,CAAC;AAAE;AACvI,SAASJ,0BAA0B,CAACF,GAAG,EAAEQ,iBAAiB,EAAE;EAAE,IAAIA,iBAAiB,CAACC,GAAG,CAACT,GAAG,CAAC,EAAE;IAAE,MAAM,IAAIU,SAAS,CAAC,gEAAgE,CAAC;EAAE;AAAE;AACzL,SAASC,eAAe,CAACX,GAAG,EAAEY,GAAG,EAAEN,KAAK,EAAE;EAAEM,GAAG,GAAGC,cAAc,CAACD,GAAG,CAAC;EAAE,IAAIA,GAAG,IAAIZ,GAAG,EAAE;IAAEc,MAAM,CAACC,cAAc,CAACf,GAAG,EAAEY,GAAG,EAAE;MAAEN,KAAK,EAAEA,KAAK;MAAEU,UAAU,EAAE,IAAI;MAAEC,YAAY,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAC;EAAE,CAAC,MAAM;IAAElB,GAAG,CAACY,GAAG,CAAC,GAAGN,KAAK;EAAE;EAAE,OAAON,GAAG;AAAE;AAC3O,SAASa,cAAc,CAACM,CAAC,EAAE;EAAE,IAAIC,CAAC,GAAGC,YAAY,CAACF,CAAC,EAAE,QAAQ,CAAC;EAAE,OAAO,QAAQ,IAAI,OAAOC,CAAC,GAAGA,CAAC,GAAGE,MAAM,CAACF,CAAC,CAAC;AAAE;AAC7G,SAASC,YAAY,CAACF,CAAC,EAAEI,CAAC,EAAE;EAAE,IAAI,QAAQ,IAAI,OAAOJ,CAAC,IAAI,CAACA,CAAC,EAAE,OAAOA,CAAC;EAAE,IAAIK,CAAC,GAAGL,CAAC,CAACM,MAAM,CAACC,WAAW,CAAC;EAAE,IAAI,KAAK,CAAC,KAAKF,CAAC,EAAE;IAAE,IAAIJ,CAAC,GAAGI,CAAC,CAACG,IAAI,CAACR,CAAC,EAAEI,CAAC,IAAI,SAAS,CAAC;IAAE,IAAI,QAAQ,IAAI,OAAOH,CAAC,EAAE,OAAOA,CAAC;IAAE,MAAM,IAAIV,SAAS,CAAC,8CAA8C,CAAC;EAAE;EAAE,OAAO,CAAC,QAAQ,KAAKa,CAAC,GAAGD,MAAM,GAAGM,MAAM,EAAET,CAAC,CAAC;AAAE;AACvT,SAASU,sBAAsB,CAACC,QAAQ,EAAE7B,UAAU,EAAE8B,EAAE,EAAE;EAAE,IAAI,CAAC9B,UAAU,CAACQ,GAAG,CAACqB,QAAQ,CAAC,EAAE;IAAE,MAAM,IAAIpB,SAAS,CAAC,gDAAgD,CAAC;EAAE;EAAE,OAAOqB,EAAE;AAAE;AACjL,SAASC,qBAAqB,CAACF,QAAQ,EAAEzB,UAAU,EAAEC,KAAK,EAAE;EAAE,IAAI2B,UAAU,GAAGC,4BAA4B,CAACJ,QAAQ,EAAEzB,UAAU,EAAE,KAAK,CAAC;EAAE8B,wBAAwB,CAACL,QAAQ,EAAEG,UAAU,EAAE3B,KAAK,CAAC;EAAE,OAAOA,KAAK;AAAE;AAC/M,SAAS6B,wBAAwB,CAACL,QAAQ,EAAEG,UAAU,EAAE3B,KAAK,EAAE;EAAE,IAAI2B,UAAU,CAAC1B,GAAG,EAAE;IAAE0B,UAAU,CAAC1B,GAAG,CAACoB,IAAI,CAACG,QAAQ,EAAExB,KAAK,CAAC;EAAE,CAAC,MAAM;IAAE,IAAI,CAAC2B,UAAU,CAACf,QAAQ,EAAE;MAAE,MAAM,IAAIR,SAAS,CAAC,0CAA0C,CAAC;IAAE;IAAEuB,UAAU,CAAC3B,KAAK,GAAGA,KAAK;EAAE;AAAE;AACjQ,SAAS8B,qBAAqB,CAACN,QAAQ,EAAEzB,UAAU,EAAE;EAAE,IAAI4B,UAAU,GAAGC,4BAA4B,CAACJ,QAAQ,EAAEzB,UAAU,EAAE,KAAK,CAAC;EAAE,OAAOgC,wBAAwB,CAACP,QAAQ,EAAEG,UAAU,CAAC;AAAE;AAC1L,SAASC,4BAA4B,CAACJ,QAAQ,EAAEzB,UAAU,EAAEiC,MAAM,EAAE;EAAE,IAAI,CAACjC,UAAU,CAACI,GAAG,CAACqB,QAAQ,CAAC,EAAE;IAAE,MAAM,IAAIpB,SAAS,CAAC,eAAe,GAAG4B,MAAM,GAAG,gCAAgC,CAAC;EAAE;EAAE,OAAOjC,UAAU,CAACkC,GAAG,CAACT,QAAQ,CAAC;AAAE;AAC5N,SAASO,wBAAwB,CAACP,QAAQ,EAAEG,UAAU,EAAE;EAAE,IAAIA,UAAU,CAACM,GAAG,EAAE;IAAE,OAAON,UAAU,CAACM,GAAG,CAACZ,IAAI,CAACG,QAAQ,CAAC;EAAE;EAAE,OAAOG,UAAU,CAAC3B,KAAK;AAAE;AACjJ,SAASkC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,QAAQ,+BAA+B;AAC/G,SAASC,wBAAwB,QAAQ,6BAA6B;AACtE,SAASC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,0BAA0B;AAC1E,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,SAASC,SAAS,QAAQ,0CAA0C;AACpE,OAAOC,kBAAkB,MAAM,sCAAsC;AACrE,OAAOC,iBAAiB,MAAM,qCAAqC;AACnE,OAAOC,mBAAmB,MAAM,uCAAuC;AACvE,OAAO,MAAMC,UAAU,GAAG,UAAU;AACpC,OAAO,MAAMC,eAAe,GAAG,EAAE;AACjC,OAAO,MAAMC,YAAY,GAAG,SAAS;AACrC,OAAO,MAAMC,kBAAkB,GAAG,OAAO;AACzC,OAAO,MAAMC,UAAU,GAAG,OAAO;AACjC,OAAO,MAAMC,aAAa,GAAG,UAAU;AACvC,MAAMC,eAAe,GAAGN,UAAU;AAClC,MAAMO,sBAAsB,GAAI,UAASP,UAAW,EAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIQ,OAAO,GAAG,aAAa,IAAIC,OAAO,EAAE;AACxC,IAAIC,cAAc,GAAG,aAAa,IAAID,OAAO,EAAE;AAC/C,IAAIE,wBAAwB,GAAG,aAAa,IAAIF,OAAO,EAAE;AACzD,IAAIG,oBAAoB,GAAG,aAAa,IAAIH,OAAO,EAAE;AACrD,IAAII,qBAAqB,GAAG,aAAa,IAAIJ,OAAO,EAAE;AACtD,IAAIK,gBAAgB,GAAG,aAAa,IAAIL,OAAO,EAAE;AACjD,IAAIM,uBAAuB,GAAG,aAAa,IAAIN,OAAO,EAAE;AACxD,IAAIO,YAAY,GAAG,aAAa,IAAIC,OAAO,EAAE;AAC7C,IAAIC,YAAY,GAAG,aAAa,IAAID,OAAO,EAAE;AAC7C,IAAIE,UAAU,GAAG,aAAa,IAAIF,OAAO,EAAE;AAC3C,IAAIG,gBAAgB,GAAG,aAAa,IAAIH,OAAO,EAAE;AACjD,IAAII,aAAa,GAAG,aAAa,IAAIJ,OAAO,EAAE;AAC9C,IAAIK,cAAc,GAAG,aAAa,IAAIL,OAAO,EAAE;AAC/C,IAAIM,kBAAkB,GAAG,aAAa,IAAIN,OAAO,EAAE;AACnD,IAAIO,gBAAgB,GAAG,aAAa,IAAIP,OAAO,EAAE;AACjD,IAAIQ,uBAAuB,GAAG,aAAa,IAAIR,OAAO,EAAE;AACxD,IAAIS,cAAc,GAAG,aAAa,IAAIT,OAAO,EAAE;AAC/C,OAAO,MAAMU,QAAQ,SAASlC,UAAU,CAAC;EACvCmC,WAAW,GAAG;IACZ,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB;AACJ;AACA;IACIvF,2BAA2B,CAAC,IAAI,EAAEoF,cAAc,CAAC;IACjD;AACJ;AACA;AACA;AACA;AACA;IACIpF,2BAA2B,CAAC,IAAI,EAAEmF,uBAAuB,CAAC;IAC1D;AACJ;AACA;AACA;AACA;IACInF,2BAA2B,CAAC,IAAI,EAAEkF,gBAAgB,CAAC;IACnD;AACJ;AACA;AACA;AACA;IACIlF,2BAA2B,CAAC,IAAI,EAAEiF,kBAAkB,CAAC;IACrD;AACJ;AACA;AACA;IACIjF,2BAA2B,CAAC,IAAI,EAAEgF,cAAc,CAAC;IACjD;AACJ;AACA;AACA;IACIhF,2BAA2B,CAAC,IAAI,EAAE+E,aAAa,CAAC;IAChD;AACJ;AACA;AACA;AACA;AACA;IACI/E,2BAA2B,CAAC,IAAI,EAAE8E,gBAAgB,CAAC;IACnD;AACJ;AACA;IACI9E,2BAA2B,CAAC,IAAI,EAAE6E,UAAU,CAAC;IAC7C;AACJ;AACA;AACA;AACA;IACI7E,2BAA2B,CAAC,IAAI,EAAE4E,YAAY,CAAC;IAC/C;AACJ;AACA;AACA;AACA;IACI5E,2BAA2B,CAAC,IAAI,EAAE0E,YAAY,CAAC;IAC/C;AACJ;AACA;AACA;AACA;IACI9D,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;IAClC;AACJ;AACA;AACA;AACA;AACA;IACIP,0BAA0B,CAAC,IAAI,EAAE6D,OAAO,EAAE;MACxC/C,QAAQ,EAAE,IAAI;MACdZ,KAAK,EAAE;IACT,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;IACIF,0BAA0B,CAAC,IAAI,EAAE+D,cAAc,EAAE;MAC/CjD,QAAQ,EAAE,IAAI;MACdZ,KAAK,EAAE;IACT,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;IACIF,0BAA0B,CAAC,IAAI,EAAEgE,wBAAwB,EAAE;MACzDlD,QAAQ,EAAE,IAAI;MACdZ,KAAK,EAAE;IACT,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;AACA;IACIF,0BAA0B,CAAC,IAAI,EAAEiE,oBAAoB,EAAE;MACrDnD,QAAQ,EAAE,IAAI;MACdZ,KAAK,EAAE;IACT,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;IACIF,0BAA0B,CAAC,IAAI,EAAEkE,qBAAqB,EAAE;MACtDpD,QAAQ,EAAE,IAAI;MACdZ,KAAK,EAAE,CAAC;IACV,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;IACIF,0BAA0B,CAAC,IAAI,EAAEmE,gBAAgB,EAAE;MACjDrD,QAAQ,EAAE,IAAI;MACdZ,KAAK,EAAE;IACT,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;IACIF,0BAA0B,CAAC,IAAI,EAAEoE,uBAAuB,EAAE;MACxDtD,QAAQ,EAAE,IAAI;MACdZ,KAAK,EAAE;IACT,CAAC,CAAC;EACJ;EACA,WAAWmD,UAAU,GAAG;IACtB,OAAOA,UAAU;EACnB;EACA,WAAWC,eAAe,GAAG;IAC3B,OAAOA,eAAe;EACxB;EACA;AACF;AACA;AACA;AACA;AACA;EACE6B,SAAS,GAAG;IACV,OAAO,CAAC,CAAC,IAAI,CAACC,GAAG,CAACC,WAAW,EAAE,CAAChC,UAAU,CAAC;EAC7C;;EAEA;AACF;AACA;EACEiC,YAAY,GAAG;IACb,IAAI,IAAI,CAACC,OAAO,EAAE;MAChB;IACF;IACA,IAAI,CAACvD,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,EAAE;MACzCjC,qBAAqB,CAAC,IAAI,EAAEiC,OAAO,EAAE,IAAId,aAAa,CAAC,IAAI,CAACqC,GAAG,CAACI,YAAY,EAAE,IAAI,CAACJ,GAAG,CAACK,KAAK,EAAE,CAAC,CAAC;IAClG;IACA,IAAI,CAACzD,qBAAqB,CAAC,IAAI,EAAE+B,cAAc,CAAC,EAAE;MAChDnC,qBAAqB,CAAC,IAAI,EAAEmC,cAAc,EAAE,IAAIf,aAAa,CAAC,IAAI,CAAC0C,sBAAsB,EAAE,CAAC,CAAC;IAC/F;IACA,IAAI,CAACC,OAAO,CAAC,gCAAgC,EAAEC,OAAO,IAAI,IAAI,CAACC,gBAAgB,CAACD,OAAO,CAAC,CAAC;IACzF,IAAI,CAACD,OAAO,CAAC,eAAe,EAAE,CAACG,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE/F,KAAK,EAAEgG,cAAc,KAAKzE,sBAAsB,CAAC,IAAI,EAAEgD,gBAAgB,EAAE0B,iBAAiB,CAAC,CAAC5E,IAAI,CAAC,IAAI,EAAEuE,EAAE,EAAEI,cAAc,CAAC,CAAC;IAC9K,IAAI,CAACP,OAAO,CAAC,aAAa,EAAE,MAAMlE,sBAAsB,CAAC,IAAI,EAAEsD,cAAc,EAAEqB,eAAe,CAAC,CAAC7E,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3G,IAAI,CAACoE,OAAO,CAAC,mBAAmB,EAAE,MAAM,IAAI,CAACU,IAAI,EAAE,CAAC;IACpD,IAAI,CAACV,OAAO,CAAC,sBAAsB,EAAEW,KAAK,IAAI7E,sBAAsB,CAAC,IAAI,EAAEqD,uBAAuB,EAAEyB,wBAAwB,CAAC,CAAChF,IAAI,CAAC,IAAI,EAAE+E,KAAK,CAAC,CAAC;IAChJtE,qBAAqB,CAAC,IAAI,EAAE+B,cAAc,CAAC,CAACyC,YAAY,CAAC,MAAM,EAAE,MAAM,IAAI,CAACH,IAAI,EAAE,CAAC;IACnFrE,qBAAqB,CAAC,IAAI,EAAE+B,cAAc,CAAC,CAACyC,YAAY,CAAC,MAAM,EAAE,CAACT,GAAG,EAAEC,GAAG,KAAK,IAAI,CAACS,UAAU,CAACV,GAAG,EAAEC,GAAG,CAAC,CAAC;IACzG,IAAI,CAACU,iBAAiB,EAAE;IACxB,IAAI,CAACC,iBAAiB,EAAE;IACxB,KAAK,CAACrB,YAAY,EAAE;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEsB,YAAY,GAAG;IACb5E,qBAAqB,CAAC,IAAI,EAAE+B,cAAc,CAAC,CAAC8C,WAAW,CAAC,IAAI,CAACnB,sBAAsB,EAAE,CAAC;IACtF,KAAK,CAACkB,YAAY,EAAE;EACtB;;EAEA;AACF;AACA;EACEE,aAAa,GAAG;IACd,IAAI,CAACC,mBAAmB,EAAE;IAC1B,KAAK,CAACD,aAAa,EAAE;EACvB;;EAEA;AACF;AACA;AACA;AACA;EACEJ,iBAAiB,GAAG;IAClB,MAAMM,OAAO,GAAG,IAAI,CAAC5B,GAAG,CAAC6B,kBAAkB,EAAE;IAC7C,MAAMC,WAAW,GAAGF,OAAO,CAACG,UAAU,CAAC,MAAM,CAAC;IAC9C,MAAMC,aAAa,GAAGJ,OAAO,CAACK,UAAU,CAACzD,sBAAsB,CAAC;IAChEsD,WAAW,CAACI,WAAW,CAAC;MACtBC,IAAI,EAAE,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;MAC/BC,QAAQ,EAAE,MAAM;QACd,MAAMC,KAAK,GAAG,IAAI,CAACrC,GAAG,CAACsC,oBAAoB,EAAE;QAC7C9F,qBAAqB,CAAC,IAAI,EAAEqC,oBAAoB,EAAE,IAAI,CAAC;QACvD,IAAI,CAACmB,GAAG,CAACuC,mBAAmB,CAAC,MAAM;UACjC,IAAI,CAACC,QAAQ,CAACH,KAAK,CAAC;UACpB,IAAI,CAACI,IAAI,EAAE;UACX,IAAI,CAACC,WAAW,EAAE;UAClBd,OAAO,CAACe,oBAAoB,CAACnE,sBAAsB,CAAC;UACpD,IAAI,CAACwB,GAAG,CAAC4C,gBAAgB,CAAC,MAAM;YAC9BpG,qBAAqB,CAAC,IAAI,EAAEqC,oBAAoB,EAAE,KAAK,CAAC;UAC1D,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC;MACDgE,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAE,MAAM;QACf,IAAIC,qBAAqB;QACzB,OAAO,CAAC,CAACA,qBAAqB,GAAG,IAAI,CAAC/C,GAAG,CAACsC,oBAAoB,EAAE,MAAM,IAAI,IAAIS,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACC,SAAS,CAACC,MAAM,EAAE,KAAK,CAACrG,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACyE,SAAS,EAAE;MAC1N,CAAC;MACDC,KAAK,EAAE5E;IACT,CAAC,CAAC;IACFyD,aAAa,CAACE,WAAW,CAAC;MACxBC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;MAClBC,QAAQ,EAAE,MAAM;QACdxF,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAAC2E,QAAQ,CAACxG,qBAAqB,CAAC,IAAI,EAAEoC,uBAAuB,CAAC,CAAC;QACnG,IAAI,CAACiC,IAAI,EAAE;QACXW,OAAO,CAACe,oBAAoB,CAAC,MAAM,CAAC;MACtC,CAAC;MACDG,SAAS,EAAE,MAAM;QACf,IAAIO,sBAAsB;QAC1B,OAAO,CAAC,CAACA,sBAAsB,GAAG,IAAI,CAACrD,GAAG,CAACsC,oBAAoB,EAAE,MAAM,IAAI,IAAIe,sBAAsB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACL,SAAS,CAACC,MAAM,EAAE,KAAKrG,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACyE,SAAS,EAAE;MAC5N,CAAC;MACDC,KAAK,EAAE5E;IACT,CAAC,CAAC;IACFyD,aAAa,CAACE,WAAW,CAAC;MACxBC,IAAI,EAAE,CAAC,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;MACjCC,QAAQ,EAAE,MAAM;QACd,IAAI,CAACnB,IAAI,EAAE;QACXW,OAAO,CAACe,oBAAoB,CAAC,MAAM,CAAC;MACtC,CAAC;MACDG,SAAS,EAAE,MAAM;QACf,IAAIQ,sBAAsB;QAC1B,OAAO,CAAC,CAACA,sBAAsB,GAAG,IAAI,CAACtD,GAAG,CAACsC,oBAAoB,EAAE,MAAM,IAAI,IAAIgB,sBAAsB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACN,SAAS,CAACC,MAAM,EAAE,KAAKrG,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACyE,SAAS,EAAE;MAC5N,CAAC;MACDC,KAAK,EAAE5E;IACT,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEoD,mBAAmB,GAAG;IACpB,IAAI,CAAC3B,GAAG,CAAC6B,kBAAkB,EAAE,CAACE,UAAU,CAAC,MAAM,CAAC,CAACwB,sBAAsB,CAAChF,eAAe,CAAC;EAC1F;;EAEA;AACF;AACA;AACA;AACA;EACEgD,iBAAiB,GAAG;IAClB,MAAM;MACJnB;IACF,CAAC,GAAG,IAAI,CAACJ,GAAG;IACZ,MAAMwD,aAAa,GAAG,IAAI,CAACC,qBAAqB,EAAE;IAClD,IAAI,CAACC,YAAY,CAACC,gBAAgB,CAACvD,YAAY,EAAE,WAAW,EAAEc,KAAK,IAAI7E,sBAAsB,CAAC,IAAI,EAAE8C,YAAY,EAAEyE,aAAa,CAAC,CAACzH,IAAI,CAAC,IAAI,EAAE+E,KAAK,CAAC,CAAC;IACnJ,IAAI,CAACwC,YAAY,CAACC,gBAAgB,CAACvD,YAAY,EAAE,WAAW,EAAEc,KAAK,IAAI7E,sBAAsB,CAAC,IAAI,EAAE4C,YAAY,EAAE4E,aAAa,CAAC,CAAC1H,IAAI,CAAC,IAAI,EAAE+E,KAAK,CAAC,CAAC;IACnJ,IAAI,CAACwC,YAAY,CAACC,gBAAgB,CAACvD,YAAY,EAAE,SAAS,EAAE,MAAM/D,sBAAsB,CAAC,IAAI,EAAE+C,UAAU,EAAE0E,WAAW,CAAC,CAAC3H,IAAI,CAAC,IAAI,CAAC,CAAC;IACnI,IAAI,CAACuH,YAAY,CAACC,gBAAgB,CAACH,aAAa,EAAE,OAAO,EAAE,MAAMnH,sBAAsB,CAAC,IAAI,EAAEkD,cAAc,EAAEwE,eAAe,CAAC,CAAC5H,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1I,IAAI,CAACuH,YAAY,CAACC,gBAAgB,CAACH,aAAa,EAAE,MAAM,EAAE,MAAMnH,sBAAsB,CAAC,IAAI,EAAEiD,aAAa,EAAE0E,cAAc,CAAC,CAAC7H,IAAI,CAAC,IAAI,CAAC,CAAC;IACvI,IAAI,CAACuH,YAAY,CAACC,gBAAgB,CAACH,aAAa,EAAE,WAAW,EAAEtC,KAAK,IAAI7E,sBAAsB,CAAC,IAAI,EAAEmD,kBAAkB,EAAEyE,mBAAmB,CAAC,CAAC9H,IAAI,CAAC,IAAI,EAAE+E,KAAK,CAAC,CAAC;IAChK,IAAI,CAACwC,YAAY,CAACC,gBAAgB,CAACH,aAAa,EAAE,SAAS,EAAEtC,KAAK,IAAI7E,sBAAsB,CAAC,IAAI,EAAEoD,gBAAgB,EAAEyE,iBAAiB,CAAC,CAAC/H,IAAI,CAAC,IAAI,EAAE+E,KAAK,CAAC,CAAC;EAC5J;;EAEA;AACF;AACA;AACA;AACA;EACEsB,QAAQ,CAACH,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;;EAEA;AACF;AACA;EACE8B,UAAU,GAAG;IACX,IAAI,CAAC9B,KAAK,GAAG,CAAC,CAAC;EACjB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE+B,uBAAuB,CAAClD,KAAK,EAAE;IAC7B,MAAMmD,WAAW,GAAGpH,OAAO,CAACiE,KAAK,CAACoD,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC;IACxD,OAAO,CAAC,EAAED,WAAW,IAAIlH,QAAQ,CAACkH,WAAW,EAAE,eAAe,CAAC,IAAIpH,OAAO,CAACoH,WAAW,EAAE,CAAC,IAAI,CAACrE,GAAG,CAACuE,WAAW,CAAC,CAAC,CAAC;EAClH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,uBAAuB,CAACtD,KAAK,EAAE;IAC7B,OAAO,IAAI,CAACuC,qBAAqB,EAAE,KAAKvC,KAAK,CAACoD,MAAM;EACtD;;EAEA;AACF;AACA;AACA;AACA;EACEG,UAAU,CAAC3J,KAAK,EAAE;IAChB,IAAI,CAAC,IAAI,CAACuH,KAAK,CAACqC,IAAI,EAAE;MACpB,MAAM,IAAIC,KAAK,CAAC,sFAAsF,CAAC;IACzG;IACA,MAAMC,WAAW,GAAGhI,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACoG,QAAQ,EAAE;IACnE,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIhK,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKiK,SAAS,EAAE;MACzCD,OAAO,GAAGhK,KAAK;IACjB,CAAC,MAAM,IAAI8J,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAKG,SAAS,EAAE;MAC5DD,OAAO,GAAGF,WAAW;IACvB;IACA,MAAMjE,GAAG,GAAG,IAAI,CAAC0B,KAAK,CAACqC,IAAI,CAAC/D,GAAG;IAC/B,MAAMC,GAAG,GAAG,IAAI,CAACyB,KAAK,CAACqC,IAAI,CAAC9D,GAAG;IAC/B,IAAI,CAACoE,iBAAiB,CAACrE,GAAG,EAAEC,GAAG,EAAE;MAC/B,CAACxC,kBAAkB,GAAG0G;IACxB,CAAC,CAAC;IACF,IAAI,CAAC9E,GAAG,CAACiF,MAAM,EAAE;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,gBAAgB,CAACvE,GAAG,EAAEwE,MAAM,EAAErK,KAAK,EAAE;IACnC,IAAI,CAAC0H,QAAQ,CAAC;MACZkC,IAAI,EAAE,IAAI,CAAC1E,GAAG,CAACoF,iBAAiB,CAACzE,GAAG,EAAEwE,MAAM;IAC9C,CAAC,CAAC;IACF,IAAI,CAACV,UAAU,CAAC3J,KAAK,CAAC;EACxB;;EAEA;AACF;AACA;AACA;AACA;EACEuK,aAAa,GAAG;IACd,IAAIC,WAAW,GAAGxF,SAAS,CAACyF,MAAM,GAAG,CAAC,IAAIzF,SAAS,CAAC,CAAC,CAAC,KAAKiF,SAAS,GAAGjF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IAC1F,IAAI,CAAC,IAAI,CAACuC,KAAK,CAACqC,IAAI,EAAE;MACpB,MAAM,IAAIC,KAAK,CAAC,sFAAsF,CAAC;IACzG;IACA,IAAI,CAAC3E,GAAG,CAACwF,WAAW,CAAC,IAAI,CAACnD,KAAK,CAACqC,IAAI,CAAC/D,GAAG,EAAE,IAAI,CAAC0B,KAAK,CAACqC,IAAI,CAAC9D,GAAG,EAAEzC,YAAY,CAAC;IAC5E,IAAImH,WAAW,EAAE;MACf,IAAI,CAACtF,GAAG,CAACiF,MAAM,EAAE;IACnB;IACA,IAAI,CAAChE,IAAI,EAAE;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEwE,mBAAmB,CAAC9E,GAAG,EAAEwE,MAAM,EAAE;IAC/B,IAAIG,WAAW,GAAGxF,SAAS,CAACyF,MAAM,GAAG,CAAC,IAAIzF,SAAS,CAAC,CAAC,CAAC,KAAKiF,SAAS,GAAGjF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IAC1F,IAAI,CAAC0C,QAAQ,CAAC;MACZkC,IAAI,EAAE,IAAI,CAAC1E,GAAG,CAACoF,iBAAiB,CAACzE,GAAG,EAAEwE,MAAM;IAC9C,CAAC,CAAC;IACF,IAAI,CAACE,aAAa,CAACC,WAAW,CAAC;EACjC;;EAEA;AACF;AACA;AACA;AACA;EACEI,UAAU,GAAG;IACX,MAAM/E,GAAG,GAAG,IAAI,CAAC0B,KAAK,CAACqC,IAAI,CAAC/D,GAAG;IAC/B,MAAMwE,MAAM,GAAG,IAAI,CAAC9C,KAAK,CAACqC,IAAI,CAAC9D,GAAG;IAClC,OAAO,IAAI,CAAC+E,cAAc,CAAChF,GAAG,EAAEwE,MAAM,EAAE/G,kBAAkB,CAAC;EAC7D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEwH,gBAAgB,CAACjF,GAAG,EAAEwE,MAAM,EAAE;IAC5B,OAAO,IAAI,CAACQ,cAAc,CAAChF,GAAG,EAAEwE,MAAM,EAAE/G,kBAAkB,CAAC;EAC7D;;EAEA;AACF;AACA;AACA;AACA;EACEqE,IAAI,GAAG;IACL,IAAIoD,IAAI;IACR,IAAI,CAAC,IAAI,CAACxD,KAAK,CAACqC,IAAI,EAAE;MACpB,MAAM,IAAIC,KAAK,CAAC,sFAAsF,CAAC;IACzG;IACA,MAAM;MACJD,IAAI,EAAE;QACJ/D,GAAG;QACHC;MACF;IACF,CAAC,GAAG,IAAI,CAACyB,KAAK;IACd,IAAI1B,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAG,IAAI,CAACX,GAAG,CAAC8F,eAAe,EAAE,GAAG,CAAC,IAAIlF,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAG,IAAI,CAACZ,GAAG,CAAC+F,eAAe,EAAE,GAAG,CAAC,EAAE;MACtG,OAAO,KAAK;IACd;IACA,MAAMC,IAAI,GAAG,IAAI,CAAChG,GAAG,CAACiG,WAAW,CAAC,IAAI,CAAC5D,KAAK,CAACqC,IAAI,CAAC/D,GAAG,EAAE,IAAI,CAAC0B,KAAK,CAACqC,IAAI,CAAC9D,GAAG,CAAC;IAC3EhE,qBAAqB,CAAC,IAAI,EAAE+B,cAAc,CAAC,CAACuH,YAAY,EAAE;IAC1DtJ,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAAC2E,QAAQ,CAAC,CAACyC,IAAI,GAAGG,IAAI,CAAC7H,YAAY,CAAC,GAAG6H,IAAI,CAAC7H,YAAY,CAAC,CAACC,kBAAkB,CAAC,GAAG,IAAI,MAAM,IAAI,IAAIyH,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAG,EAAE,CAAC;IAClKjJ,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACgE,IAAI,EAAE;IAC3C,IAAI,CAAC0D,aAAa,CAAC,IAAI,CAAC;IACxB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE9E,UAAU,CAACV,GAAG,EAAEwE,MAAM,EAAE;IACtB,IAAI,CAAC3C,QAAQ,CAAC;MACZkC,IAAI,EAAE,IAAI,CAAC1E,GAAG,CAACoF,iBAAiB,CAACzE,GAAG,EAAEwE,MAAM;IAC9C,CAAC,CAAC;IACF,OAAO,IAAI,CAAC1C,IAAI,EAAE;EACpB;;EAEA;AACF;AACA;EACExB,IAAI,GAAG;IACLrE,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACwC,IAAI,EAAE;EAC7C;;EAEA;AACF;AACA;AACA;AACA;EACEkF,aAAa,GAAG;IACd,IAAIC,cAAc,EAAEC,iBAAiB;IACrC,IAAIC,KAAK,GAAGxG,SAAS,CAACyF,MAAM,GAAG,CAAC,IAAIzF,SAAS,CAAC,CAAC,CAAC,KAAKiF,SAAS,GAAGjF,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;IACrF,IAAI,CAACwG,KAAK,KAAK,CAAC,IAAI,CAACjE,KAAK,CAACqC,IAAI,IAAI,CAAC9H,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACyE,SAAS,EAAE,CAAC,EAAE;MACrF;IACF;IACA,MAAM;MACJqD,cAAc;MACdC;IACF,CAAC,GAAG,IAAI,CAACxG,GAAG;IACZ,MAAM;MACJW,GAAG,EAAE8F,SAAS;MACd7F,GAAG,EAAE8F;IACP,CAAC,GAAG,IAAI,CAACrE,KAAK,CAACqC,IAAI;IACnB,IAAIiC,aAAa,GAAGJ,cAAc,CAACK,4BAA4B,CAACH,SAAS,CAAC;IAC1E,IAAII,gBAAgB,GAAGL,iBAAiB,CAACI,4BAA4B,CAACF,YAAY,CAAC;IACnF;IACA,MAAMI,oBAAoB,GAAGH,aAAa,KAAK,IAAI;;IAEnD;IACA;IACA/J,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACsI,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;IACtD,IAAIJ,aAAa,KAAK,IAAI,EAAE;MAC1BA,aAAa,GAAGJ,cAAc,CAACK,4BAA4B,CAACL,cAAc,CAACS,wBAAwB,CAACP,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;IACrH;IACA,IAAII,gBAAgB,KAAK,IAAI,EAAE;MAC7BA,gBAAgB,GAAGL,iBAAiB,CAACI,4BAA4B,CAACJ,iBAAiB,CAACQ,wBAAwB,CAACN,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC;IACjI;IACA,MAAMO,oBAAoB,GAAGN,aAAa,KAAK,IAAI;IACnD,MAAMO,uBAAuB,GAAGL,gBAAgB,KAAK,IAAI;IACzDF,aAAa,GAAG,CAACP,cAAc,GAAGO,aAAa,MAAM,IAAI,IAAIP,cAAc,KAAK,KAAK,CAAC,GAAGA,cAAc,GAAG,CAAC;IAC3GS,gBAAgB,GAAG,CAACR,iBAAiB,GAAGQ,gBAAgB,MAAM,IAAI,IAAIR,iBAAiB,KAAK,KAAK,CAAC,GAAGA,iBAAiB,GAAG,CAAC;IAC1H,MAAM;MACJc,UAAU;MACVC,IAAI,EAAE;QACJC,GAAG,EAAEC;MACP;IACF,CAAC,GAAG,IAAI,CAACtH,GAAG;IACZ,MAAM;MACJuH;IACF,CAAC,GAAGD,EAAE;IACN;IACA;IACA,MAAM5G,EAAE,GAAG4G,EAAE,CAACE,OAAO,CAAC;MACpB7G,GAAG,EAAEgG,aAAa;MAClB/F,GAAG,EAAEiG;IACP,CAAC,EAAE,IAAI,CAAC;IACR,MAAMY,YAAY,GAAG,IAAI,CAAC9B,cAAc,CAACc,SAAS,EAAEC,YAAY,EAAErI,UAAU,CAAC;IAC7E,IAAIoJ,YAAY,EAAE;MAChB7K,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACiJ,OAAO,CAACD,YAAY,CAACE,KAAK,EAAEF,YAAY,CAACG,MAAM,CAAC;IACvF,CAAC,MAAM;MACLhL,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACoJ,SAAS,EAAE;IAClD;IACA,MAAMC,YAAY,GAAGZ,uBAAuB,GAAG,CAAC,GAAGK,OAAO,CAACQ,uBAAuB,CAAClB,gBAAgB,CAAC;IACpG,MAAMmB,aAAa,GAAGlB,oBAAoB,IAAI,CAACG,oBAAoB,GAAG5J,WAAW,CAACqD,EAAE,CAAC,GAAG,CAAC;IACzF,MAAM;MACJuH,IAAI;MACJC,GAAG;MACHP,KAAK,EAAEQ,SAAS;MAChBP,MAAM,EAAEQ;IACV,CAAC,GAAG1H,EAAE,CAAC2H,qBAAqB,EAAE;IAC9B,MAAM;MACJV,KAAK,EAAEW,WAAW;MAClBV,MAAM,EAAEW;IACV,CAAC,GAAG3L,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAAC+J,OAAO,EAAE;IAClD,MAAM;MACJC,UAAU;MACVC;IACF,CAAC,GAAG,IAAI,CAAC1I,GAAG,CAACmH,UAAU;IACvB,MAAMwB,eAAe,GAAG,IAAI,CAAC3I,GAAG,CAACI,YAAY,CAACuI,eAAe;IAC7D,IAAIC,CAAC,GAAGX,IAAI,GAAGd,UAAU,CAAC0B,OAAO,GAAGf,YAAY;IAChD,IAAIgB,CAAC,GAAGZ,GAAG,GAAGf,UAAU,CAAC4B,OAAO,GAAGf,aAAa;IAChD,IAAI,IAAI,CAAChI,GAAG,CAACK,KAAK,EAAE,EAAE;MACpBuI,CAAC,IAAIN,WAAW,GAAGR,YAAY;IACjC;;IAEA;IACA,IAAI,IAAI,CAAC9H,GAAG,CAACgJ,KAAK,EAAE,IAAIf,IAAI,GAAGE,SAAS,GAAGG,WAAW,GAAGG,UAAU,EAAE;MACnEG,CAAC,GAAGX,IAAI,GAAGd,UAAU,CAAC0B,OAAO,GAAGP,WAAW,GAAG,CAAC;IACjD,CAAC,MAAM,IAAI,IAAI,CAACtI,GAAG,CAACK,KAAK,EAAE,IAAIuI,CAAC,GAAG,EAAED,eAAe,CAACM,WAAW,GAAGN,eAAe,CAACO,WAAW,CAAC,EAAE;MAC/FN,CAAC,GAAGX,IAAI,GAAGd,UAAU,CAAC0B,OAAO,GAAGf,YAAY,GAAG,CAAC;IAClD;IACA,IAAII,GAAG,GAAGK,YAAY,GAAGG,WAAW,EAAE;MACpCI,CAAC,IAAIP,YAAY,GAAGH,UAAU,GAAG,CAAC;IACpC;IACAxL,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACsI,WAAW,CAAC6B,CAAC,EAAEE,CAAC,CAAC;IACtDlM,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAAC0K,gBAAgB,CAAC,IAAI,CAACxD,cAAc,CAACc,SAAS,EAAEC,YAAY,EAAEpI,aAAa,CAAC,CAAC;EACpH;;EAEA;AACF;AACA;EACEoE,WAAW,GAAG;IACZ9F,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAAC2K,KAAK,EAAE;EAC9C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEpE,iBAAiB,CAACrE,GAAG,EAAEwE,MAAM,EAAEkE,UAAU,EAAE;IACzC,MAAMC,UAAU,GAAG,IAAI,CAACtJ,GAAG,CAACiG,WAAW,CAACtF,GAAG,EAAEwE,MAAM,CAAC,CAAChH,YAAY,CAAC;IAClE,IAAIoL,UAAU;IACd,IAAID,UAAU,EAAE;MACdC,UAAU,GAAGhM,SAAS,CAAC+L,UAAU,CAAC;MAClC9L,UAAU,CAAC+L,UAAU,EAAEF,UAAU,CAAC;IACpC,CAAC,MAAM;MACLE,UAAU,GAAGF,UAAU;IACzB;IACA,IAAI,CAACrJ,GAAG,CAACwF,WAAW,CAAC7E,GAAG,EAAEwE,MAAM,EAAEhH,YAAY,EAAEoL,UAAU,CAAC;EAC7D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE5D,cAAc,CAAChF,GAAG,EAAEwE,MAAM,EAAEqE,QAAQ,EAAE;IACpC,MAAMC,QAAQ,GAAG,IAAI,CAACzJ,GAAG,CAACiG,WAAW,CAACtF,GAAG,EAAEwE,MAAM,CAAC;IAClD,IAAI,CAACsE,QAAQ,CAACtL,YAAY,CAAC,EAAE;MAC3B,OAAO4G,SAAS;IAClB;IACA,OAAO0E,QAAQ,CAACtL,YAAY,CAAC,CAACqL,QAAQ,CAAC;EACzC;EACA;AACF;AACA;AACA;AACA;AACA;EACE/I,gBAAgB,CAACD,OAAO,EAAE;IACxBA,OAAO,CAACkJ,KAAK,CAACC,IAAI,CAAC;MACjBC,IAAI,EAAE/L;IACR,CAAC,EAAEC,kBAAkB,CAAC,IAAI,CAAC,EAAEC,iBAAiB,CAAC,IAAI,CAAC,EAAEC,mBAAmB,CAAC,IAAI,CAAC,CAAC;EAClF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEsC,sBAAsB,GAAG;IACvB,MAAMuJ,cAAc,GAAG,IAAI,CAAC7J,GAAG,CAACC,WAAW,EAAE,CAAChC,UAAU,CAAC;IACzD,IAAIR,QAAQ,CAACoM,cAAc,CAAC,EAAE;MAC5B,OAAOA,cAAc,CAACC,YAAY;IACpC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACErG,qBAAqB,GAAG;IACtB,OAAO7G,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACsL,eAAe,EAAE;EAC/D;;EAEA;AACF;AACA;EACEC,OAAO,GAAG;IACR,IAAIpN,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,EAAE;MACxC7B,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACuL,OAAO,EAAE;IAChD;IACA,IAAIpN,qBAAqB,CAAC,IAAI,EAAE+B,cAAc,CAAC,EAAE;MAC/C/B,qBAAqB,CAAC,IAAI,EAAE+B,cAAc,CAAC,CAACqL,OAAO,EAAE;IACvD;IACA,KAAK,CAACA,OAAO,EAAE;EACjB;AACF;AACA,SAASnG,aAAa,CAAC3C,KAAK,EAAE;EAC5B,IAAI,CAAC,IAAI,CAAClB,GAAG,CAACoH,IAAI,IAAI,CAAC,IAAI,CAACpH,GAAG,CAACoH,IAAI,CAACC,GAAG,EAAE;IACxC;EACF;EACA,IAAI,CAACzK,qBAAqB,CAAC,IAAI,EAAEgC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC4F,uBAAuB,CAACtD,KAAK,CAAC,EAAE;IAClG,MAAM+I,SAAS,GAAGhN,OAAO,CAACiE,KAAK,CAACoD,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC;IACtD,IAAI4F,WAAW,GAAG,IAAI;IACtB,IAAID,SAAS,EAAE;MACbC,WAAW,GAAG,IAAI,CAAClK,GAAG,CAACmK,SAAS,CAACF,SAAS,CAAC;IAC7C;IACA,IAAI,CAACA,SAAS,IAAI,IAAI,CAAC5H,KAAK,CAACqC,IAAI,IAAIwF,WAAW,KAAK,IAAI,CAAC7H,KAAK,CAACqC,IAAI,CAAC/D,GAAG,KAAKuJ,WAAW,CAACvJ,GAAG,IAAI,IAAI,CAAC0B,KAAK,CAACqC,IAAI,CAAC9D,GAAG,KAAKsJ,WAAW,CAACtJ,GAAG,CAAC,EAAE;MACxI,IAAI,CAACK,IAAI,EAAE;IACb;EACF;AACF;AACA,SAAS2C,aAAa,CAAC1C,KAAK,EAAE;EAC5B,MAAM;IACJd;EACF,CAAC,GAAG,IAAI,CAACJ,GAAG;EACZ,IAAIpD,qBAAqB,CAAC,IAAI,EAAEgC,wBAAwB,CAAC,IAAIhC,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAAC2L,SAAS,EAAE,IAAIjN,QAAQ,CAAC+D,KAAK,CAACoD,MAAM,EAAE,UAAU,CAAC,IAAI1H,qBAAqB,CAAC,IAAI,EAAEmC,gBAAgB,CAAC,KAAKmC,KAAK,CAACoD,MAAM,IAAI,CAAC1H,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,EAAE;IAC9P;EACF;EACAjC,qBAAqB,CAAC,IAAI,EAAEuC,gBAAgB,EAAEqB,YAAY,CAACiK,gBAAgB,CAACnJ,KAAK,CAACoJ,OAAO,EAAEpJ,KAAK,CAACqJ,OAAO,CAAC,CAAC;EAC1G,IAAI,IAAI,CAACnG,uBAAuB,CAAClD,KAAK,CAAC,EAAE;IACvC,MAAMmB,KAAK,GAAG,IAAI,CAACrC,GAAG,CAACwK,gBAAgB,CAAC,IAAI,CAACxK,GAAG,CAACmK,SAAS,CAACjJ,KAAK,CAACoD,MAAM,CAAC,CAAC;IACzE1H,qBAAqB,CAAC,IAAI,EAAE+B,cAAc,CAAC,CAAC8D,IAAI,CAACJ,KAAK,CAAC;EACzD,CAAC,MAAM,IAAInF,SAAS,CAACgE,KAAK,CAACoD,MAAM,EAAElE,YAAY,CAAC,IAAI,CAAC,IAAI,CAACoE,uBAAuB,CAACtD,KAAK,CAAC,EAAE;IACxFtE,qBAAqB,CAAC,IAAI,EAAE+B,cAAc,CAAC,CAACsC,IAAI,EAAE;EACpD;AACF;AACA,SAAS6C,WAAW,GAAG;EACrBtH,qBAAqB,CAAC,IAAI,EAAEoC,wBAAwB,EAAE,KAAK,CAAC;AAC9D;AACA,SAASmC,iBAAiB,CAACL,EAAE,EAAEI,cAAc,EAAE;EAC7C,IAAIA,cAAc,CAAC3C,YAAY,CAAC,IAAI2C,cAAc,CAAC3C,YAAY,CAAC,CAACC,kBAAkB,CAAC,EAAE;IACpFpB,QAAQ,CAAC0D,EAAE,EAAEI,cAAc,CAAC2J,sBAAsB,CAAC;EACrD;AACF;AACA,SAASzG,cAAc,GAAG;EACxBxH,qBAAqB,CAAC,IAAI,EAAEwC,uBAAuB,EAAE,EAAE,CAAC;EACxD,IAAI,CAACgB,GAAG,CAAC6B,kBAAkB,EAAE,CAACc,oBAAoB,CAAC,MAAM,CAAC;EAC1D,IAAI,CAAC8B,UAAU,EAAE;AACnB;AACA,SAASV,eAAe,GAAG;EACzBvH,qBAAqB,CAAC,IAAI,EAAEwC,uBAAuB,EAAE,IAAI,CAAC0G,UAAU,EAAE,CAAC;EACvE,IAAI,CAAC1F,GAAG,CAAC0K,MAAM,EAAE;EACjB,IAAI,CAAC1K,GAAG,CAAC6B,kBAAkB,EAAE,CAACc,oBAAoB,CAACnE,sBAAsB,CAAC;AAC5E;AACA,SAASyF,mBAAmB,CAAC/C,KAAK,EAAE;EAClC1E,qBAAqB,CAAC,IAAI,EAAEsC,qBAAqB,EAAE;IACjD6I,KAAK,EAAEvK,UAAU,CAAC8D,KAAK,CAACoD,MAAM,CAAC;IAC/BsD,MAAM,EAAEvK,WAAW,CAAC6D,KAAK,CAACoD,MAAM;EAClC,CAAC,CAAC;AACJ;AACA,SAASJ,iBAAiB,CAAChD,KAAK,EAAE;EAChC,MAAMyJ,YAAY,GAAGvN,UAAU,CAAC8D,KAAK,CAACoD,MAAM,CAAC;EAC7C,MAAMsG,aAAa,GAAGvN,WAAW,CAAC6D,KAAK,CAACoD,MAAM,CAAC;EAC/C,IAAIqG,YAAY,KAAK/N,qBAAqB,CAAC,IAAI,EAAEkC,qBAAqB,CAAC,CAAC6I,KAAK,GAAG,CAAC,IAAIiD,aAAa,KAAKhO,qBAAqB,CAAC,IAAI,EAAEkC,qBAAqB,CAAC,CAAC8I,MAAM,GAAG,CAAC,EAAE;IACpK,IAAI,CAAC5C,iBAAiB,CAAC,IAAI,CAAC3C,KAAK,CAACqC,IAAI,CAAC/D,GAAG,EAAE,IAAI,CAAC0B,KAAK,CAACqC,IAAI,CAAC9D,GAAG,EAAE;MAC/D,CAACvC,UAAU,GAAG;QACZsJ,KAAK,EAAEgD,YAAY;QACnB/C,MAAM,EAAEgD;MACV;IACF,CAAC,CAAC;EACJ;AACF;AACA,SAASzJ,wBAAwB,CAACD,KAAK,EAAE;EACvC,IAAItE,qBAAqB,CAAC,IAAI,EAAE6B,OAAO,CAAC,CAACyE,SAAS,EAAE,EAAE;IACpD5F,wBAAwB,CAAC4D,KAAK,CAAC;EACjC;AACF;AACA,SAASF,eAAe,GAAG;EACzB,IAAI,CAACpE,qBAAqB,CAAC,IAAI,EAAEiC,oBAAoB,CAAC,EAAE;IACtD,IAAI,CAACoC,IAAI,EAAE;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}