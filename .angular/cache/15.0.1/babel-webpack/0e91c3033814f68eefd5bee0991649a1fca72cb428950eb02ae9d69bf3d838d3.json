{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { addClass, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport TopOverlayTable from \"./../table/top.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"../selection/index.mjs\";\nimport { CLONE_TOP } from \"./constants.mjs\";\n/**\n * @class TopOverlay\n */\nexport class TopOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_TOP, wtSettings, domBindings);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsTop` option.\n     * It is used as a comparison value that can be used to detect changes in this value.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"cachedFixedRowsTop\", -1);\n    this.cachedFixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {TopOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new TopOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderTopOverlay');\n  }\n\n  /**\n   * Updates the top overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayPosition = 0;\n    let skipInnerBorderAdjusting = false;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const {\n        wtTable\n      } = this.wot;\n      const hiderRect = wtTable.hider.getBoundingClientRect();\n      const bottom = Math.ceil(hiderRect.bottom);\n      const rootHeight = overlayRoot.offsetHeight;\n\n      // This checks if the overlay is going to an infinite loop caused by added (or removed)\n      // `innerBorderTop` class name. Toggling the class name shifts the viewport by 1px and\n      // triggers the `scroll` event. It causes the table to render. The new render cycle takes into,\n      // account the shift and toggles the class name again. This causes the next loops. This\n      // happens only on Chrome (#7256).\n      //\n      // When we detect that the table bottom position is the same as the overlay bottom,\n      // do not toggle the class name.\n      //\n      // This workaround will be able to be cleared after merging the SVG borders, which introduces\n      // frozen lines (no more `innerBorderTop` workaround).\n      skipInnerBorderAdjusting = bottom === rootHeight;\n      overlayPosition = this.getOverlayOffset();\n      setOverlayPosition(overlayRoot, '0px', `${overlayPosition}px`);\n    } else {\n      overlayPosition = this.getScrollPosition();\n      resetCssTransform(overlayRoot);\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition, skipInnerBorderAdjusting);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Sets the main overlay's vertical scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const rootWindow = this.domBindings.rootWindow;\n    let result = false;\n    if (this.mainTableScrollableElement === rootWindow && rootWindow.scrollY !== pos) {\n      rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n      this.mainTableScrollableElement.scrollTop = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollHorizontally');\n  }\n\n  /**\n   * Calculates total sum cells height.\n   *\n   * @param {number} from Row index which calculates started from.\n   * @param {number} to Row index where calculation is finished.\n   * @returns {number} Height sum.\n   */\n  sumCellSizes(from, to) {\n    const defaultRowHeight = this.wtSettings.getSetting('defaultRowHeight');\n    let row = from;\n    let sum = 0;\n    while (row < to) {\n      const height = this.wot.wtTable.getRowHeight(row);\n      sum += height === undefined ? defaultRowHeight : height;\n      row += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, childs and master table element sizes (width, height).\n   *\n   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.updateTrimmingContainer();\n    if (this.needFullRender || force) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarWidth = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n      let width = this.wot.wtViewport.getWorkspaceWidth();\n      if (this.wot.wtOverlays.hasScrollbarRight) {\n        width -= scrollbarWidth;\n      }\n      width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n      overlayRootStyle.width = `${width}px`;\n    } else {\n      overlayRootStyle.width = '';\n    }\n    this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRootStyle.height = `${tableHeight}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    const selectionCornerOffset = this.wot.selectionManager.getFocusSelection() ? parseInt(CORNER_DEFAULT_STYLE.height, 10) / 2 : 0;\n    this.clone.wtTable.hider.style.width = this.hider.style.width;\n    holder.style.width = holder.parentNode.style.width;\n    // Add selection corner protruding part to the holder total height to make sure that\n    // borders' corner won't be cut after vertical scroll (#6937).\n    holder.style.height = `${parseInt(holder.parentNode.style.height, 10) + selectionCornerOffset}px`;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalRows');\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      // can happen if there are 0 rows\n      this.spreader.style.top = '0';\n    } else {\n      throw new Error('Incorrect value of the rowsRenderCalculator');\n    }\n    this.spreader.style.bottom = '';\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated left position to an element.\n   */\n  syncOverlayOffset() {\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    const {\n      spreader\n    } = this.clone.wtTable;\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else {\n      spreader.style[styleProperty] = '';\n    }\n  }\n\n  /**\n   * Scrolls vertically to a row.\n   *\n   * @param {number} sourceRow Row index which you want to scroll to.\n   * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).\n   * @returns {boolean}\n   */\n  scrollTo(sourceRow, bottomEdge) {\n    const {\n      wot,\n      wtSettings\n    } = this;\n    const sourceInstance = wot.cloneSource ? wot.cloneSource : wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    let newY = this.getTableParentOffset();\n    let scrollbarCompensation = 0;\n    if (bottomEdge) {\n      const rowHeight = this.wot.wtTable.getRowHeight(sourceRow);\n      const viewportHeight = this.wot.wtViewport.getViewportHeight();\n      if (rowHeight > viewportHeight) {\n        bottomEdge = false;\n      }\n    }\n    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (bottomEdge) {\n      const fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n      const totalRows = wtSettings.getSetting('totalRows');\n      newY += this.sumCellSizes(0, sourceRow + 1);\n      newY -= wot.wtViewport.getViewportHeight() - this.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n      // Fix 1 pixel offset when cell is selected\n      newY += 1;\n    } else {\n      newY += this.sumCellSizes(wtSettings.getSetting('fixedRowsTop'), sourceRow);\n    }\n    newY += scrollbarCompensation;\n    return this.setScrollPosition(newY);\n  }\n\n  /**\n   * Gets table parent top position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n      return this.wot.wtTable.holderOffset.top;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets the main overlay's vertical scroll position.\n   *\n   * @returns {number} Main table's vertical scroll position.\n   */\n  getScrollPosition() {\n    return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n  }\n\n  /**\n   * Gets the main overlay's vertical overlay offset.\n   *\n   * @returns {number} Main table's vertical overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const rootHeight = this.wot.wtTable.getTotalHeight();\n      const overlayRootHeight = this.clone.wtTable.getTotalHeight();\n      const maxOffset = rootHeight - overlayRootHeight;\n      overlayOffset = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header Y position if trimming container is window or scroll top if not.\n   * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    let skipInnerBorderAdjusting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const masterParent = this.wot.wtTable.holder.parentNode;\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    if (totalColumns) {\n      removeClass(masterParent, 'emptyColumns');\n    } else {\n      addClass(masterParent, 'emptyColumns');\n    }\n    let positionChanged = false;\n    if (!skipInnerBorderAdjusting) {\n      const fixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n      const areFixedRowsTopChanged = this.cachedFixedRowsTop !== fixedRowsTop;\n      const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n      if ((areFixedRowsTopChanged || fixedRowsTop === 0) && columnHeaders.length > 0) {\n        const previousState = hasClass(masterParent, 'innerBorderTop');\n        this.cachedFixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n        if (position || this.wtSettings.getSetting('totalRows') === 0) {\n          addClass(masterParent, 'innerBorderTop');\n          positionChanged = !previousState;\n        } else {\n          removeClass(masterParent, 'innerBorderTop');\n          positionChanged = previousState;\n        }\n      }\n    }\n    return positionChanged;\n  }\n}","map":{"version":3,"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","addClass","getScrollbarWidth","getScrollTop","getWindowScrollLeft","hasClass","outerHeight","removeClass","setOverlayPosition","resetCssTransform","TopOverlayTable","Overlay","CORNER_DEFAULT_STYLE","CLONE_TOP","TopOverlay","constructor","wotInstance","facadeGetter","wtSettings","domBindings","cachedFixedRowsTop","getSetting","createTable","_len","arguments","length","args","Array","_key","shouldBeRendered","resetFixedPosition","needFullRender","wot","wtTable","holder","parentNode","overlayRoot","clone","rootWindow","preventOverflow","overlayPosition","skipInnerBorderAdjusting","trimmingContainer","hiderRect","hider","getBoundingClientRect","bottom","Math","ceil","rootHeight","offsetHeight","getOverlayOffset","getScrollPosition","positionChanged","adjustHeaderBordersPosition","adjustElementsSize","setScrollPosition","pos","result","mainTableScrollableElement","scrollY","scrollTo","scrollTop","onScroll","sumCellSizes","from","to","defaultRowHeight","row","sum","height","getRowHeight","undefined","force","updateTrimmingContainer","adjustRootElementSize","adjustRootChildrenSize","rootDocument","scrollbarWidth","overlayRootStyle","style","width","wtViewport","getWorkspaceWidth","wtOverlays","hasScrollbarRight","min","wtRootElement","scrollWidth","tableHeight","TABLE","hasDefinedSize","selectionCornerOffset","selectionManager","getFocusSelection","parseInt","applyToDOM","total","rowsRenderCalculator","startPosition","spreader","top","Error","syncOverlayOffset","styleProperty","isRtl","columnsRenderCalculator","sourceRow","bottomEdge","sourceInstance","cloneSource","mainHolder","newY","getTableParentOffset","scrollbarCompensation","rowHeight","viewportHeight","getViewportHeight","clientHeight","fixedRowsBottom","totalRows","holderOffset","overlayOffset","getTotalHeight","overlayRootHeight","maxOffset","max","position","masterParent","totalColumns","fixedRowsTop","areFixedRowsTopChanged","columnHeaders","previousState"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/3rdparty/walkontable/src/overlay/top.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { addClass, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport TopOverlayTable from \"./../table/top.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"../selection/index.mjs\";\nimport { CLONE_TOP } from \"./constants.mjs\";\n/**\n * @class TopOverlay\n */\nexport class TopOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_TOP, wtSettings, domBindings);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsTop` option.\n     * It is used as a comparison value that can be used to detect changes in this value.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"cachedFixedRowsTop\", -1);\n    this.cachedFixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {TopOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new TopOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderTopOverlay');\n  }\n\n  /**\n   * Updates the top overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayPosition = 0;\n    let skipInnerBorderAdjusting = false;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const {\n        wtTable\n      } = this.wot;\n      const hiderRect = wtTable.hider.getBoundingClientRect();\n      const bottom = Math.ceil(hiderRect.bottom);\n      const rootHeight = overlayRoot.offsetHeight;\n\n      // This checks if the overlay is going to an infinite loop caused by added (or removed)\n      // `innerBorderTop` class name. Toggling the class name shifts the viewport by 1px and\n      // triggers the `scroll` event. It causes the table to render. The new render cycle takes into,\n      // account the shift and toggles the class name again. This causes the next loops. This\n      // happens only on Chrome (#7256).\n      //\n      // When we detect that the table bottom position is the same as the overlay bottom,\n      // do not toggle the class name.\n      //\n      // This workaround will be able to be cleared after merging the SVG borders, which introduces\n      // frozen lines (no more `innerBorderTop` workaround).\n      skipInnerBorderAdjusting = bottom === rootHeight;\n      overlayPosition = this.getOverlayOffset();\n      setOverlayPosition(overlayRoot, '0px', `${overlayPosition}px`);\n    } else {\n      overlayPosition = this.getScrollPosition();\n      resetCssTransform(overlayRoot);\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition, skipInnerBorderAdjusting);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Sets the main overlay's vertical scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const rootWindow = this.domBindings.rootWindow;\n    let result = false;\n    if (this.mainTableScrollableElement === rootWindow && rootWindow.scrollY !== pos) {\n      rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n      this.mainTableScrollableElement.scrollTop = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollHorizontally');\n  }\n\n  /**\n   * Calculates total sum cells height.\n   *\n   * @param {number} from Row index which calculates started from.\n   * @param {number} to Row index where calculation is finished.\n   * @returns {number} Height sum.\n   */\n  sumCellSizes(from, to) {\n    const defaultRowHeight = this.wtSettings.getSetting('defaultRowHeight');\n    let row = from;\n    let sum = 0;\n    while (row < to) {\n      const height = this.wot.wtTable.getRowHeight(row);\n      sum += height === undefined ? defaultRowHeight : height;\n      row += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, childs and master table element sizes (width, height).\n   *\n   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.updateTrimmingContainer();\n    if (this.needFullRender || force) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarWidth = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n      let width = this.wot.wtViewport.getWorkspaceWidth();\n      if (this.wot.wtOverlays.hasScrollbarRight) {\n        width -= scrollbarWidth;\n      }\n      width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n      overlayRootStyle.width = `${width}px`;\n    } else {\n      overlayRootStyle.width = '';\n    }\n    this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRootStyle.height = `${tableHeight}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    const selectionCornerOffset = this.wot.selectionManager.getFocusSelection() ? parseInt(CORNER_DEFAULT_STYLE.height, 10) / 2 : 0;\n    this.clone.wtTable.hider.style.width = this.hider.style.width;\n    holder.style.width = holder.parentNode.style.width;\n    // Add selection corner protruding part to the holder total height to make sure that\n    // borders' corner won't be cut after vertical scroll (#6937).\n    holder.style.height = `${parseInt(holder.parentNode.style.height, 10) + selectionCornerOffset}px`;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalRows');\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      // can happen if there are 0 rows\n      this.spreader.style.top = '0';\n    } else {\n      throw new Error('Incorrect value of the rowsRenderCalculator');\n    }\n    this.spreader.style.bottom = '';\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated left position to an element.\n   */\n  syncOverlayOffset() {\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    const {\n      spreader\n    } = this.clone.wtTable;\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else {\n      spreader.style[styleProperty] = '';\n    }\n  }\n\n  /**\n   * Scrolls vertically to a row.\n   *\n   * @param {number} sourceRow Row index which you want to scroll to.\n   * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).\n   * @returns {boolean}\n   */\n  scrollTo(sourceRow, bottomEdge) {\n    const {\n      wot,\n      wtSettings\n    } = this;\n    const sourceInstance = wot.cloneSource ? wot.cloneSource : wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    let newY = this.getTableParentOffset();\n    let scrollbarCompensation = 0;\n    if (bottomEdge) {\n      const rowHeight = this.wot.wtTable.getRowHeight(sourceRow);\n      const viewportHeight = this.wot.wtViewport.getViewportHeight();\n      if (rowHeight > viewportHeight) {\n        bottomEdge = false;\n      }\n    }\n    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (bottomEdge) {\n      const fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n      const totalRows = wtSettings.getSetting('totalRows');\n      newY += this.sumCellSizes(0, sourceRow + 1);\n      newY -= wot.wtViewport.getViewportHeight() - this.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n      // Fix 1 pixel offset when cell is selected\n      newY += 1;\n    } else {\n      newY += this.sumCellSizes(wtSettings.getSetting('fixedRowsTop'), sourceRow);\n    }\n    newY += scrollbarCompensation;\n    return this.setScrollPosition(newY);\n  }\n\n  /**\n   * Gets table parent top position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n      return this.wot.wtTable.holderOffset.top;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets the main overlay's vertical scroll position.\n   *\n   * @returns {number} Main table's vertical scroll position.\n   */\n  getScrollPosition() {\n    return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n  }\n\n  /**\n   * Gets the main overlay's vertical overlay offset.\n   *\n   * @returns {number} Main table's vertical overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const rootHeight = this.wot.wtTable.getTotalHeight();\n      const overlayRootHeight = this.clone.wtTable.getTotalHeight();\n      const maxOffset = rootHeight - overlayRootHeight;\n      overlayOffset = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header Y position if trimming container is window or scroll top if not.\n   * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    let skipInnerBorderAdjusting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const masterParent = this.wot.wtTable.holder.parentNode;\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    if (totalColumns) {\n      removeClass(masterParent, 'emptyColumns');\n    } else {\n      addClass(masterParent, 'emptyColumns');\n    }\n    let positionChanged = false;\n    if (!skipInnerBorderAdjusting) {\n      const fixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n      const areFixedRowsTopChanged = this.cachedFixedRowsTop !== fixedRowsTop;\n      const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n      if ((areFixedRowsTopChanged || fixedRowsTop === 0) && columnHeaders.length > 0) {\n        const previousState = hasClass(masterParent, 'innerBorderTop');\n        this.cachedFixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n        if (position || this.wtSettings.getSetting('totalRows') === 0) {\n          addClass(masterParent, 'innerBorderTop');\n          positionChanged = !previousState;\n        } else {\n          removeClass(masterParent, 'innerBorderTop');\n          positionChanged = previousState;\n        }\n      }\n    }\n    return positionChanged;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}