{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'calculatedRows';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the vertical axis.\n *\n * @type {object}\n */\nconst calculatedRows = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const startRow = this.dataAccessObject.startRowRendered;\n    if (startRow === null) {\n      return -1;\n    }\n    return startRow;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    const startRow = this.dataAccessObject.startRowVisible;\n    if (startRow === null) {\n      return -1;\n    }\n    return startRow;\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    const endRow = this.dataAccessObject.endRowRendered;\n    if (endRow === null) {\n      return -1;\n    }\n    return endRow;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    const endRow = this.dataAccessObject.endRowVisible;\n    if (endRow === null) {\n      return -1;\n    }\n    return endRow;\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    return this.dataAccessObject.countRowsRendered;\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.dataAccessObject.countRowsVisible;\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return this.dataAccessObject.columnHeaders.length;\n  }\n};\ndefineGetter(calculatedRows, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedRows;","map":{"version":3,"names":["defineGetter","MIXIN_NAME","calculatedRows","getFirstRenderedRow","startRow","dataAccessObject","startRowRendered","getFirstVisibleRow","startRowVisible","getLastRenderedRow","endRow","endRowRendered","getLastVisibleRow","endRowVisible","getRenderedRowsCount","countRowsRendered","getVisibleRowsCount","countRowsVisible","getColumnHeadersCount","columnHeaders","length","writable","enumerable"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/calculatedRows.mjs"],"sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'calculatedRows';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the vertical axis.\n *\n * @type {object}\n */\nconst calculatedRows = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const startRow = this.dataAccessObject.startRowRendered;\n    if (startRow === null) {\n      return -1;\n    }\n    return startRow;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    const startRow = this.dataAccessObject.startRowVisible;\n    if (startRow === null) {\n      return -1;\n    }\n    return startRow;\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    const endRow = this.dataAccessObject.endRowRendered;\n    if (endRow === null) {\n      return -1;\n    }\n    return endRow;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    const endRow = this.dataAccessObject.endRowVisible;\n    if (endRow === null) {\n      return -1;\n    }\n    return endRow;\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    return this.dataAccessObject.countRowsRendered;\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.dataAccessObject.countRowsVisible;\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return this.dataAccessObject.columnHeaders.length;\n  }\n};\ndefineGetter(calculatedRows, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedRows;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mCAAmC;AAChE,MAAMC,UAAU,GAAG,gBAAgB;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACrB;AACF;AACA;AACA;AACA;AACA;EACEC,mBAAmB,GAAG;IACpB,MAAMC,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAACC,gBAAgB;IACvD,IAAIF,QAAQ,KAAK,IAAI,EAAE;MACrB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,QAAQ;EACjB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEG,kBAAkB,GAAG;IACnB,MAAMH,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAACG,eAAe;IACtD,IAAIJ,QAAQ,KAAK,IAAI,EAAE;MACrB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,QAAQ;EACjB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEK,kBAAkB,GAAG;IACnB,MAAMC,MAAM,GAAG,IAAI,CAACL,gBAAgB,CAACM,cAAc;IACnD,IAAID,MAAM,KAAK,IAAI,EAAE;MACnB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,MAAM;EACf,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEE,iBAAiB,GAAG;IAClB,MAAMF,MAAM,GAAG,IAAI,CAACL,gBAAgB,CAACQ,aAAa;IAClD,IAAIH,MAAM,KAAK,IAAI,EAAE;MACnB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,MAAM;EACf,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEI,oBAAoB,GAAG;IACrB,OAAO,IAAI,CAACT,gBAAgB,CAACU,iBAAiB;EAChD,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEC,mBAAmB,GAAG;IACpB,OAAO,IAAI,CAACX,gBAAgB,CAACY,gBAAgB;EAC/C,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEC,qBAAqB,GAAG;IACtB,OAAO,IAAI,CAACb,gBAAgB,CAACc,aAAa,CAACC,MAAM;EACnD;AACF,CAAC;AACDpB,YAAY,CAACE,cAAc,EAAE,YAAY,EAAED,UAAU,EAAE;EACrDoB,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAepB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}