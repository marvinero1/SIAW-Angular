{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { extend, clone } from \"../../../helpers/object.mjs\";\nimport { substitute } from \"../../../helpers/string.mjs\";\n/**\n * @private\n */\nclass BaseType {\n  /**\n   * Default options.\n   *\n   * @returns {object}\n   */\n  static get DEFAULT_OPTIONS() {\n    return {\n      mimeType: 'text/plain',\n      fileExtension: 'txt',\n      filename: 'Handsontable [YYYY]-[MM]-[DD]',\n      encoding: 'utf-8',\n      bom: false,\n      columnHeaders: false,\n      rowHeaders: false,\n      exportHiddenColumns: false,\n      exportHiddenRows: false,\n      range: []\n    };\n  }\n\n  /**\n   * Data provider.\n   *\n   * @type {DataProvider}\n   */\n\n  constructor(dataProvider, options) {\n    _defineProperty(this, \"dataProvider\", void 0);\n    /**\n     * Format type class options.\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"options\", void 0);\n    this.dataProvider = dataProvider;\n    this.options = this._mergeOptions(options);\n    this.dataProvider.setOptions(this.options);\n  }\n\n  /**\n   * Merge options provided by users with defaults.\n   *\n   * @param {object} options An object with options to merge with.\n   * @returns {object} Returns new options object.\n   */\n  _mergeOptions(options) {\n    let _options = clone(this.constructor.DEFAULT_OPTIONS);\n    const date = new Date();\n    _options = extend(clone(BaseType.DEFAULT_OPTIONS), _options);\n    _options = extend(_options, options);\n    _options.filename = substitute(_options.filename, {\n      YYYY: date.getFullYear(),\n      MM: `${date.getMonth() + 1}`.padStart(2, '0'),\n      DD: `${date.getDate()}`.padStart(2, '0')\n    });\n    return _options;\n  }\n}\nexport default BaseType;","map":{"version":3,"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","extend","clone","substitute","BaseType","DEFAULT_OPTIONS","mimeType","fileExtension","filename","encoding","bom","columnHeaders","rowHeaders","exportHiddenColumns","exportHiddenRows","range","constructor","dataProvider","options","_mergeOptions","setOptions","_options","date","Date","YYYY","getFullYear","MM","getMonth","padStart","DD","getDate"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/plugins/exportFile/types/_base.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { extend, clone } from \"../../../helpers/object.mjs\";\nimport { substitute } from \"../../../helpers/string.mjs\";\n/**\n * @private\n */\nclass BaseType {\n  /**\n   * Default options.\n   *\n   * @returns {object}\n   */\n  static get DEFAULT_OPTIONS() {\n    return {\n      mimeType: 'text/plain',\n      fileExtension: 'txt',\n      filename: 'Handsontable [YYYY]-[MM]-[DD]',\n      encoding: 'utf-8',\n      bom: false,\n      columnHeaders: false,\n      rowHeaders: false,\n      exportHiddenColumns: false,\n      exportHiddenRows: false,\n      range: []\n    };\n  }\n\n  /**\n   * Data provider.\n   *\n   * @type {DataProvider}\n   */\n\n  constructor(dataProvider, options) {\n    _defineProperty(this, \"dataProvider\", void 0);\n    /**\n     * Format type class options.\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"options\", void 0);\n    this.dataProvider = dataProvider;\n    this.options = this._mergeOptions(options);\n    this.dataProvider.setOptions(this.options);\n  }\n\n  /**\n   * Merge options provided by users with defaults.\n   *\n   * @param {object} options An object with options to merge with.\n   * @returns {object} Returns new options object.\n   */\n  _mergeOptions(options) {\n    let _options = clone(this.constructor.DEFAULT_OPTIONS);\n    const date = new Date();\n    _options = extend(clone(BaseType.DEFAULT_OPTIONS), _options);\n    _options = extend(_options, options);\n    _options.filename = substitute(_options.filename, {\n      YYYY: date.getFullYear(),\n      MM: `${date.getMonth() + 1}`.padStart(2, '0'),\n      DD: `${date.getDate()}`.padStart(2, '0')\n    });\n    return _options;\n  }\n}\nexport default BaseType;"],"mappings":"AAAA,OAAO,mCAAmC;AAC1C,SAASA,eAAe,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAE;EAAED,GAAG,GAAGE,cAAc,CAACF,GAAG,CAAC;EAAE,IAAIA,GAAG,IAAID,GAAG,EAAE;IAAEI,MAAM,CAACC,cAAc,CAACL,GAAG,EAAEC,GAAG,EAAE;MAAEC,KAAK,EAAEA,KAAK;MAAEI,UAAU,EAAE,IAAI;MAAEC,YAAY,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAC;EAAE,CAAC,MAAM;IAAER,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;EAAE;EAAE,OAAOF,GAAG;AAAE;AAC3O,SAASG,cAAc,CAACM,CAAC,EAAE;EAAE,IAAIC,CAAC,GAAGC,YAAY,CAACF,CAAC,EAAE,QAAQ,CAAC;EAAE,OAAO,QAAQ,IAAI,OAAOC,CAAC,GAAGA,CAAC,GAAGE,MAAM,CAACF,CAAC,CAAC;AAAE;AAC7G,SAASC,YAAY,CAACF,CAAC,EAAEI,CAAC,EAAE;EAAE,IAAI,QAAQ,IAAI,OAAOJ,CAAC,IAAI,CAACA,CAAC,EAAE,OAAOA,CAAC;EAAE,IAAIK,CAAC,GAAGL,CAAC,CAACM,MAAM,CAACC,WAAW,CAAC;EAAE,IAAI,KAAK,CAAC,KAAKF,CAAC,EAAE;IAAE,IAAIJ,CAAC,GAAGI,CAAC,CAACG,IAAI,CAACR,CAAC,EAAEI,CAAC,IAAI,SAAS,CAAC;IAAE,IAAI,QAAQ,IAAI,OAAOH,CAAC,EAAE,OAAOA,CAAC;IAAE,MAAM,IAAIQ,SAAS,CAAC,8CAA8C,CAAC;EAAE;EAAE,OAAO,CAAC,QAAQ,KAAKL,CAAC,GAAGD,MAAM,GAAGO,MAAM,EAAEV,CAAC,CAAC;AAAE;AACvT,SAASW,MAAM,EAAEC,KAAK,QAAQ,6BAA6B;AAC3D,SAASC,UAAU,QAAQ,6BAA6B;AACxD;AACA;AACA;AACA,MAAMC,QAAQ,CAAC;EACb;AACF;AACA;AACA;AACA;EACE,WAAWC,eAAe,GAAG;IAC3B,OAAO;MACLC,QAAQ,EAAE,YAAY;MACtBC,aAAa,EAAE,KAAK;MACpBC,QAAQ,EAAE,+BAA+B;MACzCC,QAAQ,EAAE,OAAO;MACjBC,GAAG,EAAE,KAAK;MACVC,aAAa,EAAE,KAAK;MACpBC,UAAU,EAAE,KAAK;MACjBC,mBAAmB,EAAE,KAAK;MAC1BC,gBAAgB,EAAE,KAAK;MACvBC,KAAK,EAAE;IACT,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;;EAEEC,WAAW,CAACC,YAAY,EAAEC,OAAO,EAAE;IACjCtC,eAAe,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;IAC7C;AACJ;AACA;AACA;AACA;IACIA,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACxC,IAAI,CAACqC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,aAAa,CAACD,OAAO,CAAC;IAC1C,IAAI,CAACD,YAAY,CAACG,UAAU,CAAC,IAAI,CAACF,OAAO,CAAC;EAC5C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,aAAa,CAACD,OAAO,EAAE;IACrB,IAAIG,QAAQ,GAAGnB,KAAK,CAAC,IAAI,CAACc,WAAW,CAACX,eAAe,CAAC;IACtD,MAAMiB,IAAI,GAAG,IAAIC,IAAI,EAAE;IACvBF,QAAQ,GAAGpB,MAAM,CAACC,KAAK,CAACE,QAAQ,CAACC,eAAe,CAAC,EAAEgB,QAAQ,CAAC;IAC5DA,QAAQ,GAAGpB,MAAM,CAACoB,QAAQ,EAAEH,OAAO,CAAC;IACpCG,QAAQ,CAACb,QAAQ,GAAGL,UAAU,CAACkB,QAAQ,CAACb,QAAQ,EAAE;MAChDgB,IAAI,EAAEF,IAAI,CAACG,WAAW,EAAE;MACxBC,EAAE,EAAG,GAAEJ,IAAI,CAACK,QAAQ,EAAE,GAAG,CAAE,EAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC7CC,EAAE,EAAG,GAAEP,IAAI,CAACQ,OAAO,EAAG,EAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG;IACzC,CAAC,CAAC;IACF,OAAOP,QAAQ;EACjB;AACF;AACA,eAAejB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}