{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\n/**\n * The utils class produces the selection ranges in the `{startRow, startCol, endRow, endCol}` format\n * based on the current table selection. The CopyPaste plugin consumes that ranges to generate\n * appropriate data ready to copy to the clipboard.\n *\n * @private\n */\nvar _selectedRange = /*#__PURE__*/new WeakMap();\nvar _countRows = /*#__PURE__*/new WeakMap();\nvar _countColumns = /*#__PURE__*/new WeakMap();\nvar _rowsLimit = /*#__PURE__*/new WeakMap();\nvar _columnsLimit = /*#__PURE__*/new WeakMap();\nvar _countColumnHeaders = /*#__PURE__*/new WeakMap();\nvar _trimColumnsRange = /*#__PURE__*/new WeakSet();\nvar _trimRowsRange = /*#__PURE__*/new WeakSet();\nexport class CopyableRangesFactory {\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * @param {{\n   *   countRows: function(): number,\n   *   countColumns: function(): number,\n   *   rowsLimit: function(): number,\n   *   columnsLimit: function(): number,\n   *   countColumnHeaders: function(): number\n   * }} dependencies The utils class dependencies.\n   */\n  constructor(_ref) {\n    let {\n      countRows,\n      countColumns,\n      rowsLimit,\n      columnsLimit,\n      countColumnHeaders\n    } = _ref;\n    /**\n     * Trimmed the rows range to the limit.\n     *\n     * @param {*} startRow The lowest row index in the range.\n     * @param {*} endRow The highest row index in the range.\n     * @returns {number} Returns trimmed row index if it exceeds the limit.\n     */\n    _classPrivateMethodInitSpec(this, _trimRowsRange);\n    /**\n     * Trimmed the columns range to the limit.\n     *\n     * @param {*} startColumn The lowest column index in the range.\n     * @param {*} endColumn The highest column index in the range.\n     * @returns {number} Returns trimmed column index if it exceeds the limit.\n     */\n    _classPrivateMethodInitSpec(this, _trimColumnsRange);\n    /**\n     * @type {CellRange}\n     */\n    _classPrivateFieldInitSpec(this, _selectedRange, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _countRows, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _countColumns, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _rowsLimit, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _columnsLimit, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _countColumnHeaders, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _countRows, countRows);\n    _classPrivateFieldSet(this, _countColumns, countColumns);\n    _classPrivateFieldSet(this, _rowsLimit, rowsLimit);\n    _classPrivateFieldSet(this, _columnsLimit, columnsLimit);\n    _classPrivateFieldSet(this, _countColumnHeaders, countColumnHeaders);\n  }\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n\n  /**\n   * Sets the selection range to be processed.\n   *\n   * @param {CellRange} selectedRange The selection range represented by the CellRange class.\n   */\n  setSelectedRange(selectedRange) {\n    _classPrivateFieldSet(this, _selectedRange, selectedRange);\n  }\n\n  /**\n   * Returns a new coords object within the dataset range (cells) with `startRow`, `startCol`, `endRow`\n   * and `endCol` keys.\n   *\n   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}\n   */\n  getCellsRange() {\n    if (_classPrivateFieldGet(this, _countRows).call(this) === 0 || _classPrivateFieldGet(this, _countColumns).call(this) === 0) {\n      return null;\n    }\n    const {\n      row: startRow,\n      col: startCol\n    } = _classPrivateFieldGet(this, _selectedRange).getTopStartCorner();\n    const {\n      row: endRow,\n      col: endCol\n    } = _classPrivateFieldGet(this, _selectedRange).getBottomEndCorner();\n    const finalEndRow = _classPrivateMethodGet(this, _trimRowsRange, _trimRowsRange2).call(this, startRow, endRow);\n    const finalEndCol = _classPrivateMethodGet(this, _trimColumnsRange, _trimColumnsRange2).call(this, startCol, endCol);\n    const isRangeTrimmed = endRow !== finalEndRow || endCol !== finalEndCol;\n    return {\n      isRangeTrimmed,\n      startRow,\n      startCol,\n      endRow: finalEndRow,\n      endCol: finalEndCol\n    };\n  }\n\n  /**\n   * Returns a new coords object within the most-bottom column headers range with `startRow`,\n   * `startCol`, `endRow` and `endCol` keys.\n   *\n   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}\n   */\n  getMostBottomColumnHeadersRange() {\n    if (_classPrivateFieldGet(this, _countColumns).call(this) === 0 || _classPrivateFieldGet(this, _countColumnHeaders).call(this) === 0) {\n      return null;\n    }\n    const {\n      col: startCol\n    } = _classPrivateFieldGet(this, _selectedRange).getTopStartCorner();\n    const {\n      col: endCol\n    } = _classPrivateFieldGet(this, _selectedRange).getBottomEndCorner();\n    const finalEndCol = _classPrivateMethodGet(this, _trimColumnsRange, _trimColumnsRange2).call(this, startCol, endCol);\n    const isRangeTrimmed = endCol !== finalEndCol;\n    return {\n      isRangeTrimmed,\n      startRow: -1,\n      startCol,\n      endRow: -1,\n      endCol: finalEndCol\n    };\n  }\n\n  /**\n   * Returns a new coords object within all column headers layers (including nested headers) range with\n   * `startRow`, `startCol`, `endRow` and `endCol` keys.\n   *\n   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}\n   */\n  getAllColumnHeadersRange() {\n    if (_classPrivateFieldGet(this, _countColumns).call(this) === 0 || _classPrivateFieldGet(this, _countColumnHeaders).call(this) === 0) {\n      return null;\n    }\n    const {\n      col: startCol\n    } = _classPrivateFieldGet(this, _selectedRange).getTopStartCorner();\n    const {\n      col: endCol\n    } = _classPrivateFieldGet(this, _selectedRange).getBottomEndCorner();\n    const finalEndCol = _classPrivateMethodGet(this, _trimColumnsRange, _trimColumnsRange2).call(this, startCol, endCol);\n    const isRangeTrimmed = endCol !== finalEndCol;\n    return {\n      isRangeTrimmed,\n      startRow: -_classPrivateFieldGet(this, _countColumnHeaders).call(this),\n      startCol,\n      endRow: -1,\n      endCol: finalEndCol\n    };\n  }\n}\n\n/**\n * Returns an object with `rows` and `columns` keys. The arrays contains sorted indexes\n * generated according to the given `ranges` array.\n *\n * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges The range to process.\n * @returns {{rows: number[], columns: number[]}}\n */\nfunction _trimColumnsRange2(startColumn, endColumn) {\n  return Math.min(endColumn, Math.max(startColumn + _classPrivateFieldGet(this, _columnsLimit).call(this) - 1, startColumn));\n}\nfunction _trimRowsRange2(startRow, endRow) {\n  return Math.min(endRow, Math.max(startRow + _classPrivateFieldGet(this, _rowsLimit).call(this) - 1, startRow));\n}\nexport function normalizeRanges(ranges) {\n  const rows = [];\n  const columns = [];\n  arrayEach(ranges, range => {\n    const minRow = Math.min(range.startRow, range.endRow);\n    const maxRow = Math.max(range.startRow, range.endRow);\n    rangeEach(minRow, maxRow, row => {\n      if (rows.indexOf(row) === -1) {\n        rows.push(row);\n      }\n    });\n    const minColumn = Math.min(range.startCol, range.endCol);\n    const maxColumn = Math.max(range.startCol, range.endCol);\n    rangeEach(minColumn, maxColumn, column => {\n      if (columns.indexOf(column) === -1) {\n        columns.push(column);\n      }\n    });\n  });\n  return {\n    rows,\n    columns\n  };\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","obj","privateSet","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","privateMap","value","set","privateCollection","has","TypeError","_classPrivateMethodGet","receiver","fn","_classPrivateFieldGet","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","call","_classPrivateFieldSet","_classApplyDescriptorSet","action","writable","arrayEach","rangeEach","_selectedRange","WeakMap","_countRows","_countColumns","_rowsLimit","_columnsLimit","_countColumnHeaders","_trimColumnsRange","WeakSet","_trimRowsRange","CopyableRangesFactory","constructor","_ref","countRows","countColumns","rowsLimit","columnsLimit","countColumnHeaders","setSelectedRange","selectedRange","getCellsRange","row","startRow","col","startCol","getTopStartCorner","endRow","endCol","getBottomEndCorner","finalEndRow","_trimRowsRange2","finalEndCol","_trimColumnsRange2","isRangeTrimmed","getMostBottomColumnHeadersRange","getAllColumnHeadersRange","startColumn","endColumn","Math","min","max","normalizeRanges","ranges","rows","columns","range","minRow","maxRow","indexOf","push","minColumn","maxColumn","column"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/plugins/copyPaste/copyableRanges.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\n/**\n * The utils class produces the selection ranges in the `{startRow, startCol, endRow, endCol}` format\n * based on the current table selection. The CopyPaste plugin consumes that ranges to generate\n * appropriate data ready to copy to the clipboard.\n *\n * @private\n */\nvar _selectedRange = /*#__PURE__*/new WeakMap();\nvar _countRows = /*#__PURE__*/new WeakMap();\nvar _countColumns = /*#__PURE__*/new WeakMap();\nvar _rowsLimit = /*#__PURE__*/new WeakMap();\nvar _columnsLimit = /*#__PURE__*/new WeakMap();\nvar _countColumnHeaders = /*#__PURE__*/new WeakMap();\nvar _trimColumnsRange = /*#__PURE__*/new WeakSet();\nvar _trimRowsRange = /*#__PURE__*/new WeakSet();\nexport class CopyableRangesFactory {\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * @param {{\n   *   countRows: function(): number,\n   *   countColumns: function(): number,\n   *   rowsLimit: function(): number,\n   *   columnsLimit: function(): number,\n   *   countColumnHeaders: function(): number\n   * }} dependencies The utils class dependencies.\n   */\n  constructor(_ref) {\n    let {\n      countRows,\n      countColumns,\n      rowsLimit,\n      columnsLimit,\n      countColumnHeaders\n    } = _ref;\n    /**\n     * Trimmed the rows range to the limit.\n     *\n     * @param {*} startRow The lowest row index in the range.\n     * @param {*} endRow The highest row index in the range.\n     * @returns {number} Returns trimmed row index if it exceeds the limit.\n     */\n    _classPrivateMethodInitSpec(this, _trimRowsRange);\n    /**\n     * Trimmed the columns range to the limit.\n     *\n     * @param {*} startColumn The lowest column index in the range.\n     * @param {*} endColumn The highest column index in the range.\n     * @returns {number} Returns trimmed column index if it exceeds the limit.\n     */\n    _classPrivateMethodInitSpec(this, _trimColumnsRange);\n    /**\n     * @type {CellRange}\n     */\n    _classPrivateFieldInitSpec(this, _selectedRange, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _countRows, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _countColumns, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _rowsLimit, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _columnsLimit, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _countColumnHeaders, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _countRows, countRows);\n    _classPrivateFieldSet(this, _countColumns, countColumns);\n    _classPrivateFieldSet(this, _rowsLimit, rowsLimit);\n    _classPrivateFieldSet(this, _columnsLimit, columnsLimit);\n    _classPrivateFieldSet(this, _countColumnHeaders, countColumnHeaders);\n  }\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n\n  /**\n   * Sets the selection range to be processed.\n   *\n   * @param {CellRange} selectedRange The selection range represented by the CellRange class.\n   */\n  setSelectedRange(selectedRange) {\n    _classPrivateFieldSet(this, _selectedRange, selectedRange);\n  }\n\n  /**\n   * Returns a new coords object within the dataset range (cells) with `startRow`, `startCol`, `endRow`\n   * and `endCol` keys.\n   *\n   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}\n   */\n  getCellsRange() {\n    if (_classPrivateFieldGet(this, _countRows).call(this) === 0 || _classPrivateFieldGet(this, _countColumns).call(this) === 0) {\n      return null;\n    }\n    const {\n      row: startRow,\n      col: startCol\n    } = _classPrivateFieldGet(this, _selectedRange).getTopStartCorner();\n    const {\n      row: endRow,\n      col: endCol\n    } = _classPrivateFieldGet(this, _selectedRange).getBottomEndCorner();\n    const finalEndRow = _classPrivateMethodGet(this, _trimRowsRange, _trimRowsRange2).call(this, startRow, endRow);\n    const finalEndCol = _classPrivateMethodGet(this, _trimColumnsRange, _trimColumnsRange2).call(this, startCol, endCol);\n    const isRangeTrimmed = endRow !== finalEndRow || endCol !== finalEndCol;\n    return {\n      isRangeTrimmed,\n      startRow,\n      startCol,\n      endRow: finalEndRow,\n      endCol: finalEndCol\n    };\n  }\n\n  /**\n   * Returns a new coords object within the most-bottom column headers range with `startRow`,\n   * `startCol`, `endRow` and `endCol` keys.\n   *\n   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}\n   */\n  getMostBottomColumnHeadersRange() {\n    if (_classPrivateFieldGet(this, _countColumns).call(this) === 0 || _classPrivateFieldGet(this, _countColumnHeaders).call(this) === 0) {\n      return null;\n    }\n    const {\n      col: startCol\n    } = _classPrivateFieldGet(this, _selectedRange).getTopStartCorner();\n    const {\n      col: endCol\n    } = _classPrivateFieldGet(this, _selectedRange).getBottomEndCorner();\n    const finalEndCol = _classPrivateMethodGet(this, _trimColumnsRange, _trimColumnsRange2).call(this, startCol, endCol);\n    const isRangeTrimmed = endCol !== finalEndCol;\n    return {\n      isRangeTrimmed,\n      startRow: -1,\n      startCol,\n      endRow: -1,\n      endCol: finalEndCol\n    };\n  }\n\n  /**\n   * Returns a new coords object within all column headers layers (including nested headers) range with\n   * `startRow`, `startCol`, `endRow` and `endCol` keys.\n   *\n   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}\n   */\n  getAllColumnHeadersRange() {\n    if (_classPrivateFieldGet(this, _countColumns).call(this) === 0 || _classPrivateFieldGet(this, _countColumnHeaders).call(this) === 0) {\n      return null;\n    }\n    const {\n      col: startCol\n    } = _classPrivateFieldGet(this, _selectedRange).getTopStartCorner();\n    const {\n      col: endCol\n    } = _classPrivateFieldGet(this, _selectedRange).getBottomEndCorner();\n    const finalEndCol = _classPrivateMethodGet(this, _trimColumnsRange, _trimColumnsRange2).call(this, startCol, endCol);\n    const isRangeTrimmed = endCol !== finalEndCol;\n    return {\n      isRangeTrimmed,\n      startRow: -_classPrivateFieldGet(this, _countColumnHeaders).call(this),\n      startCol,\n      endRow: -1,\n      endCol: finalEndCol\n    };\n  }\n}\n\n/**\n * Returns an object with `rows` and `columns` keys. The arrays contains sorted indexes\n * generated according to the given `ranges` array.\n *\n * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges The range to process.\n * @returns {{rows: number[], columns: number[]}}\n */\nfunction _trimColumnsRange2(startColumn, endColumn) {\n  return Math.min(endColumn, Math.max(startColumn + _classPrivateFieldGet(this, _columnsLimit).call(this) - 1, startColumn));\n}\nfunction _trimRowsRange2(startRow, endRow) {\n  return Math.min(endRow, Math.max(startRow + _classPrivateFieldGet(this, _rowsLimit).call(this) - 1, startRow));\n}\nexport function normalizeRanges(ranges) {\n  const rows = [];\n  const columns = [];\n  arrayEach(ranges, range => {\n    const minRow = Math.min(range.startRow, range.endRow);\n    const maxRow = Math.max(range.startRow, range.endRow);\n    rangeEach(minRow, maxRow, row => {\n      if (rows.indexOf(row) === -1) {\n        rows.push(row);\n      }\n    });\n    const minColumn = Math.min(range.startCol, range.endCol);\n    const maxColumn = Math.max(range.startCol, range.endCol);\n    rangeEach(minColumn, maxColumn, column => {\n      if (columns.indexOf(column) === -1) {\n        columns.push(column);\n      }\n    });\n  });\n  return {\n    rows,\n    columns\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}