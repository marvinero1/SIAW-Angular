{"ast":null,"code":"import _asyncToGenerator from \"C:/laragon/www/SIAW-Angular-B/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nconst NAMESPACE = 'web-components';\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || {\n  head: {}\n};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\nconst promiseResolve = v => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replaceSync === 'function';\n  } catch (e) {}\n  return false;\n})();\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n  if (listeners) {\n    listeners.map(([flags, name, method]) => {\n      const target = getHostListenerTarget(elm, flags);\n      const handler = hostListenerProxy(hostRef, method);\n      const opts = hostListenerOpts(flags);\n      plt.ael(target, name, handler, opts);\n      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n    });\n  }\n};\nconst hostListenerProxy = (hostRef, methodName) => ev => {\n  try {\n    {\n      if (hostRef.$flags$ & 256 /* isListenReady */) {\n        // instance is ready, let's call it's member method for this event\n        hostRef.$lazyInstance$[methodName](ev);\n      } else {\n        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n      }\n    }\n  } catch (e) {\n    consoleError(e);\n  }\n};\nconst getHostListenerTarget = (elm, flags) => {\n  if (flags & 8 /* TargetWindow */) return win;\n  return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = flags => (flags & 2 /* Capture */) !== 0;\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst createTime = (fnName, tagName = '') => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\nconst uniqueTime = (key, measureText) => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n  if (supportsConstructableStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    if (typeof style === 'string') {\n      style = cssText;\n    } else {\n      style.replaceSync(cssText);\n    }\n  } else {\n    style = cssText;\n  }\n  styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  let scopeId = getScopeId(cmpMeta, mode);\n  const style = styles.get(scopeId);\n  // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n  styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n      if (!appliedStyles.has(scopeId)) {\n        {\n          {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n  return scopeId;\n};\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const flags = cmpMeta.$flags$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$);\n  if (flags & 10 /* needsScopedEncapsulation */) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    // DOM WRITE!!\n    elm['s-sc'] = scopeId;\n    elm.classList.add(scopeId + '-h');\n  }\n  endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (mode && cmp.$flags$ & 32 /* hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\n// Private\nconst computeMode = elm => modeResolutionChain.map(h => h(elm)).find(m => !!m);\n// Public\nconst setMode = handler => modeResolutionChain.push(handler);\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\nconst isDef = v => v != null;\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n  let child = null;\n  let simple = false;\n  let lastSimple = false;\n  const vNodeChildren = [];\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        }\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n        lastSimple = simple;\n      }\n    }\n  };\n  walk(children);\n  if (vnodeData) {\n    {\n      const classData = vnodeData.className || vnodeData.class;\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n  return vnode;\n};\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  {\n    vnode.$attrs$ = null;\n  }\n  return vnode;\n};\nconst Host = {};\nconst isHost = node => node && node.$tag$ === Host;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    let ln = memberName.toLowerCase();\n    if (memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else if (memberName === 'style') {\n      // update style attribute, css properties and values\n      {\n        for (const prop in oldValue) {\n          if (!newValue || newValue[prop] == null) {\n            if (prop.includes('-')) {\n              elm.style.removeProperty(prop);\n            } else {\n              elm.style[prop] = '';\n            }\n          }\n        }\n      }\n      for (const prop in newValue) {\n        if (!oldValue || newValue[prop] !== oldValue[prop]) {\n          if (prop.includes('-')) {\n            elm.style.setProperty(prop, newValue[prop]);\n          } else {\n            elm.style[prop] = newValue[prop];\n          }\n        }\n      }\n    } else if (memberName === 'ref') {\n      // minifier will clean this up\n      if (newValue) {\n        newValue(elm);\n      }\n    } else if (!isProp && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            const n = newValue == null ? '' : newValue;\n            // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n            if (memberName === 'list') {\n              isProp = false;\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n        {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  }\n  // add new & update changed attributes\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  const newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n  if (newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else {\n    // create element\n    elm = newVNode.$elm$ = doc.createElement(newVNode.$tag$);\n    // add css classes, attrs, props, listeners, etc.\n    {\n      updateElement(null, newVNode, isSvgMode);\n    }\n    if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i);\n        // return node could have been null\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n  }\n  return elm;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = parentElm;\n  let childNode;\n  if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx);\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, before);\n      }\n    }\n  }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$;\n      callNodeRefs(vnode);\n      // remove the vnode's element from the dom\n      elm.remove();\n    }\n  }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n        newStartVnode = newCh[++newStartIdx];\n      }\n      if (node) {\n        {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    return true;\n  }\n  return false;\n};\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const tag = newVNode.$tag$;\n  const text = newVNode.$text$;\n  if (text === null) {\n    // element node\n    {\n      if (tag === 'slot') ;else {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n    if (oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      }\n      // add the new vnode children\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n  } else if (oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\nconst callNodeRefs = vNode => {\n  {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(callNodeRefs);\n  }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n  if (cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(([propName, attribute]) => rootVnode.$attrs$[attribute] = hostElm[propName]);\n  }\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4 /* isHost */;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = hostElm.shadowRoot || hostElm;\n  {\n    scopeId = hostElm['s-sc'];\n  }\n  // synchronous patch\n  patch(oldVNode, rootVnode);\n};\nconst getElement = ref => getHostRef(ref).$hostElement$;\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  {\n    hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n  }\n\n  if (hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n    hostRef.$flags$ |= 512 /* needsRerender */;\n    return;\n  }\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n  // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n  return writeTask(dispatch);\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = hostRef.$lazyInstance$;\n  let promise;\n  if (isInitialLoad) {\n    {\n      hostRef.$flags$ |= 256 /* isListenReady */;\n      if (hostRef.$queuedListeners$) {\n        hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n        hostRef.$queuedListeners$ = null;\n      }\n    }\n    {\n      promise = safeCall(instance, 'componentWillLoad');\n    }\n  }\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (hostRef, instance, isInitialLoad) {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n      // DOM WRITE!\n      attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n      callRender(hostRef, instance);\n    }\n    if (rc) {\n      // ok, so turns out there are some child host elements\n      // waiting on this parent element to load\n      // let's fire off all update callbacks waiting\n      rc.map(cb => cb());\n      elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n      const childrenPromises = elm['s-p'];\n      const postUpdate = () => postUpdateComponent(hostRef);\n      if (childrenPromises.length === 0) {\n        postUpdate();\n      } else {\n        Promise.all(childrenPromises).then(postUpdate);\n        hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n        childrenPromises.length = 0;\n      }\n    }\n  });\n  return function updateComponent(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst callRender = (hostRef, instance, elm) => {\n  try {\n    instance = instance.render();\n    {\n      hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n    }\n\n    {\n      hostRef.$flags$ |= 2 /* hasRendered */;\n    }\n\n    {\n      {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        {\n          renderVdom(hostRef, instance);\n        }\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n  return null;\n};\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const instance = hostRef.$lazyInstance$;\n  const ancestorComponent = hostRef.$ancestorComponent$;\n  if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n    hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n    {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    {\n      safeCall(instance, 'componentDidLoad');\n    }\n    endPostUpdate();\n    {\n      hostRef.$onReadyResolve$(elm);\n      if (!ancestorComponent) {\n        appDidLoad();\n      }\n    }\n  } else {\n    endPostUpdate();\n  }\n  // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n  {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n    if (hostRef.$flags$ & 512 /* needsRerender */) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n    hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n  }\n  // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  {\n    addHydratedFlag(doc.documentElement);\n  }\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n};\nconst safeCall = (instance, method, arg) => {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  return undefined;\n};\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = elm => elm.classList.add('hydrated');\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (propType & 4 /* Boolean */) {\n      // per the HTML spec, any string value means it is a boolean true value\n      // but we'll cheat here and say that the string \"false\" is the boolean false\n      return propValue === 'false' ? false : propValue === '' || !!propValue;\n    }\n    if (propType & 2 /* Number */) {\n      // force it to be a number\n      return parseFloat(propValue);\n    }\n    if (propType & 1 /* String */) {\n      // could have been passed as a number or boolean\n      // but we still want it as a string\n      return String(propValue);\n    }\n    // redundant return here for better minification\n    return propValue;\n  }\n  // not sure exactly what type we want\n  // so no need to change to a different type\n  return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const elm = hostRef.$hostElement$;\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = hostRef.$lazyInstance$;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n  // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n  const didValueChange = newVal !== oldVal && !areBothNaN;\n  if ((!(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n    if (instance) {\n      // get an array of method names of watch functions to call\n      if (cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n        const watchMethods = cmpMeta.$watchers$[propName];\n        if (watchMethods) {\n          // this instance is watching for when this property changed\n          watchMethods.map(watchMethodName => {\n            try {\n              // fire off each of the watch methods that are watching this property\n              instance[watchMethodName](newVal, oldVal, propName);\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          });\n        }\n      }\n      if ((flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n        // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (cmpMeta.$members$) {\n    if (Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    }\n    // It's better to have a const than two Object.entries()\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(([memberName, [memberFlags]]) => {\n      if (memberFlags & 31 /* Prop */ || flags & 2 /* proxyState */ && memberFlags & 32 /* State */) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n          set(newValue) {\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n          configurable: true,\n          enumerable: true\n        });\n      }\n    });\n    if (flags & 1 /* isElementConstructor */) {\n      const attrNameToPropName = new Map();\n      prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n        plt.jmp(() => {\n          const propName = attrNameToPropName.get(attrName);\n          //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n          //  in the case where an attribute was set inline.\n          //  ```html\n          //    <my-component some-attribute=\"some-value\"></my-component>\n          //  ```\n          //\n          //  There is an edge case where a developer sets the attribute inline on a custom element and then\n          //  programmatically changes it before it has been upgraded as shown below:\n          //\n          //  ```html\n          //    <!-- this component has _not_ been upgraded yet -->\n          //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n          //    <script>\n          //      // grab non-upgraded component\n          //      el = document.querySelector(\"#test\");\n          //      el.someAttribute = \"another-value\";\n          //      // upgrade component\n          //      customElements.define('my-component', MyComponent);\n          //    </script>\n          //  ```\n          //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n          //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n          //  to the value that was set inline i.e. \"some-value\" from above example. When\n          //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n          //\n          //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n          //  by connectedCallback as this attributeChangedCallback will not fire.\n          //\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n          //\n          //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n          //  properties here given that this goes against best practices outlined here\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n          if (this.hasOwnProperty(propName)) {\n            newValue = this[propName];\n            delete this[propName];\n          } else if (prototype.hasOwnProperty(propName) && typeof this[propName] === 'number' && this[propName] == newValue) {\n            // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n            // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n            // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n            return;\n          }\n          this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n        });\n      };\n      // create an array of attributes to observe\n      // and also create a map of html attribute name to js property name\n      Cstr.observedAttributes = members.filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n      .map(([propName, m]) => {\n        const attrName = m[1] || propName;\n        attrNameToPropName.set(attrName, propName);\n        if (m[0] & 512 /* ReflectAttr */) {\n          cmpMeta.$attrsToReflect$.push([propName, attrName]);\n        }\n        return attrName;\n      });\n    }\n  }\n  return Cstr;\n};\nconst initializeComponent = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (elm, hostRef, cmpMeta, hmrVersionId, Cstr) {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n      {\n        // we haven't initialized this element yet\n        hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n        // lazy loaded components\n        // request the component's implementation to be\n        // wired up with the host element\n        Cstr = loadModule(cmpMeta);\n        if (Cstr.then) {\n          // Await creates a micro-task avoid if possible\n          const endLoad = uniqueTime();\n          Cstr = yield Cstr;\n          endLoad();\n        }\n        if (!Cstr.isProxied) {\n          // we've never proxied this Constructor before\n          // let's add the getters/setters to its prototype before\n          // the first time we create an instance of the implementation\n          {\n            cmpMeta.$watchers$ = Cstr.watchers;\n          }\n          proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n          Cstr.isProxied = true;\n        }\n        const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n        // ok, time to construct the instance\n        // but let's keep track of when we start and stop\n        // so that the getters/setters don't incorrectly step on data\n        {\n          hostRef.$flags$ |= 8 /* isConstructingInstance */;\n        }\n        // construct the lazy-loaded component implementation\n        // passing the hostRef is very important during\n        // construction in order to directly wire together the\n        // host element and the lazy-loaded instance\n        try {\n          new Cstr(hostRef);\n        } catch (e) {\n          consoleError(e);\n        }\n        {\n          hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n        }\n\n        {\n          hostRef.$flags$ |= 128 /* isWatchReady */;\n        }\n\n        endNewInstance();\n      }\n      if (Cstr.style) {\n        // this component has styles but we haven't registered them yet\n        let style = Cstr.style;\n        if (typeof style !== 'string') {\n          style = style[hostRef.$modeName$ = computeMode(elm)];\n        }\n        const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n        if (!styles.has(scopeId)) {\n          const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n          registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n          endRegisterStyles();\n        }\n      }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n      // this is the initial load and this component it has an ancestor component\n      // but the ancestor component has NOT fired its will update lifecycle yet\n      // so let's just cool our jets and wait for the ancestor to continue first\n      // this will get fired off when the ancestor component\n      // finally gets around to rendering its lazy self\n      // fire off the initial update\n      ancestorComponent['s-rc'].push(schedule);\n    } else {\n      schedule();\n    }\n  });\n  return function initializeComponent(_x4, _x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n    if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1 /* hasConnected */;\n      {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      }\n      // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n      if (cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n          if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n      {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    } else {\n      // not the first time this has connected\n      // reattach any event listeners to the host\n      // since they would have been removed when disconnected\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n    }\n    endConnected();\n  }\n};\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n    const hostRef = getHostRef(elm);\n    {\n      if (hostRef.$rmListeners$) {\n        hostRef.$rmListeners$.map(rmListener => rmListener());\n        hostRef.$rmListeners$ = undefined;\n      }\n    }\n  }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n  const endBootstrap = createTime();\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  let appLoadFallback;\n  let isBootstrapping = true;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  lazyBundles.map(lazyBundle => {\n    lazyBundle[1].map(compactMeta => {\n      const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      {\n        cmpMeta.$listeners$ = compactMeta[3];\n      }\n      {\n        cmpMeta.$attrsToReflect$ = [];\n      }\n      {\n        cmpMeta.$watchers$ = {};\n      }\n      const tagName = cmpMeta.$tagName$;\n      const HostElement = class extends HTMLElement {\n        // StencilLazyHost\n        constructor(self) {\n          // @ts-ignore\n          super(self);\n          self = this;\n          registerHost(self, cmpMeta);\n          if (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n            // this component is using shadow dom\n            // and this browser supports shadow dom\n            // add the read-only property \"shadowRoot\" to the host element\n            // adding the shadow root build conditionals to minimize runtime\n            {\n              {\n                self.attachShadow({\n                  mode: 'open'\n                });\n              }\n            }\n          }\n        }\n        connectedCallback() {\n          if (appLoadFallback) {\n            clearTimeout(appLoadFallback);\n            appLoadFallback = null;\n          }\n          if (isBootstrapping) {\n            // connectedCallback will be processed once all components have been registered\n            deferredConnectedCallbacks.push(this);\n          } else {\n            plt.jmp(() => connectedCallback(this));\n          }\n        }\n        disconnectedCallback() {\n          plt.jmp(() => disconnectedCallback(this));\n        }\n        componentOnReady() {\n          return getHostRef(this).$onReadyPromise$;\n        }\n      };\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n      }\n    });\n  });\n\n  {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  }\n  // Process deferred connectedCallbacks now all components have been registered\n  isBootstrapping = false;\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  }\n  // Fallback appLoad event\n  endBootstrap();\n};\nconst hostRefs = new WeakMap();\nconst getHostRef = ref => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n  return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n  const module = cmpModules.get(bundleId);\n  if (module) {\n    return module[exportName];\n  }\n  /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n  return import( /* @vite-ignore */\n  /* webpackInclude: /\\.entry\\.js$/ */\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${''}`).then(importedModule => {\n    {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n  if (!queuePending) {\n    queuePending = true;\n    if (write && plt.$flags$ & 4 /* queueSync */) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  queue.length = 0;\n};\nconst flush = () => {\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads);\n  // DOM WRITES!!!\n  {\n    consume(queueDomWrites);\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexport { Host as H, bootstrapLazy as b, getElement as g, h, promiseResolve as p, registerInstance as r, setMode as s };","map":{"version":3,"names":["NAMESPACE","scopeId","hostTagName","isSvgMode","queuePending","win","window","doc","document","head","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","promiseResolve","v","Promise","resolve","supportsConstructableStylesheets","CSSStyleSheet","replaceSync","e","addHostEventListeners","elm","hostRef","listeners","attachParentListeners","map","flags","name","method","target","getHostListenerTarget","handler","hostListenerProxy","hostListenerOpts","$rmListeners$","push","methodName","ev","$lazyInstance$","$queuedListeners$","consoleError","HYDRATED_CSS","createTime","fnName","tagName","uniqueTime","key","measureText","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","get","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","nodeType","appliedStyles","styleElm","Set","has","createElement","innerHTML","insertBefore","querySelector","add","adoptedStyleSheets","includes","attachStyles","$cmpMeta$","$hostElement$","endAttachStyles","$tagName$","shadowRoot","getRootNode","$modeName$","classList","cmp","computeMode","modeResolutionChain","find","m","setMode","EMPTY_OBJ","isDef","isComplexType","o","nodeName","vnodeData","children","child","simple","lastSimple","vNodeChildren","walk","c","i","length","Array","isArray","String","$text$","newVNode","classData","className","class","Object","keys","filter","k","join","vnode","$attrs$","$children$","tag","text","$tag$","$elm$","Host","isHost","node","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","oldClasses","parseClassList","newClasses","remove","prop","removeProperty","setProperty","slice","isComplex","n","getAttribute","removeAttribute","setAttribute","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","host","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","createTextNode","appendChild","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","callNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","isSameVnode","patch","nextSibling","parentNode","vnode1","vnode2","oldVNode","oldChildren","newChildren","textContent","data","vNode","ref","renderVdom","renderFnResults","$vnode$","rootVnode","$attrsToReflect$","propName","attribute","getElement","getHostRef","emitEvent","dispatchEvent","attachToAncestor","ancestorComponent","$onRenderResolve$","r","scheduleUpdate","isInitialLoad","$ancestorComponent$","dispatch","dispatchHooks","writeTask","endSchedule","instance","promise","event","safeCall","then","updateComponent","endUpdate","rc","endRender","callRender","cb","childrenPromises","postUpdate","postUpdateComponent","all","render","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","nextTick","who","documentElement","detail","namespace","arg","thenFn","parsePropertyValue","propValue","propType","parseFloat","getValue","$instanceValues$","setValue","newVal","oldVal","$members$","areBothNaN","Number","isNaN","didValueChange","$watchers$","watchMethods","watchMethodName","proxyComponent","Cstr","watchers","members","entries","prototype","memberFlags","defineProperty","configurable","enumerable","attrNameToPropName","Map","attributeChangedCallback","attrName","_oldValue","hasOwnProperty","observedAttributes","_","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","endRegisterStyles","schedule","connectedCallback","endConnected","$listeners$","disconnectedCallback","rmListener","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","assign","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","HostElement","HTMLElement","constructor","self","registerHost","attachShadow","clearTimeout","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","firstChild","setTimeout","hostRefs","registerInstance","lazyInstance","console","error","cmpModules","exportName","replace","bundleId","module","importedModule","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","H","b","g","p","s"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/@profabric/web-components/dist/esm/index-34a04543.js"],"sourcesContent":["const NAMESPACE = 'web-components';\n\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (listeners) {\n        listeners.map(([flags, name, method]) => {\n            const target = getHostListenerTarget(elm, flags) ;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        {\n            if (hostRef.$flags$ & 256 /* isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (flags & 8 /* TargetWindow */)\n        return win;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => (flags & 2 /* Capture */) !== 0;\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta, mode);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$);\n    if (flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (mode && cmp.$flags$ & 32 /* hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\n// Private\nconst computeMode = (elm) => modeResolutionChain.map((h) => h(elm)).find((m) => !!m);\n// Public\nconst setMode = (handler) => modeResolutionChain.push(handler);\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (memberName === 'style') {\n            // update style attribute, css properties and values\n            {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        // create element\n        elm = newVNode.$elm$ = (doc.createElement(newVNode.$tag$));\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n    }\n    return elm;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        return true;\n    }\n    return false;\n};\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    if (text === null) {\n        // element node\n        {\n            if (tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst callNodeRefs = (vNode) => {\n    {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if (cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    if (isInitialLoad) {\n        {\n            hostRef.$flags$ |= 256 /* isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = hostRef.$lazyInstance$ ;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        {\n            safeCall(instance, 'componentDidLoad');\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (propType & 2 /* Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            // get an array of method names of watch functions to call\n            if (cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ((flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        if (Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* Prop */ ||\n                    ((flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n        if ((flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (typeof style !== 'string') {\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            {\n                cmpMeta.$watchers$ = {};\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { Host as H, bootstrapLazy as b, getElement as g, h, promiseResolve as p, registerInstance as r, setMode as s };\n"],"mappings":";AAAA,MAAMA,SAAS,GAAG,gBAAgB;AAElC,IAAIC,OAAO;AACX,IAAIC,WAAW;AACf,IAAIC,SAAS,GAAG,KAAK;AACrB,IAAIC,YAAY,GAAG,KAAK;AACxB,MAAMC,GAAG,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGA,MAAM,GAAG,CAAC,CAAC;AACvD,MAAMC,GAAG,GAAGF,GAAG,CAACG,QAAQ,IAAI;EAAEC,IAAI,EAAE,CAAC;AAAE,CAAC;AACxC,MAAMC,GAAG,GAAG;EACRC,OAAO,EAAE,CAAC;EACVC,cAAc,EAAE,EAAE;EAClBC,GAAG,EAAGC,CAAC,IAAKA,CAAC,EAAE;EACfC,GAAG,EAAGD,CAAC,IAAKE,qBAAqB,CAACF,CAAC,CAAC;EACpCG,GAAG,EAAE,CAACC,EAAE,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,IAAI,KAAKH,EAAE,CAACI,gBAAgB,CAACH,SAAS,EAAEC,QAAQ,EAAEC,IAAI,CAAC;EACtFE,GAAG,EAAE,CAACL,EAAE,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,IAAI,KAAKH,EAAE,CAACM,mBAAmB,CAACL,SAAS,EAAEC,QAAQ,EAAEC,IAAI,CAAC;EACzFI,EAAE,EAAE,CAACN,SAAS,EAAEE,IAAI,KAAK,IAAIK,WAAW,CAACP,SAAS,EAAEE,IAAI;AAC5D,CAAC;AACD,MAAMM,cAAc,GAAIC,CAAC,IAAKC,OAAO,CAACC,OAAO,CAACF,CAAC,CAAC;AAChD,MAAMG,gCAAgC,GAAG,aAAc,CAAC,MAAM;EACtD,IAAI;IACA,IAAIC,aAAa,EAAE;IACnB,OAAO,OAAO,IAAIA,aAAa,EAAE,CAACC,WAAW,KAAK,UAAU;EAChE,CAAC,CACD,OAAOC,CAAC,EAAE,CAAE;EACZ,OAAO,KAAK;AAChB,CAAC,GAAG;AAER,MAAMC,qBAAqB,GAAG,CAACC,GAAG,EAAEC,OAAO,EAAEC,SAAS,EAAEC,qBAAqB,KAAK;EAC9E,IAAID,SAAS,EAAE;IACXA,SAAS,CAACE,GAAG,CAAC,CAAC,CAACC,KAAK,EAAEC,IAAI,EAAEC,MAAM,CAAC,KAAK;MACrC,MAAMC,MAAM,GAAGC,qBAAqB,CAACT,GAAG,EAAEK,KAAK,CAAC;MAChD,MAAMK,OAAO,GAAGC,iBAAiB,CAACV,OAAO,EAAEM,MAAM,CAAC;MAClD,MAAMtB,IAAI,GAAG2B,gBAAgB,CAACP,KAAK,CAAC;MACpC/B,GAAG,CAACO,GAAG,CAAC2B,MAAM,EAAEF,IAAI,EAAEI,OAAO,EAAEzB,IAAI,CAAC;MACpC,CAACgB,OAAO,CAACY,aAAa,GAAGZ,OAAO,CAACY,aAAa,IAAI,EAAE,EAAEC,IAAI,CAAC,MAAMxC,GAAG,CAACa,GAAG,CAACqB,MAAM,EAAEF,IAAI,EAAEI,OAAO,EAAEzB,IAAI,CAAC,CAAC;IAC1G,CAAC,CAAC;EACN;AACJ,CAAC;AACD,MAAM0B,iBAAiB,GAAG,CAACV,OAAO,EAAEc,UAAU,KAAMC,EAAE,IAAK;EACvD,IAAI;IACA;MACI,IAAIf,OAAO,CAAC1B,OAAO,GAAG,GAAG,CAAC,qBAAqB;QAC3C;QACA0B,OAAO,CAACgB,cAAc,CAACF,UAAU,CAAC,CAACC,EAAE,CAAC;MAC1C,CAAC,MACI;QACD,CAACf,OAAO,CAACiB,iBAAiB,GAAGjB,OAAO,CAACiB,iBAAiB,IAAI,EAAE,EAAEJ,IAAI,CAAC,CAACC,UAAU,EAAEC,EAAE,CAAC,CAAC;MACxF;IACJ;EACJ,CAAC,CACD,OAAOlB,CAAC,EAAE;IACNqB,YAAY,CAACrB,CAAC,CAAC;EACnB;AACJ,CAAC;AACD,MAAMW,qBAAqB,GAAG,CAACT,GAAG,EAAEK,KAAK,KAAK;EAC1C,IAAIA,KAAK,GAAG,CAAC,CAAC,oBACV,OAAOpC,GAAG;EACd,OAAO+B,GAAG;AACd,CAAC;AACD;AACA,MAAMY,gBAAgB,GAAIP,KAAK,IAAK,CAACA,KAAK,GAAG,CAAC,CAAC,mBAAmB,CAAC;AACnE,MAAMe,YAAY,GAAG,kDAAkD;AACvE,MAAMC,UAAU,GAAG,CAACC,MAAM,EAAEC,OAAO,GAAG,EAAE,KAAK;EACzC;IACI,OAAO,MAAM;MACT;IACJ,CAAC;EACL;AACJ,CAAC;AACD,MAAMC,UAAU,GAAG,CAACC,GAAG,EAAEC,WAAW,KAAK;EACrC;IACI,OAAO,MAAM;MACT;IACJ,CAAC;EACL;AACJ,CAAC;AACD,MAAMC,iBAAiB,GAAG,IAAIC,OAAO,EAAE;AACvC,MAAMC,aAAa,GAAG,CAAChE,OAAO,EAAEiE,OAAO,EAAEC,OAAO,KAAK;EACjD,IAAIC,KAAK,GAAGC,MAAM,CAACC,GAAG,CAACrE,OAAO,CAAC;EAC/B,IAAI8B,gCAAgC,IAAIoC,OAAO,EAAE;IAC7CC,KAAK,GAAIA,KAAK,IAAI,IAAIpC,aAAa,EAAG;IACtC,IAAI,OAAOoC,KAAK,KAAK,QAAQ,EAAE;MAC3BA,KAAK,GAAGF,OAAO;IACnB,CAAC,MACI;MACDE,KAAK,CAACnC,WAAW,CAACiC,OAAO,CAAC;IAC9B;EACJ,CAAC,MACI;IACDE,KAAK,GAAGF,OAAO;EACnB;EACAG,MAAM,CAACE,GAAG,CAACtE,OAAO,EAAEmE,KAAK,CAAC;AAC9B,CAAC;AACD,MAAMI,QAAQ,GAAG,CAACC,kBAAkB,EAAEC,OAAO,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC7D,IAAI3E,OAAO,GAAG4E,UAAU,CAACH,OAAO,EAAEC,IAAI,CAAC;EACvC,MAAMP,KAAK,GAAGC,MAAM,CAACC,GAAG,CAACrE,OAAO,CAAC;EACjC;EACA;EACAwE,kBAAkB,GAAGA,kBAAkB,CAACK,QAAQ,KAAK,EAAE,CAAC,yBAAyBL,kBAAkB,GAAGlE,GAAG;EACzG,IAAI6D,KAAK,EAAE;IACP,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3BK,kBAAkB,GAAGA,kBAAkB,CAAChE,IAAI,IAAIgE,kBAAkB;MAClE,IAAIM,aAAa,GAAGhB,iBAAiB,CAACO,GAAG,CAACG,kBAAkB,CAAC;MAC7D,IAAIO,QAAQ;MACZ,IAAI,CAACD,aAAa,EAAE;QAChBhB,iBAAiB,CAACQ,GAAG,CAACE,kBAAkB,EAAGM,aAAa,GAAG,IAAIE,GAAG,EAAE,CAAE;MAC1E;MACA,IAAI,CAACF,aAAa,CAACG,GAAG,CAACjF,OAAO,CAAC,EAAE;QAC7B;UACI;YACI+E,QAAQ,GAAGzE,GAAG,CAAC4E,aAAa,CAAC,OAAO,CAAC;YACrCH,QAAQ,CAACI,SAAS,GAAGhB,KAAK;UAC9B;UACAK,kBAAkB,CAACY,YAAY,CAACL,QAAQ,EAAEP,kBAAkB,CAACa,aAAa,CAAC,MAAM,CAAC,CAAC;QACvF;QACA,IAAIP,aAAa,EAAE;UACfA,aAAa,CAACQ,GAAG,CAACtF,OAAO,CAAC;QAC9B;MACJ;IACJ,CAAC,MACI,IAAI,CAACwE,kBAAkB,CAACe,kBAAkB,CAACC,QAAQ,CAACrB,KAAK,CAAC,EAAE;MAC7DK,kBAAkB,CAACe,kBAAkB,GAAG,CAAC,GAAGf,kBAAkB,CAACe,kBAAkB,EAAEpB,KAAK,CAAC;IAC7F;EACJ;EACA,OAAOnE,OAAO;AAClB,CAAC;AACD,MAAMyF,YAAY,GAAIrD,OAAO,IAAK;EAC9B,MAAMqC,OAAO,GAAGrC,OAAO,CAACsD,SAAS;EACjC,MAAMvD,GAAG,GAAGC,OAAO,CAACuD,aAAa;EACjC,MAAMnD,KAAK,GAAGiC,OAAO,CAAC/D,OAAO;EAC7B,MAAMkF,eAAe,GAAGpC,UAAU,CAAC,cAAc,EAAEiB,OAAO,CAACoB,SAAS,CAAC;EACrE,MAAM7F,OAAO,GAAGuE,QAAQ,CAACpC,GAAG,CAAC2D,UAAU,GAAG3D,GAAG,CAAC2D,UAAU,GAAG3D,GAAG,CAAC4D,WAAW,EAAE,EAAEtB,OAAO,EAAErC,OAAO,CAAC4D,UAAU,CAAC;EAC1G,IAAIxD,KAAK,GAAG,EAAE,CAAC,gCAAgC;IAC3C;IACA;IACA;IACA;IACA;IACA;IACA;IACAL,GAAG,CAAC,MAAM,CAAC,GAAGnC,OAAO;IACrBmC,GAAG,CAAC8D,SAAS,CAACX,GAAG,CAACtF,OAAO,GAAG,IAAI,CAAC;EACrC;EACA4F,eAAe,EAAE;AACrB,CAAC;AACD,MAAMhB,UAAU,GAAG,CAACsB,GAAG,EAAExB,IAAI,KAAK,KAAK,IAAIA,IAAI,IAAIwB,GAAG,CAACxF,OAAO,GAAG,EAAE,CAAC,gBAAgBwF,GAAG,CAACL,SAAS,GAAG,GAAG,GAAGnB,IAAI,GAAGwB,GAAG,CAACL,SAAS,CAAC;AAC/H;AACA,MAAMM,WAAW,GAAIhE,GAAG,IAAKiE,mBAAmB,CAAC7D,GAAG,CAAE1B,CAAC,IAAKA,CAAC,CAACsB,GAAG,CAAC,CAAC,CAACkE,IAAI,CAAEC,CAAC,IAAK,CAAC,CAACA,CAAC,CAAC;AACpF;AACA,MAAMC,OAAO,GAAI1D,OAAO,IAAKuD,mBAAmB,CAACnD,IAAI,CAACJ,OAAO,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2D,SAAS,GAAG,CAAC,CAAC;AACpB,MAAMC,KAAK,GAAI9E,CAAC,IAAKA,CAAC,IAAI,IAAI;AAC9B,MAAM+E,aAAa,GAAIC,CAAC,IAAK;EACzB;EACAA,CAAC,GAAG,OAAOA,CAAC;EACZ,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,KAAK,UAAU;AAC7C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM9F,CAAC,GAAG,CAAC+F,QAAQ,EAAEC,SAAS,EAAE,GAAGC,QAAQ,KAAK;EAC5C,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAIC,MAAM,GAAG,KAAK;EAClB,IAAIC,UAAU,GAAG,KAAK;EACtB,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,IAAI,GAAIC,CAAC,IAAK;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,CAAC,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MAC/BN,KAAK,GAAGK,CAAC,CAACC,CAAC,CAAC;MACZ,IAAIE,KAAK,CAACC,OAAO,CAACT,KAAK,CAAC,EAAE;QACtBI,IAAI,CAACJ,KAAK,CAAC;MACf,CAAC,MACI,IAAIA,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;QAClD,IAAKC,MAAM,GAAG,OAAOJ,QAAQ,KAAK,UAAU,IAAI,CAACF,aAAa,CAACK,KAAK,CAAC,EAAG;UACpEA,KAAK,GAAGU,MAAM,CAACV,KAAK,CAAC;QACzB;QACA,IAAIC,MAAM,IAAIC,UAAU,EAAE;UACtB;UACAC,aAAa,CAACA,aAAa,CAACI,MAAM,GAAG,CAAC,CAAC,CAACI,MAAM,IAAIX,KAAK;QAC3D,CAAC,MACI;UACD;UACAG,aAAa,CAACjE,IAAI,CAAC+D,MAAM,GAAGW,QAAQ,CAAC,IAAI,EAAEZ,KAAK,CAAC,GAAGA,KAAK,CAAC;QAC9D;QACAE,UAAU,GAAGD,MAAM;MACvB;IACJ;EACJ,CAAC;EACDG,IAAI,CAACL,QAAQ,CAAC;EACd,IAAID,SAAS,EAAE;IACX;MACI,MAAMe,SAAS,GAAGf,SAAS,CAACgB,SAAS,IAAIhB,SAAS,CAACiB,KAAK;MACxD,IAAIF,SAAS,EAAE;QACXf,SAAS,CAACiB,KAAK,GACX,OAAOF,SAAS,KAAK,QAAQ,GACvBA,SAAS,GACTG,MAAM,CAACC,IAAI,CAACJ,SAAS,CAAC,CACnBK,MAAM,CAAEC,CAAC,IAAKN,SAAS,CAACM,CAAC,CAAC,CAAC,CAC3BC,IAAI,CAAC,GAAG,CAAC;MAC1B;IACJ;EACJ;EACA,MAAMC,KAAK,GAAGT,QAAQ,CAACf,QAAQ,EAAE,IAAI,CAAC;EACtCwB,KAAK,CAACC,OAAO,GAAGxB,SAAS;EACzB,IAAIK,aAAa,CAACI,MAAM,GAAG,CAAC,EAAE;IAC1Bc,KAAK,CAACE,UAAU,GAAGpB,aAAa;EACpC;EACA,OAAOkB,KAAK;AAChB,CAAC;AACD,MAAMT,QAAQ,GAAG,CAACY,GAAG,EAAEC,IAAI,KAAK;EAC5B,MAAMJ,KAAK,GAAG;IACV1H,OAAO,EAAE,CAAC;IACV+H,KAAK,EAAEF,GAAG;IACVb,MAAM,EAAEc,IAAI;IACZE,KAAK,EAAE,IAAI;IACXJ,UAAU,EAAE;EAChB,CAAC;EACD;IACIF,KAAK,CAACC,OAAO,GAAG,IAAI;EACxB;EACA,OAAOD,KAAK;AAChB,CAAC;AACD,MAAMO,IAAI,GAAG,CAAC,CAAC;AACf,MAAMC,MAAM,GAAIC,IAAI,IAAKA,IAAI,IAAIA,IAAI,CAACJ,KAAK,KAAKE,IAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,WAAW,GAAG,CAAC3G,GAAG,EAAE4G,UAAU,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAE1G,KAAK,KAAK;EACvE,IAAIwG,QAAQ,KAAKC,QAAQ,EAAE;IACvB,IAAIE,MAAM,GAAGC,iBAAiB,CAACjH,GAAG,EAAE4G,UAAU,CAAC;IAC/C,IAAIM,EAAE,GAAGN,UAAU,CAACO,WAAW,EAAE;IACjC,IAAIP,UAAU,KAAK,OAAO,EAAE;MACxB,MAAM9C,SAAS,GAAG9D,GAAG,CAAC8D,SAAS;MAC/B,MAAMsD,UAAU,GAAGC,cAAc,CAACR,QAAQ,CAAC;MAC3C,MAAMS,UAAU,GAAGD,cAAc,CAACP,QAAQ,CAAC;MAC3ChD,SAAS,CAACyD,MAAM,CAAC,GAAGH,UAAU,CAACtB,MAAM,CAAEb,CAAC,IAAKA,CAAC,IAAI,CAACqC,UAAU,CAACjE,QAAQ,CAAC4B,CAAC,CAAC,CAAC,CAAC;MAC3EnB,SAAS,CAACX,GAAG,CAAC,GAAGmE,UAAU,CAACxB,MAAM,CAAEb,CAAC,IAAKA,CAAC,IAAI,CAACmC,UAAU,CAAC/D,QAAQ,CAAC4B,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC,MACI,IAAI2B,UAAU,KAAK,OAAO,EAAE;MAC7B;MACA;QACI,KAAK,MAAMY,IAAI,IAAIX,QAAQ,EAAE;UACzB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACU,IAAI,CAAC,IAAI,IAAI,EAAE;YACrC,IAAIA,IAAI,CAACnE,QAAQ,CAAC,GAAG,CAAC,EAAE;cACpBrD,GAAG,CAACgC,KAAK,CAACyF,cAAc,CAACD,IAAI,CAAC;YAClC,CAAC,MACI;cACDxH,GAAG,CAACgC,KAAK,CAACwF,IAAI,CAAC,GAAG,EAAE;YACxB;UACJ;QACJ;MACJ;MACA,KAAK,MAAMA,IAAI,IAAIV,QAAQ,EAAE;QACzB,IAAI,CAACD,QAAQ,IAAIC,QAAQ,CAACU,IAAI,CAAC,KAAKX,QAAQ,CAACW,IAAI,CAAC,EAAE;UAChD,IAAIA,IAAI,CAACnE,QAAQ,CAAC,GAAG,CAAC,EAAE;YACpBrD,GAAG,CAACgC,KAAK,CAAC0F,WAAW,CAACF,IAAI,EAAEV,QAAQ,CAACU,IAAI,CAAC,CAAC;UAC/C,CAAC,MACI;YACDxH,GAAG,CAACgC,KAAK,CAACwF,IAAI,CAAC,GAAGV,QAAQ,CAACU,IAAI,CAAC;UACpC;QACJ;MACJ;IACJ,CAAC,MACI,IAAIZ,UAAU,KAAK,KAAK,EAAE;MAC3B;MACA,IAAIE,QAAQ,EAAE;QACVA,QAAQ,CAAC9G,GAAG,CAAC;MACjB;IACJ,CAAC,MACI,IAAK,CAACgH,MAAM,IACbJ,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,IACrBA,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACvB;MACA;MACA;MACA;MACA,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACvB;QACA;QACA;QACA;QACA;QACA;QACA;QACAA,UAAU,GAAGA,UAAU,CAACe,KAAK,CAAC,CAAC,CAAC;MACpC,CAAC,MACI,IAAIV,iBAAiB,CAAChJ,GAAG,EAAEiJ,EAAE,CAAC,EAAE;QACjC;QACA;QACA;QACA;QACAN,UAAU,GAAGM,EAAE,CAACS,KAAK,CAAC,CAAC,CAAC;MAC5B,CAAC,MACI;QACD;QACA;QACA;QACA;QACA;QACAf,UAAU,GAAGM,EAAE,CAAC,CAAC,CAAC,GAAGN,UAAU,CAACe,KAAK,CAAC,CAAC,CAAC;MAC5C;MACA,IAAId,QAAQ,EAAE;QACVvI,GAAG,CAACa,GAAG,CAACa,GAAG,EAAE4G,UAAU,EAAEC,QAAQ,EAAE,KAAK,CAAC;MAC7C;MACA,IAAIC,QAAQ,EAAE;QACVxI,GAAG,CAACO,GAAG,CAACmB,GAAG,EAAE4G,UAAU,EAAEE,QAAQ,EAAE,KAAK,CAAC;MAC7C;IACJ,CAAC,MACI;MACD;MACA,MAAMc,SAAS,GAAGrD,aAAa,CAACuC,QAAQ,CAAC;MACzC,IAAI,CAACE,MAAM,IAAKY,SAAS,IAAId,QAAQ,KAAK,IAAK,KAAK,CAACC,KAAK,EAAE;QACxD,IAAI;UACA,IAAI,CAAC/G,GAAG,CAACuB,OAAO,CAAC8B,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC5B,MAAMwE,CAAC,GAAGf,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAGA,QAAQ;YAC1C;YACA,IAAIF,UAAU,KAAK,MAAM,EAAE;cACvBI,MAAM,GAAG,KAAK;YAClB,CAAC,MACI,IAAIH,QAAQ,IAAI,IAAI,IAAI7G,GAAG,CAAC4G,UAAU,CAAC,IAAIiB,CAAC,EAAE;cAC/C7H,GAAG,CAAC4G,UAAU,CAAC,GAAGiB,CAAC;YACvB;UACJ,CAAC,MACI;YACD7H,GAAG,CAAC4G,UAAU,CAAC,GAAGE,QAAQ;UAC9B;QACJ,CAAC,CACD,OAAOhH,CAAC,EAAE,CAAE;MAChB;MACA,IAAIgH,QAAQ,IAAI,IAAI,IAAIA,QAAQ,KAAK,KAAK,EAAE;QACxC,IAAIA,QAAQ,KAAK,KAAK,IAAI9G,GAAG,CAAC8H,YAAY,CAAClB,UAAU,CAAC,KAAK,EAAE,EAAE;UAC3D;YACI5G,GAAG,CAAC+H,eAAe,CAACnB,UAAU,CAAC;UACnC;QACJ;MACJ,CAAC,MACI,IAAI,CAAC,CAACI,MAAM,IAAI3G,KAAK,GAAG,CAAC,CAAC,gBAAgB0G,KAAK,KAAK,CAACa,SAAS,EAAE;QACjEd,QAAQ,GAAGA,QAAQ,KAAK,IAAI,GAAG,EAAE,GAAGA,QAAQ;QAC5C;UACI9G,GAAG,CAACgI,YAAY,CAACpB,UAAU,EAAEE,QAAQ,CAAC;QAC1C;MACJ;IACJ;EACJ;AACJ,CAAC;AACD,MAAMmB,mBAAmB,GAAG,IAAI;AAChC,MAAMZ,cAAc,GAAIa,KAAK,IAAM,CAACA,KAAK,GAAG,EAAE,GAAGA,KAAK,CAACC,KAAK,CAACF,mBAAmB,CAAE;AAClF,MAAMG,aAAa,GAAG,CAACC,QAAQ,EAAEC,QAAQ,EAAEvK,SAAS,EAAE6I,UAAU,KAAK;EACjE;EACA;EACA;EACA,MAAM5G,GAAG,GAAGsI,QAAQ,CAAC/B,KAAK,CAAC7D,QAAQ,KAAK,EAAE,CAAC,0BAA0B4F,QAAQ,CAAC/B,KAAK,CAACgC,IAAI,GAClFD,QAAQ,CAAC/B,KAAK,CAACgC,IAAI,GACnBD,QAAQ,CAAC/B,KAAK;EACpB,MAAMiC,aAAa,GAAIH,QAAQ,IAAIA,QAAQ,CAACnC,OAAO,IAAK7B,SAAS;EACjE,MAAMoE,aAAa,GAAGH,QAAQ,CAACpC,OAAO,IAAI7B,SAAS;EACnD;IACI;IACA,KAAKuC,UAAU,IAAI4B,aAAa,EAAE;MAC9B,IAAI,EAAE5B,UAAU,IAAI6B,aAAa,CAAC,EAAE;QAChC9B,WAAW,CAAC3G,GAAG,EAAE4G,UAAU,EAAE4B,aAAa,CAAC5B,UAAU,CAAC,EAAE8B,SAAS,EAAE3K,SAAS,EAAEuK,QAAQ,CAAC/J,OAAO,CAAC;MACnG;IACJ;EACJ;EACA;EACA,KAAKqI,UAAU,IAAI6B,aAAa,EAAE;IAC9B9B,WAAW,CAAC3G,GAAG,EAAE4G,UAAU,EAAE4B,aAAa,CAAC5B,UAAU,CAAC,EAAE6B,aAAa,CAAC7B,UAAU,CAAC,EAAE7I,SAAS,EAAEuK,QAAQ,CAAC/J,OAAO,CAAC;EACnH;AACJ,CAAC;AACD,MAAMoK,SAAS,GAAG,CAACC,cAAc,EAAEC,cAAc,EAAEC,UAAU,EAAEC,SAAS,KAAK;EACzE;EACA,MAAMvD,QAAQ,GAAGqD,cAAc,CAAC1C,UAAU,CAAC2C,UAAU,CAAC;EACtD,IAAI5D,CAAC,GAAG,CAAC;EACT,IAAIlF,GAAG;EACP,IAAIgJ,SAAS;EACb,IAAIxD,QAAQ,CAACD,MAAM,KAAK,IAAI,EAAE;IAC1B;IACAvF,GAAG,GAAGwF,QAAQ,CAACe,KAAK,GAAGpI,GAAG,CAAC8K,cAAc,CAACzD,QAAQ,CAACD,MAAM,CAAC;EAC9D,CAAC,MACI;IACD;IACAvF,GAAG,GAAGwF,QAAQ,CAACe,KAAK,GAAIpI,GAAG,CAAC4E,aAAa,CAACyC,QAAQ,CAACc,KAAK,CAAE;IAC1D;IACA;MACI8B,aAAa,CAAC,IAAI,EAAE5C,QAAQ,EAAEzH,SAAS,CAAC;IAC5C;IACA,IAAIuG,KAAK,CAACzG,OAAO,CAAC,IAAImC,GAAG,CAAC,MAAM,CAAC,KAAKnC,OAAO,EAAE;MAC3C;MACA;MACAmC,GAAG,CAAC8D,SAAS,CAACX,GAAG,CAAEnD,GAAG,CAAC,MAAM,CAAC,GAAGnC,OAAO,CAAE;IAC9C;IACA,IAAI2H,QAAQ,CAACW,UAAU,EAAE;MACrB,KAAKjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,QAAQ,CAACW,UAAU,CAAChB,MAAM,EAAE,EAAED,CAAC,EAAE;QAC7C;QACA8D,SAAS,GAAGL,SAAS,CAACC,cAAc,EAAEpD,QAAQ,EAAEN,CAAC,CAAC;QAClD;QACA,IAAI8D,SAAS,EAAE;UACX;UACAhJ,GAAG,CAACkJ,WAAW,CAACF,SAAS,CAAC;QAC9B;MACJ;IACJ;EACJ;EACA,OAAOhJ,GAAG;AACd,CAAC;AACD,MAAMmJ,SAAS,GAAG,CAACJ,SAAS,EAAEK,MAAM,EAAEC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,KAAK;EAC5E,IAAIC,YAAY,GAAIV,SAAU;EAC9B,IAAIC,SAAS;EACb,IAAIS,YAAY,CAAC9F,UAAU,IAAI8F,YAAY,CAAClI,OAAO,KAAKzD,WAAW,EAAE;IACjE2L,YAAY,GAAGA,YAAY,CAAC9F,UAAU;EAC1C;EACA,OAAO4F,QAAQ,IAAIC,MAAM,EAAE,EAAED,QAAQ,EAAE;IACnC,IAAID,MAAM,CAACC,QAAQ,CAAC,EAAE;MAClBP,SAAS,GAAGL,SAAS,CAAC,IAAI,EAAEU,WAAW,EAAEE,QAAQ,CAAC;MAClD,IAAIP,SAAS,EAAE;QACXM,MAAM,CAACC,QAAQ,CAAC,CAAChD,KAAK,GAAGyC,SAAS;QAClCS,YAAY,CAACxG,YAAY,CAAC+F,SAAS,EAAEI,MAAM,CAAC;MAChD;IACJ;EACJ;AACJ,CAAC;AACD,MAAMM,YAAY,GAAG,CAACJ,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEvD,KAAK,EAAEjG,GAAG,KAAK;EAC3D,OAAOuJ,QAAQ,IAAIC,MAAM,EAAE,EAAED,QAAQ,EAAE;IACnC,IAAKtD,KAAK,GAAGqD,MAAM,CAACC,QAAQ,CAAC,EAAG;MAC5BvJ,GAAG,GAAGiG,KAAK,CAACM,KAAK;MACjBoD,YAAY,CAAC1D,KAAK,CAAC;MACnB;MACAjG,GAAG,CAACuH,MAAM,EAAE;IAChB;EACJ;AACJ,CAAC;AACD,MAAMqC,cAAc,GAAG,CAACb,SAAS,EAAEc,KAAK,EAAErE,QAAQ,EAAEsE,KAAK,KAAK;EAC1D,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,SAAS,GAAGJ,KAAK,CAAC1E,MAAM,GAAG,CAAC;EAChC,IAAI+E,aAAa,GAAGL,KAAK,CAAC,CAAC,CAAC;EAC5B,IAAIM,WAAW,GAAGN,KAAK,CAACI,SAAS,CAAC;EAClC,IAAIG,SAAS,GAAGN,KAAK,CAAC3E,MAAM,GAAG,CAAC;EAChC,IAAIkF,aAAa,GAAGP,KAAK,CAAC,CAAC,CAAC;EAC5B,IAAIQ,WAAW,GAAGR,KAAK,CAACM,SAAS,CAAC;EAClC,IAAI1D,IAAI;EACR,OAAOqD,WAAW,IAAIE,SAAS,IAAID,WAAW,IAAII,SAAS,EAAE;IACzD,IAAIF,aAAa,IAAI,IAAI,EAAE;MACvB;MACAA,aAAa,GAAGL,KAAK,CAAC,EAAEE,WAAW,CAAC;IACxC,CAAC,MACI,IAAII,WAAW,IAAI,IAAI,EAAE;MAC1BA,WAAW,GAAGN,KAAK,CAAC,EAAEI,SAAS,CAAC;IACpC,CAAC,MACI,IAAII,aAAa,IAAI,IAAI,EAAE;MAC5BA,aAAa,GAAGP,KAAK,CAAC,EAAEE,WAAW,CAAC;IACxC,CAAC,MACI,IAAIM,WAAW,IAAI,IAAI,EAAE;MAC1BA,WAAW,GAAGR,KAAK,CAAC,EAAEM,SAAS,CAAC;IACpC,CAAC,MACI,IAAIG,WAAW,CAACL,aAAa,EAAEG,aAAa,CAAC,EAAE;MAChDG,KAAK,CAACN,aAAa,EAAEG,aAAa,CAAC;MACnCH,aAAa,GAAGL,KAAK,CAAC,EAAEE,WAAW,CAAC;MACpCM,aAAa,GAAGP,KAAK,CAAC,EAAEE,WAAW,CAAC;IACxC,CAAC,MACI,IAAIO,WAAW,CAACJ,WAAW,EAAEG,WAAW,CAAC,EAAE;MAC5CE,KAAK,CAACL,WAAW,EAAEG,WAAW,CAAC;MAC/BH,WAAW,GAAGN,KAAK,CAAC,EAAEI,SAAS,CAAC;MAChCK,WAAW,GAAGR,KAAK,CAAC,EAAEM,SAAS,CAAC;IACpC,CAAC,MACI,IAAIG,WAAW,CAACL,aAAa,EAAEI,WAAW,CAAC,EAAE;MAC9CE,KAAK,CAACN,aAAa,EAAEI,WAAW,CAAC;MACjCvB,SAAS,CAAC9F,YAAY,CAACiH,aAAa,CAAC3D,KAAK,EAAE4D,WAAW,CAAC5D,KAAK,CAACkE,WAAW,CAAC;MAC1EP,aAAa,GAAGL,KAAK,CAAC,EAAEE,WAAW,CAAC;MACpCO,WAAW,GAAGR,KAAK,CAAC,EAAEM,SAAS,CAAC;IACpC,CAAC,MACI,IAAIG,WAAW,CAACJ,WAAW,EAAEE,aAAa,CAAC,EAAE;MAC9CG,KAAK,CAACL,WAAW,EAAEE,aAAa,CAAC;MACjCtB,SAAS,CAAC9F,YAAY,CAACkH,WAAW,CAAC5D,KAAK,EAAE2D,aAAa,CAAC3D,KAAK,CAAC;MAC9D4D,WAAW,GAAGN,KAAK,CAAC,EAAEI,SAAS,CAAC;MAChCI,aAAa,GAAGP,KAAK,CAAC,EAAEE,WAAW,CAAC;IACxC,CAAC,MACI;MACD;QACI;QACAtD,IAAI,GAAGiC,SAAS,CAACkB,KAAK,IAAIA,KAAK,CAACG,WAAW,CAAC,EAAExE,QAAQ,EAAEwE,WAAW,CAAC;QACpEK,aAAa,GAAGP,KAAK,CAAC,EAAEE,WAAW,CAAC;MACxC;MACA,IAAItD,IAAI,EAAE;QACN;UACIwD,aAAa,CAAC3D,KAAK,CAACmE,UAAU,CAACzH,YAAY,CAACyD,IAAI,EAAEwD,aAAa,CAAC3D,KAAK,CAAC;QAC1E;MACJ;IACJ;EACJ;EACA,IAAIwD,WAAW,GAAGE,SAAS,EAAE;IACzBd,SAAS,CAACJ,SAAS,EAAEe,KAAK,CAACM,SAAS,GAAG,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,GAAGN,KAAK,CAACM,SAAS,GAAG,CAAC,CAAC,CAAC7D,KAAK,EAAEf,QAAQ,EAAEsE,KAAK,EAAEE,WAAW,EAAEI,SAAS,CAAC;EACnI,CAAC,MACI,IAAIJ,WAAW,GAAGI,SAAS,EAAE;IAC9BV,YAAY,CAACG,KAAK,EAAEE,WAAW,EAAEE,SAAS,CAAC;EAC/C;AACJ,CAAC;AACD,MAAMM,WAAW,GAAG,CAACI,MAAM,EAAEC,MAAM,KAAK;EACpC;EACA;EACA,IAAID,MAAM,CAACrE,KAAK,KAAKsE,MAAM,CAACtE,KAAK,EAAE;IAC/B,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB,CAAC;AACD,MAAMkE,KAAK,GAAG,CAACK,QAAQ,EAAErF,QAAQ,KAAK;EAClC,MAAMxF,GAAG,GAAIwF,QAAQ,CAACe,KAAK,GAAGsE,QAAQ,CAACtE,KAAM;EAC7C,MAAMuE,WAAW,GAAGD,QAAQ,CAAC1E,UAAU;EACvC,MAAM4E,WAAW,GAAGvF,QAAQ,CAACW,UAAU;EACvC,MAAMC,GAAG,GAAGZ,QAAQ,CAACc,KAAK;EAC1B,MAAMD,IAAI,GAAGb,QAAQ,CAACD,MAAM;EAC5B,IAAIc,IAAI,KAAK,IAAI,EAAE;IACf;IACA;MACI,IAAID,GAAG,KAAK,MAAM,EACd,CAAC,KACA;QACD;QACA;QACA;QACAgC,aAAa,CAACyC,QAAQ,EAAErF,QAAQ,EAAEzH,SAAS,CAAC;MAChD;IACJ;IACA,IAAI+M,WAAW,KAAK,IAAI,IAAIC,WAAW,KAAK,IAAI,EAAE;MAC9C;MACAnB,cAAc,CAAC5J,GAAG,EAAE8K,WAAW,EAAEtF,QAAQ,EAAEuF,WAAW,CAAC;IAC3D,CAAC,MACI,IAAIA,WAAW,KAAK,IAAI,EAAE;MAC3B;MACA,IAAIF,QAAQ,CAACtF,MAAM,KAAK,IAAI,EAAE;QAC1B;QACAvF,GAAG,CAACgL,WAAW,GAAG,EAAE;MACxB;MACA;MACA7B,SAAS,CAACnJ,GAAG,EAAE,IAAI,EAAEwF,QAAQ,EAAEuF,WAAW,EAAE,CAAC,EAAEA,WAAW,CAAC5F,MAAM,GAAG,CAAC,CAAC;IAC1E,CAAC,MACI,IAAI2F,WAAW,KAAK,IAAI,EAAE;MAC3B;MACApB,YAAY,CAACoB,WAAW,EAAE,CAAC,EAAEA,WAAW,CAAC3F,MAAM,GAAG,CAAC,CAAC;IACxD;EACJ,CAAC,MACI,IAAI0F,QAAQ,CAACtF,MAAM,KAAKc,IAAI,EAAE;IAC/B;IACA;IACArG,GAAG,CAACiL,IAAI,GAAG5E,IAAI;EACnB;AACJ,CAAC;AACD,MAAMsD,YAAY,GAAIuB,KAAK,IAAK;EAC5B;IACIA,KAAK,CAAChF,OAAO,IAAIgF,KAAK,CAAChF,OAAO,CAACiF,GAAG,IAAID,KAAK,CAAChF,OAAO,CAACiF,GAAG,CAAC,IAAI,CAAC;IAC7DD,KAAK,CAAC/E,UAAU,IAAI+E,KAAK,CAAC/E,UAAU,CAAC/F,GAAG,CAACuJ,YAAY,CAAC;EAC1D;AACJ,CAAC;AACD,MAAMyB,UAAU,GAAG,CAACnL,OAAO,EAAEoL,eAAe,KAAK;EAC7C,MAAM7I,OAAO,GAAGvC,OAAO,CAACuD,aAAa;EACrC,MAAMlB,OAAO,GAAGrC,OAAO,CAACsD,SAAS;EACjC,MAAMsH,QAAQ,GAAG5K,OAAO,CAACqL,OAAO,IAAI9F,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;EACxD,MAAM+F,SAAS,GAAG9E,MAAM,CAAC4E,eAAe,CAAC,GAAGA,eAAe,GAAG3M,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE2M,eAAe,CAAC;EAC5FvN,WAAW,GAAG0E,OAAO,CAACjB,OAAO;EAC7B,IAAIe,OAAO,CAACkJ,gBAAgB,EAAE;IAC1BD,SAAS,CAACrF,OAAO,GAAGqF,SAAS,CAACrF,OAAO,IAAI,CAAC,CAAC;IAC3C5D,OAAO,CAACkJ,gBAAgB,CAACpL,GAAG,CAAC,CAAC,CAACqL,QAAQ,EAAEC,SAAS,CAAC,KAAMH,SAAS,CAACrF,OAAO,CAACwF,SAAS,CAAC,GAAGlJ,OAAO,CAACiJ,QAAQ,CAAE,CAAC;EAC/G;EACAF,SAAS,CAACjF,KAAK,GAAG,IAAI;EACtBiF,SAAS,CAAChN,OAAO,IAAI,CAAC,CAAC;EACvB0B,OAAO,CAACqL,OAAO,GAAGC,SAAS;EAC3BA,SAAS,CAAChF,KAAK,GAAGsE,QAAQ,CAACtE,KAAK,GAAI/D,OAAO,CAACmB,UAAU,IAAInB,OAAS;EACnE;IACI3E,OAAO,GAAG2E,OAAO,CAAC,MAAM,CAAC;EAC7B;EACA;EACAgI,KAAK,CAACK,QAAQ,EAAEU,SAAS,CAAC;AAC9B,CAAC;AACD,MAAMI,UAAU,GAAIR,GAAG,IAAMS,UAAU,CAACT,GAAG,CAAC,CAAC3H,aAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqI,SAAS,GAAG,CAAC7L,GAAG,EAAEM,IAAI,EAAErB,IAAI,KAAK;EACnC,MAAM+B,EAAE,GAAG1C,GAAG,CAACe,EAAE,CAACiB,IAAI,EAAErB,IAAI,CAAC;EAC7Be,GAAG,CAAC8L,aAAa,CAAC9K,EAAE,CAAC;EACrB,OAAOA,EAAE;AACb,CAAC;AACD,MAAM+K,gBAAgB,GAAG,CAAC9L,OAAO,EAAE+L,iBAAiB,KAAK;EACrD,IAAIA,iBAAiB,IAAI,CAAC/L,OAAO,CAACgM,iBAAiB,IAAID,iBAAiB,CAAC,KAAK,CAAC,EAAE;IAC7EA,iBAAiB,CAAC,KAAK,CAAC,CAAClL,IAAI,CAAC,IAAIrB,OAAO,CAAEyM,CAAC,IAAMjM,OAAO,CAACgM,iBAAiB,GAAGC,CAAE,CAAC,CAAC;EACtF;AACJ,CAAC;AACD,MAAMC,cAAc,GAAG,CAAClM,OAAO,EAAEmM,aAAa,KAAK;EAC/C;IACInM,OAAO,CAAC1B,OAAO,IAAI,EAAE,CAAC;EAC1B;;EACA,IAAI0B,OAAO,CAAC1B,OAAO,GAAG,CAAC,CAAC,4BAA4B;IAChD0B,OAAO,CAAC1B,OAAO,IAAI,GAAG,CAAC;IACvB;EACJ;EACAwN,gBAAgB,CAAC9L,OAAO,EAAEA,OAAO,CAACoM,mBAAmB,CAAC;EACtD;EACA;EACA;EACA,MAAMC,QAAQ,GAAG,MAAMC,aAAa,CAACtM,OAAO,EAAEmM,aAAa,CAAC;EAC5D,OAAOI,SAAS,CAACF,QAAQ,CAAC;AAC9B,CAAC;AACD,MAAMC,aAAa,GAAG,CAACtM,OAAO,EAAEmM,aAAa,KAAK;EAC9C,MAAMK,WAAW,GAAGpL,UAAU,CAAC,gBAAgB,EAAEpB,OAAO,CAACsD,SAAS,CAACG,SAAS,CAAC;EAC7E,MAAMgJ,QAAQ,GAAGzM,OAAO,CAACgB,cAAc;EACvC,IAAI0L,OAAO;EACX,IAAIP,aAAa,EAAE;IACf;MACInM,OAAO,CAAC1B,OAAO,IAAI,GAAG,CAAC;MACvB,IAAI0B,OAAO,CAACiB,iBAAiB,EAAE;QAC3BjB,OAAO,CAACiB,iBAAiB,CAACd,GAAG,CAAC,CAAC,CAACW,UAAU,EAAE6L,KAAK,CAAC,KAAKC,QAAQ,CAACH,QAAQ,EAAE3L,UAAU,EAAE6L,KAAK,CAAC,CAAC;QAC7F3M,OAAO,CAACiB,iBAAiB,GAAG,IAAI;MACpC;IACJ;IACA;MACIyL,OAAO,GAAGE,QAAQ,CAACH,QAAQ,EAAE,mBAAmB,CAAC;IACrD;EACJ;EACAD,WAAW,EAAE;EACb,OAAOK,IAAI,CAACH,OAAO,EAAE,MAAMI,eAAe,CAAC9M,OAAO,EAAEyM,QAAQ,EAAEN,aAAa,CAAC,CAAC;AACjF,CAAC;AACD,MAAMW,eAAe;EAAA,6BAAG,WAAO9M,OAAO,EAAEyM,QAAQ,EAAEN,aAAa,EAAK;IAChE;IACA,MAAMpM,GAAG,GAAGC,OAAO,CAACuD,aAAa;IACjC,MAAMwJ,SAAS,GAAG3L,UAAU,CAAC,QAAQ,EAAEpB,OAAO,CAACsD,SAAS,CAACG,SAAS,CAAC;IACnE,MAAMuJ,EAAE,GAAGjN,GAAG,CAAC,MAAM,CAAC;IACtB,IAAIoM,aAAa,EAAE;MACf;MACA9I,YAAY,CAACrD,OAAO,CAAC;IACzB;IACA,MAAMiN,SAAS,GAAG7L,UAAU,CAAC,QAAQ,EAAEpB,OAAO,CAACsD,SAAS,CAACG,SAAS,CAAC;IACnE;MACIyJ,UAAU,CAAClN,OAAO,EAAEyM,QAAQ,CAAC;IACjC;IACA,IAAIO,EAAE,EAAE;MACJ;MACA;MACA;MACAA,EAAE,CAAC7M,GAAG,CAAEgN,EAAE,IAAKA,EAAE,EAAE,CAAC;MACpBpN,GAAG,CAAC,MAAM,CAAC,GAAG0I,SAAS;IAC3B;IACAwE,SAAS,EAAE;IACXF,SAAS,EAAE;IACX;MACI,MAAMK,gBAAgB,GAAGrN,GAAG,CAAC,KAAK,CAAC;MACnC,MAAMsN,UAAU,GAAG,MAAMC,mBAAmB,CAACtN,OAAO,CAAC;MACrD,IAAIoN,gBAAgB,CAAClI,MAAM,KAAK,CAAC,EAAE;QAC/BmI,UAAU,EAAE;MAChB,CAAC,MACI;QACD7N,OAAO,CAAC+N,GAAG,CAACH,gBAAgB,CAAC,CAACP,IAAI,CAACQ,UAAU,CAAC;QAC9CrN,OAAO,CAAC1B,OAAO,IAAI,CAAC,CAAC;QACrB8O,gBAAgB,CAAClI,MAAM,GAAG,CAAC;MAC/B;IACJ;EACJ,CAAC;EAAA,gBAlCK4H,eAAe;IAAA;EAAA;AAAA,GAkCpB;AACD,MAAMI,UAAU,GAAG,CAAClN,OAAO,EAAEyM,QAAQ,EAAE1M,GAAG,KAAK;EAC3C,IAAI;IACA0M,QAAQ,GAAGA,QAAQ,CAACe,MAAM,EAAE;IAC5B;MACIxN,OAAO,CAAC1B,OAAO,IAAI,CAAC,EAAE,CAAC;IAC3B;;IACA;MACI0B,OAAO,CAAC1B,OAAO,IAAI,CAAC,CAAC;IACzB;;IACA;MACI;QACI;QACA;QACA;QACA;UACI6M,UAAU,CAACnL,OAAO,EAAEyM,QAAQ,CAAC;QACjC;MACJ;IACJ;EACJ,CAAC,CACD,OAAO5M,CAAC,EAAE;IACNqB,YAAY,CAACrB,CAAC,EAAEG,OAAO,CAACuD,aAAa,CAAC;EAC1C;EACA,OAAO,IAAI;AACf,CAAC;AACD,MAAM+J,mBAAmB,GAAItN,OAAO,IAAK;EACrC,MAAMsB,OAAO,GAAGtB,OAAO,CAACsD,SAAS,CAACG,SAAS;EAC3C,MAAM1D,GAAG,GAAGC,OAAO,CAACuD,aAAa;EACjC,MAAMkK,aAAa,GAAGrM,UAAU,CAAC,YAAY,EAAEE,OAAO,CAAC;EACvD,MAAMmL,QAAQ,GAAGzM,OAAO,CAACgB,cAAc;EACvC,MAAM+K,iBAAiB,GAAG/L,OAAO,CAACoM,mBAAmB;EACrD,IAAI,EAAEpM,OAAO,CAAC1B,OAAO,GAAG,EAAE,CAAC,yBAAyB,EAAE;IAClD0B,OAAO,CAAC1B,OAAO,IAAI,EAAE,CAAC;IACtB;MACI;MACAoP,eAAe,CAAC3N,GAAG,CAAC;IACxB;IACA;MACI6M,QAAQ,CAACH,QAAQ,EAAE,kBAAkB,CAAC;IAC1C;IACAgB,aAAa,EAAE;IACf;MACIzN,OAAO,CAAC2N,gBAAgB,CAAC5N,GAAG,CAAC;MAC7B,IAAI,CAACgM,iBAAiB,EAAE;QACpB6B,UAAU,EAAE;MAChB;IACJ;EACJ,CAAC,MACI;IACDH,aAAa,EAAE;EACnB;EACA;EACA;EACA;IACI,IAAIzN,OAAO,CAACgM,iBAAiB,EAAE;MAC3BhM,OAAO,CAACgM,iBAAiB,EAAE;MAC3BhM,OAAO,CAACgM,iBAAiB,GAAGvD,SAAS;IACzC;IACA,IAAIzI,OAAO,CAAC1B,OAAO,GAAG,GAAG,CAAC,qBAAqB;MAC3CuP,QAAQ,CAAC,MAAM3B,cAAc,CAAClM,OAAO,EAAE,KAAK,CAAC,CAAC;IAClD;IACAA,OAAO,CAAC1B,OAAO,IAAI,EAAE,CAAC,CAAC,6BAA6B,GAAG,CAAC,oBAAoB;EAChF;EACA;EACA;EACA;AACJ,CAAC;;AACD,MAAMsP,UAAU,GAAIE,GAAG,IAAK;EACxB;EACA;EACA;IACIJ,eAAe,CAACxP,GAAG,CAAC6P,eAAe,CAAC;EACxC;EACAF,QAAQ,CAAC,MAAMjC,SAAS,CAAC5N,GAAG,EAAE,SAAS,EAAE;IAAEgQ,MAAM,EAAE;MAAEC,SAAS,EAAEtQ;IAAU;EAAE,CAAC,CAAC,CAAC;AACnF,CAAC;AACD,MAAMiP,QAAQ,GAAG,CAACH,QAAQ,EAAEnM,MAAM,EAAE4N,GAAG,KAAK;EACxC,IAAIzB,QAAQ,IAAIA,QAAQ,CAACnM,MAAM,CAAC,EAAE;IAC9B,IAAI;MACA,OAAOmM,QAAQ,CAACnM,MAAM,CAAC,CAAC4N,GAAG,CAAC;IAChC,CAAC,CACD,OAAOrO,CAAC,EAAE;MACNqB,YAAY,CAACrB,CAAC,CAAC;IACnB;EACJ;EACA,OAAO4I,SAAS;AACpB,CAAC;AACD,MAAMoE,IAAI,GAAG,CAACH,OAAO,EAAEyB,MAAM,KAAK;EAC9B,OAAOzB,OAAO,IAAIA,OAAO,CAACG,IAAI,GAAGH,OAAO,CAACG,IAAI,CAACsB,MAAM,CAAC,GAAGA,MAAM,EAAE;AACpE,CAAC;AACD,MAAMT,eAAe,GAAI3N,GAAG,IAAKA,GAAG,CAAC8D,SAAS,CAACX,GAAG,CAAC,UAAU,CAAC;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkL,kBAAkB,GAAG,CAACC,SAAS,EAAEC,QAAQ,KAAK;EAChD;EACA,IAAID,SAAS,IAAI,IAAI,IAAI,CAAC/J,aAAa,CAAC+J,SAAS,CAAC,EAAE;IAChD,IAAIC,QAAQ,GAAG,CAAC,CAAC,eAAe;MAC5B;MACA;MACA,OAAOD,SAAS,KAAK,OAAO,GAAG,KAAK,GAAGA,SAAS,KAAK,EAAE,IAAI,CAAC,CAACA,SAAS;IAC1E;IACA,IAAIC,QAAQ,GAAG,CAAC,CAAC,cAAc;MAC3B;MACA,OAAOC,UAAU,CAACF,SAAS,CAAC;IAChC;IACA,IAAIC,QAAQ,GAAG,CAAC,CAAC,cAAc;MAC3B;MACA;MACA,OAAOjJ,MAAM,CAACgJ,SAAS,CAAC;IAC5B;IACA;IACA,OAAOA,SAAS;EACpB;EACA;EACA;EACA,OAAOA,SAAS;AACpB,CAAC;AACD,MAAMG,QAAQ,GAAG,CAACtD,GAAG,EAAEM,QAAQ,KAAKG,UAAU,CAACT,GAAG,CAAC,CAACuD,gBAAgB,CAACxM,GAAG,CAACuJ,QAAQ,CAAC;AAClF,MAAMkD,QAAQ,GAAG,CAACxD,GAAG,EAAEM,QAAQ,EAAEmD,MAAM,EAAEtM,OAAO,KAAK;EACjD;EACA,MAAMrC,OAAO,GAAG2L,UAAU,CAACT,GAAG,CAAC;EAC/B,MAAMnL,GAAG,GAAGC,OAAO,CAACuD,aAAa;EACjC,MAAMqL,MAAM,GAAG5O,OAAO,CAACyO,gBAAgB,CAACxM,GAAG,CAACuJ,QAAQ,CAAC;EACrD,MAAMpL,KAAK,GAAGJ,OAAO,CAAC1B,OAAO;EAC7B,MAAMmO,QAAQ,GAAGzM,OAAO,CAACgB,cAAc;EACvC2N,MAAM,GAAGP,kBAAkB,CAACO,MAAM,EAAEtM,OAAO,CAACwM,SAAS,CAACrD,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACnE;EACA,MAAMsD,UAAU,GAAGC,MAAM,CAACC,KAAK,CAACJ,MAAM,CAAC,IAAIG,MAAM,CAACC,KAAK,CAACL,MAAM,CAAC;EAC/D,MAAMM,cAAc,GAAGN,MAAM,KAAKC,MAAM,IAAI,CAACE,UAAU;EACvD,IAAI,CAAC,EAAE1O,KAAK,GAAG,CAAC,CAAC,6BAA6B,IAAIwO,MAAM,KAAKnG,SAAS,KAAKwG,cAAc,EAAE;IACvF;IACA;IACAjP,OAAO,CAACyO,gBAAgB,CAACvM,GAAG,CAACsJ,QAAQ,EAAEmD,MAAM,CAAC;IAC9C,IAAIlC,QAAQ,EAAE;MACV;MACA,IAAIpK,OAAO,CAAC6M,UAAU,IAAI9O,KAAK,GAAG,GAAG,CAAC,oBAAoB;QACtD,MAAM+O,YAAY,GAAG9M,OAAO,CAAC6M,UAAU,CAAC1D,QAAQ,CAAC;QACjD,IAAI2D,YAAY,EAAE;UACd;UACAA,YAAY,CAAChP,GAAG,CAAEiP,eAAe,IAAK;YAClC,IAAI;cACA;cACA3C,QAAQ,CAAC2C,eAAe,CAAC,CAACT,MAAM,EAAEC,MAAM,EAAEpD,QAAQ,CAAC;YACvD,CAAC,CACD,OAAO3L,CAAC,EAAE;cACNqB,YAAY,CAACrB,CAAC,EAAEE,GAAG,CAAC;YACxB;UACJ,CAAC,CAAC;QACN;MACJ;MACA,IAAI,CAACK,KAAK,IAAI,CAAC,CAAC,oBAAoB,EAAE,CAAC,wBAAwB,MAAM,CAAC,CAAC,mBAAmB;QACtF;QACA;QACA;QACA;QACA8L,cAAc,CAAClM,OAAO,EAAE,KAAK,CAAC;MAClC;IACJ;EACJ;AACJ,CAAC;AACD,MAAMqP,cAAc,GAAG,CAACC,IAAI,EAAEjN,OAAO,EAAEjC,KAAK,KAAK;EAC7C,IAAIiC,OAAO,CAACwM,SAAS,EAAE;IACnB,IAAIS,IAAI,CAACC,QAAQ,EAAE;MACflN,OAAO,CAAC6M,UAAU,GAAGI,IAAI,CAACC,QAAQ;IACtC;IACA;IACA,MAAMC,OAAO,GAAG7J,MAAM,CAAC8J,OAAO,CAACpN,OAAO,CAACwM,SAAS,CAAC;IACjD,MAAMa,SAAS,GAAGJ,IAAI,CAACI,SAAS;IAChCF,OAAO,CAACrP,GAAG,CAAC,CAAC,CAACwG,UAAU,EAAE,CAACgJ,WAAW,CAAC,CAAC,KAAK;MACzC,IAAKA,WAAW,GAAG,EAAE,CAAC,cACZvP,KAAK,GAAG,CAAC,CAAC,oBAAqBuP,WAAW,GAAG,EAAE,CAAC,WAAY,EAAG;QACrE;QACAhK,MAAM,CAACiK,cAAc,CAACF,SAAS,EAAE/I,UAAU,EAAE;UACzC1E,GAAG,GAAG;YACF;YACA,OAAOuM,QAAQ,CAAC,IAAI,EAAE7H,UAAU,CAAC;UACrC,CAAC;UACDzE,GAAG,CAAC2E,QAAQ,EAAE;YACV;YACA6H,QAAQ,CAAC,IAAI,EAAE/H,UAAU,EAAEE,QAAQ,EAAExE,OAAO,CAAC;UACjD,CAAC;UACDwN,YAAY,EAAE,IAAI;UAClBC,UAAU,EAAE;QAChB,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IACF,IAAK1P,KAAK,GAAG,CAAC,CAAC,4BAA6B;MACxC,MAAM2P,kBAAkB,GAAG,IAAIC,GAAG,EAAE;MACpCN,SAAS,CAACO,wBAAwB,GAAG,UAAUC,QAAQ,EAAEC,SAAS,EAAEtJ,QAAQ,EAAE;QAC1ExI,GAAG,CAACG,GAAG,CAAC,MAAM;UACV,MAAMgN,QAAQ,GAAGuE,kBAAkB,CAAC9N,GAAG,CAACiO,QAAQ,CAAC;UACjD;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,IAAI,IAAI,CAACE,cAAc,CAAC5E,QAAQ,CAAC,EAAE;YAC/B3E,QAAQ,GAAG,IAAI,CAAC2E,QAAQ,CAAC;YACzB,OAAO,IAAI,CAACA,QAAQ,CAAC;UACzB,CAAC,MACI,IAAIkE,SAAS,CAACU,cAAc,CAAC5E,QAAQ,CAAC,IACvC,OAAO,IAAI,CAACA,QAAQ,CAAC,KAAK,QAAQ,IAClC,IAAI,CAACA,QAAQ,CAAC,IAAI3E,QAAQ,EAAE;YAC5B;YACA;YACA;YACA;UACJ;UACA,IAAI,CAAC2E,QAAQ,CAAC,GAAG3E,QAAQ,KAAK,IAAI,IAAI,OAAO,IAAI,CAAC2E,QAAQ,CAAC,KAAK,SAAS,GAAG,KAAK,GAAG3E,QAAQ;QAChG,CAAC,CAAC;MACN,CAAC;MACD;MACA;MACAyI,IAAI,CAACe,kBAAkB,GAAGb,OAAO,CAC5B3J,MAAM,CAAC,CAAC,CAACyK,CAAC,EAAEpM,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,mBAAmB,CAAC;MAAA,CACjD/D,GAAG,CAAC,CAAC,CAACqL,QAAQ,EAAEtH,CAAC,CAAC,KAAK;QACxB,MAAMgM,QAAQ,GAAGhM,CAAC,CAAC,CAAC,CAAC,IAAIsH,QAAQ;QACjCuE,kBAAkB,CAAC7N,GAAG,CAACgO,QAAQ,EAAE1E,QAAQ,CAAC;QAC1C,IAAItH,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,mBAAmB;UAC9B7B,OAAO,CAACkJ,gBAAgB,CAAC1K,IAAI,CAAC,CAAC2K,QAAQ,EAAE0E,QAAQ,CAAC,CAAC;QACvD;QACA,OAAOA,QAAQ;MACnB,CAAC,CAAC;IACN;EACJ;EACA,OAAOZ,IAAI;AACf,CAAC;AACD,MAAMiB,mBAAmB;EAAA,8BAAG,WAAOxQ,GAAG,EAAEC,OAAO,EAAEqC,OAAO,EAAEmO,YAAY,EAAElB,IAAI,EAAK;IAC7E;IACA,IAAI,CAACtP,OAAO,CAAC1B,OAAO,GAAG,EAAE,CAAC,mCAAmC,CAAC,EAAE;MAC5D;QACI;QACA0B,OAAO,CAAC1B,OAAO,IAAI,EAAE,CAAC;QACtB;QACA;QACA;QACAgR,IAAI,GAAGmB,UAAU,CAACpO,OAAO,CAAC;QAC1B,IAAIiN,IAAI,CAACzC,IAAI,EAAE;UACX;UACA,MAAM6D,OAAO,GAAGnP,UAAU,EAAE;UAC5B+N,IAAI,SAASA,IAAI;UACjBoB,OAAO,EAAE;QACb;QACA,IAAI,CAACpB,IAAI,CAACqB,SAAS,EAAE;UACjB;UACA;UACA;UACA;YACItO,OAAO,CAAC6M,UAAU,GAAGI,IAAI,CAACC,QAAQ;UACtC;UACAF,cAAc,CAACC,IAAI,EAAEjN,OAAO,EAAE,CAAC,CAAC,iBAAiB;UACjDiN,IAAI,CAACqB,SAAS,GAAG,IAAI;QACzB;QACA,MAAMC,cAAc,GAAGxP,UAAU,CAAC,gBAAgB,EAAEiB,OAAO,CAACoB,SAAS,CAAC;QACtE;QACA;QACA;QACA;UACIzD,OAAO,CAAC1B,OAAO,IAAI,CAAC,CAAC;QACzB;QACA;QACA;QACA;QACA;QACA,IAAI;UACA,IAAIgR,IAAI,CAACtP,OAAO,CAAC;QACrB,CAAC,CACD,OAAOH,CAAC,EAAE;UACNqB,YAAY,CAACrB,CAAC,CAAC;QACnB;QACA;UACIG,OAAO,CAAC1B,OAAO,IAAI,CAAC,CAAC,CAAC;QAC1B;;QACA;UACI0B,OAAO,CAAC1B,OAAO,IAAI,GAAG,CAAC;QAC3B;;QACAsS,cAAc,EAAE;MACpB;MACA,IAAItB,IAAI,CAACvN,KAAK,EAAE;QACZ;QACA,IAAIA,KAAK,GAAGuN,IAAI,CAACvN,KAAK;QACtB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;UAC3BA,KAAK,GAAGA,KAAK,CAAE/B,OAAO,CAAC4D,UAAU,GAAGG,WAAW,CAAChE,GAAG,CAAC,CAAE;QAC1D;QACA,MAAMnC,OAAO,GAAG4E,UAAU,CAACH,OAAO,EAAErC,OAAO,CAAC4D,UAAU,CAAC;QACvD,IAAI,CAAC5B,MAAM,CAACa,GAAG,CAACjF,OAAO,CAAC,EAAE;UACtB,MAAMiT,iBAAiB,GAAGzP,UAAU,CAAC,gBAAgB,EAAEiB,OAAO,CAACoB,SAAS,CAAC;UACzE7B,aAAa,CAAChE,OAAO,EAAEmE,KAAK,EAAE,CAAC,EAAEM,OAAO,CAAC/D,OAAO,GAAG,CAAC,CAAC,6BAA6B,CAAC;UACnFuS,iBAAiB,EAAE;QACvB;MACJ;IACJ;IACA;IACA,MAAM9E,iBAAiB,GAAG/L,OAAO,CAACoM,mBAAmB;IACrD,MAAM0E,QAAQ,GAAG,MAAM5E,cAAc,CAAClM,OAAO,EAAE,IAAI,CAAC;IACpD,IAAI+L,iBAAiB,IAAIA,iBAAiB,CAAC,MAAM,CAAC,EAAE;MAChD;MACA;MACA;MACA;MACA;MACA;MACAA,iBAAiB,CAAC,MAAM,CAAC,CAAClL,IAAI,CAACiQ,QAAQ,CAAC;IAC5C,CAAC,MACI;MACDA,QAAQ,EAAE;IACd;EACJ,CAAC;EAAA,gBAhFKP,mBAAmB;IAAA;EAAA;AAAA,GAgFxB;AACD,MAAMQ,iBAAiB,GAAIhR,GAAG,IAAK;EAC/B,IAAI,CAAC1B,GAAG,CAACC,OAAO,GAAG,CAAC,CAAC,6BAA6B,CAAC,EAAE;IACjD,MAAM0B,OAAO,GAAG2L,UAAU,CAAC5L,GAAG,CAAC;IAC/B,MAAMsC,OAAO,GAAGrC,OAAO,CAACsD,SAAS;IACjC,MAAM0N,YAAY,GAAG5P,UAAU,CAAC,mBAAmB,EAAEiB,OAAO,CAACoB,SAAS,CAAC;IACvE,IAAI,EAAEzD,OAAO,CAAC1B,OAAO,GAAG,CAAC,CAAC,mBAAmB,EAAE;MAC3C;MACA0B,OAAO,CAAC1B,OAAO,IAAI,CAAC,CAAC;MACrB;QACI;QACA;QACA,IAAIyN,iBAAiB,GAAGhM,GAAG;QAC3B,OAAQgM,iBAAiB,GAAGA,iBAAiB,CAACtB,UAAU,IAAIsB,iBAAiB,CAACzD,IAAI,EAAG;UACjF;UACA;UACA,IAAIyD,iBAAiB,CAAC,KAAK,CAAC,EAAE;YAC1B;YACA;YACAD,gBAAgB,CAAC9L,OAAO,EAAGA,OAAO,CAACoM,mBAAmB,GAAGL,iBAAiB,CAAE;YAC5E;UACJ;QACJ;MACJ;MACA;MACA;MACA,IAAI1J,OAAO,CAACwM,SAAS,EAAE;QACnBlJ,MAAM,CAAC8J,OAAO,CAACpN,OAAO,CAACwM,SAAS,CAAC,CAAC1O,GAAG,CAAC,CAAC,CAACwG,UAAU,EAAE,CAACgJ,WAAW,CAAC,CAAC,KAAK;UACnE,IAAIA,WAAW,GAAG,EAAE,CAAC,cAAc5P,GAAG,CAACqQ,cAAc,CAACzJ,UAAU,CAAC,EAAE;YAC/D,MAAMsB,KAAK,GAAGlI,GAAG,CAAC4G,UAAU,CAAC;YAC7B,OAAO5G,GAAG,CAAC4G,UAAU,CAAC;YACtB5G,GAAG,CAAC4G,UAAU,CAAC,GAAGsB,KAAK;UAC3B;QACJ,CAAC,CAAC;MACN;MACA;QACIsI,mBAAmB,CAACxQ,GAAG,EAAEC,OAAO,EAAEqC,OAAO,CAAC;MAC9C;IACJ,CAAC,MACI;MACD;MACA;MACA;MACAvC,qBAAqB,CAACC,GAAG,EAAEC,OAAO,EAAEqC,OAAO,CAAC4O,WAAW,CAAC;IAC5D;IACAD,YAAY,EAAE;EAClB;AACJ,CAAC;AACD,MAAME,oBAAoB,GAAInR,GAAG,IAAK;EAClC,IAAI,CAAC1B,GAAG,CAACC,OAAO,GAAG,CAAC,CAAC,6BAA6B,CAAC,EAAE;IACjD,MAAM0B,OAAO,GAAG2L,UAAU,CAAC5L,GAAG,CAAC;IAC/B;MACI,IAAIC,OAAO,CAACY,aAAa,EAAE;QACvBZ,OAAO,CAACY,aAAa,CAACT,GAAG,CAAEgR,UAAU,IAAKA,UAAU,EAAE,CAAC;QACvDnR,OAAO,CAACY,aAAa,GAAG6H,SAAS;MACrC;IACJ;EACJ;AACJ,CAAC;AACD,MAAM2I,aAAa,GAAG,CAACC,WAAW,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACjD,MAAMC,YAAY,GAAGnQ,UAAU,EAAE;EACjC,MAAMoQ,OAAO,GAAG,EAAE;EAClB,MAAMC,OAAO,GAAGH,OAAO,CAACG,OAAO,IAAI,EAAE;EACrC,MAAMC,cAAc,GAAG1T,GAAG,CAAC0T,cAAc;EACzC,MAAMtT,IAAI,GAAGF,GAAG,CAACE,IAAI;EACrB,MAAMuT,WAAW,GAAG,aAAcvT,IAAI,CAAC6E,aAAa,CAAC,eAAe,CAAC;EACrE,MAAM2O,eAAe,GAAG,aAAc1T,GAAG,CAAC4E,aAAa,CAAC,OAAO,CAAC;EAChE,MAAM+O,0BAA0B,GAAG,EAAE;EACrC,IAAIC,eAAe;EACnB,IAAIC,eAAe,GAAG,IAAI;EAC1BpM,MAAM,CAACqM,MAAM,CAAC3T,GAAG,EAAEiT,OAAO,CAAC;EAC3BjT,GAAG,CAACE,cAAc,GAAG,IAAI0T,GAAG,CAACX,OAAO,CAACY,YAAY,IAAI,IAAI,EAAEhU,GAAG,CAACiU,OAAO,CAAC,CAACC,IAAI;EAC5Ef,WAAW,CAAClR,GAAG,CAAEkS,UAAU,IAAK;IAC5BA,UAAU,CAAC,CAAC,CAAC,CAAClS,GAAG,CAAEmS,WAAW,IAAK;MAC/B,MAAMjQ,OAAO,GAAG;QACZ/D,OAAO,EAAEgU,WAAW,CAAC,CAAC,CAAC;QACvB7O,SAAS,EAAE6O,WAAW,CAAC,CAAC,CAAC;QACzBzD,SAAS,EAAEyD,WAAW,CAAC,CAAC,CAAC;QACzBrB,WAAW,EAAEqB,WAAW,CAAC,CAAC;MAC9B,CAAC;MACD;QACIjQ,OAAO,CAACwM,SAAS,GAAGyD,WAAW,CAAC,CAAC,CAAC;MACtC;MACA;QACIjQ,OAAO,CAAC4O,WAAW,GAAGqB,WAAW,CAAC,CAAC,CAAC;MACxC;MACA;QACIjQ,OAAO,CAACkJ,gBAAgB,GAAG,EAAE;MACjC;MACA;QACIlJ,OAAO,CAAC6M,UAAU,GAAG,CAAC,CAAC;MAC3B;MACA,MAAM5N,OAAO,GAAGe,OAAO,CAACoB,SAAS;MACjC,MAAM8O,WAAW,GAAG,cAAcC,WAAW,CAAC;QAC1C;QACAC,WAAW,CAACC,IAAI,EAAE;UACd;UACA,KAAK,CAACA,IAAI,CAAC;UACXA,IAAI,GAAG,IAAI;UACXC,YAAY,CAACD,IAAI,EAAErQ,OAAO,CAAC;UAC3B,IAAIA,OAAO,CAAC/D,OAAO,GAAG,CAAC,CAAC,8BAA8B;YAClD;YACA;YACA;YACA;YACA;cACI;gBACIoU,IAAI,CAACE,YAAY,CAAC;kBAAEtQ,IAAI,EAAE;gBAAO,CAAC,CAAC;cACvC;YACJ;UACJ;QACJ;QACAyO,iBAAiB,GAAG;UAChB,IAAIe,eAAe,EAAE;YACjBe,YAAY,CAACf,eAAe,CAAC;YAC7BA,eAAe,GAAG,IAAI;UAC1B;UACA,IAAIC,eAAe,EAAE;YACjB;YACAF,0BAA0B,CAAChR,IAAI,CAAC,IAAI,CAAC;UACzC,CAAC,MACI;YACDxC,GAAG,CAACG,GAAG,CAAC,MAAMuS,iBAAiB,CAAC,IAAI,CAAC,CAAC;UAC1C;QACJ;QACAG,oBAAoB,GAAG;UACnB7S,GAAG,CAACG,GAAG,CAAC,MAAM0S,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC7C;QACA4B,gBAAgB,GAAG;UACf,OAAOnH,UAAU,CAAC,IAAI,CAAC,CAACoH,gBAAgB;QAC5C;MACJ,CAAC;MACD1Q,OAAO,CAAC2Q,cAAc,GAAGX,UAAU,CAAC,CAAC,CAAC;MACtC,IAAI,CAACZ,OAAO,CAACrO,QAAQ,CAAC9B,OAAO,CAAC,IAAI,CAACoQ,cAAc,CAACzP,GAAG,CAACX,OAAO,CAAC,EAAE;QAC5DkQ,OAAO,CAAC3Q,IAAI,CAACS,OAAO,CAAC;QACrBoQ,cAAc,CAACuB,MAAM,CAAC3R,OAAO,EAAE+N,cAAc,CAACkD,WAAW,EAAElQ,OAAO,EAAE,CAAC,CAAC,2BAA2B,CAAC;MACtG;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;;EACF;IACIuP,eAAe,CAAC7O,SAAS,GAAGyO,OAAO,GAAGrQ,YAAY;IAClDyQ,eAAe,CAAC7J,YAAY,CAAC,aAAa,EAAE,EAAE,CAAC;IAC/C3J,IAAI,CAAC4E,YAAY,CAAC4O,eAAe,EAAED,WAAW,GAAGA,WAAW,CAACnH,WAAW,GAAGpM,IAAI,CAAC8U,UAAU,CAAC;EAC/F;EACA;EACAnB,eAAe,GAAG,KAAK;EACvB,IAAIF,0BAA0B,CAAC3M,MAAM,EAAE;IACnC2M,0BAA0B,CAAC1R,GAAG,CAAEmI,IAAI,IAAKA,IAAI,CAACyI,iBAAiB,EAAE,CAAC;EACtE,CAAC,MACI;IACD;MACI1S,GAAG,CAACG,GAAG,CAAC,MAAOsT,eAAe,GAAGqB,UAAU,CAACvF,UAAU,EAAE,EAAE,CAAE,CAAC;IACjE;EACJ;EACA;EACA2D,YAAY,EAAE;AAClB,CAAC;AACD,MAAM6B,QAAQ,GAAG,IAAIzR,OAAO,EAAE;AAC9B,MAAMgK,UAAU,GAAIT,GAAG,IAAKkI,QAAQ,CAACnR,GAAG,CAACiJ,GAAG,CAAC;AAC7C,MAAMmI,gBAAgB,GAAG,CAACC,YAAY,EAAEtT,OAAO,KAAKoT,QAAQ,CAAClR,GAAG,CAAElC,OAAO,CAACgB,cAAc,GAAGsS,YAAY,EAAGtT,OAAO,CAAC;AAClH,MAAM2S,YAAY,GAAG,CAAC5S,GAAG,EAAEsC,OAAO,KAAK;EACnC,MAAMrC,OAAO,GAAG;IACZ1B,OAAO,EAAE,CAAC;IACViF,aAAa,EAAExD,GAAG;IAClBuD,SAAS,EAAEjB,OAAO;IAClBoM,gBAAgB,EAAE,IAAIuB,GAAG;EAC7B,CAAC;EACD;IACIhQ,OAAO,CAAC+S,gBAAgB,GAAG,IAAIvT,OAAO,CAAEyM,CAAC,IAAMjM,OAAO,CAAC2N,gBAAgB,GAAG1B,CAAE,CAAC;IAC7ElM,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE;IACfA,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE;EACpB;EACAD,qBAAqB,CAACC,GAAG,EAAEC,OAAO,EAAEqC,OAAO,CAAC4O,WAAW,CAAC;EACxD,OAAOmC,QAAQ,CAAClR,GAAG,CAACnC,GAAG,EAAEC,OAAO,CAAC;AACrC,CAAC;AACD,MAAMgH,iBAAiB,GAAG,CAACjH,GAAG,EAAE4G,UAAU,KAAKA,UAAU,IAAI5G,GAAG;AAChE,MAAMmB,YAAY,GAAG,CAACrB,CAAC,EAAEhB,EAAE,KAAK,CAAC,CAAC,EAAE0U,OAAO,CAACC,KAAK,EAAE3T,CAAC,EAAEhB,EAAE,CAAC;AACzD,MAAM4U,UAAU,GAAG,aAAc,IAAIzD,GAAG,EAAE;AAC1C,MAAMS,UAAU,GAAG,CAACpO,OAAO,EAAErC,OAAO,EAAEwQ,YAAY,KAAK;EACnD;EACA,MAAMkD,UAAU,GAAGrR,OAAO,CAACoB,SAAS,CAACkQ,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EACvD,MAAMC,QAAQ,GAAGvR,OAAO,CAAC2Q,cAAc;EACvC,MAAMa,MAAM,GAAGJ,UAAU,CAACxR,GAAG,CAAC2R,QAAQ,CAAC;EACvC,IAAIC,MAAM,EAAE;IACR,OAAOA,MAAM,CAACH,UAAU,CAAC;EAC7B;EACA;EACA,OAAO,MAAM,EACb;EACA;EACA;EACA;EACC,KAAIE,QAAS,YAAW,EAAG,EAAC,CAAC,CAAC/G,IAAI,CAAEiH,cAAc,IAAK;IACpD;MACIL,UAAU,CAACvR,GAAG,CAAC0R,QAAQ,EAAEE,cAAc,CAAC;IAC5C;IACA,OAAOA,cAAc,CAACJ,UAAU,CAAC;EACrC,CAAC,EAAExS,YAAY,CAAC;AACpB,CAAC;AACD,MAAMc,MAAM,GAAG,IAAIgO,GAAG,EAAE;AACxB,MAAMhM,mBAAmB,GAAG,EAAE;AAC9B,MAAM+P,aAAa,GAAG,EAAE;AACxB,MAAMC,cAAc,GAAG,EAAE;AACzB,MAAMC,SAAS,GAAG,CAACC,KAAK,EAAEC,KAAK,KAAMhH,EAAE,IAAK;EACxC+G,KAAK,CAACrT,IAAI,CAACsM,EAAE,CAAC;EACd,IAAI,CAACpP,YAAY,EAAE;IACfA,YAAY,GAAG,IAAI;IACnB,IAAIoW,KAAK,IAAI9V,GAAG,CAACC,OAAO,GAAG,CAAC,CAAC,iBAAiB;MAC1CuP,QAAQ,CAACuG,KAAK,CAAC;IACnB,CAAC,MACI;MACD/V,GAAG,CAACK,GAAG,CAAC0V,KAAK,CAAC;IAClB;EACJ;AACJ,CAAC;AACD,MAAMC,OAAO,GAAIH,KAAK,IAAK;EACvB,KAAK,IAAIjP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiP,KAAK,CAAChP,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAI;MACAiP,KAAK,CAACjP,CAAC,CAAC,CAACqP,WAAW,CAACC,GAAG,EAAE,CAAC;IAC/B,CAAC,CACD,OAAO1U,CAAC,EAAE;MACNqB,YAAY,CAACrB,CAAC,CAAC;IACnB;EACJ;EACAqU,KAAK,CAAChP,MAAM,GAAG,CAAC;AACpB,CAAC;AACD,MAAMkP,KAAK,GAAG,MAAM;EAChB;EACA;EACA;EACAC,OAAO,CAACN,aAAa,CAAC;EACtB;EACA;IACIM,OAAO,CAACL,cAAc,CAAC;IACvB,IAAKjW,YAAY,GAAGgW,aAAa,CAAC7O,MAAM,GAAG,CAAC,EAAG;MAC3C;MACA;MACA7G,GAAG,CAACK,GAAG,CAAC0V,KAAK,CAAC;IAClB;EACJ;AACJ,CAAC;AACD,MAAMvG,QAAQ,GAAG,aAAeV,EAAE,IAAK7N,cAAc,EAAE,CAACuN,IAAI,CAACM,EAAE,CAAC;AAChE,MAAMZ,SAAS,GAAG,aAAc0H,SAAS,CAACD,cAAc,EAAE,IAAI,CAAC;AAE/D,SAASzN,IAAI,IAAIiO,CAAC,EAAEpD,aAAa,IAAIqD,CAAC,EAAE/I,UAAU,IAAIgJ,CAAC,EAAEjW,CAAC,EAAEa,cAAc,IAAIqV,CAAC,EAAEtB,gBAAgB,IAAIpH,CAAC,EAAE9H,OAAO,IAAIyQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}