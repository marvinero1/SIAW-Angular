{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nimport { HandsontableEditor } from \"../handsontableEditor/index.mjs\";\nimport { arrayMap, pivot } from \"../../helpers/array.mjs\";\nimport { addClass, getCaretPosition, getScrollbarWidth, getSelectionEndPosition, getTrimmingContainer, offset, outerHeight, outerWidth, setAttribute, setCaretPosition } from \"../../helpers/dom/element.mjs\";\nimport { isDefined, stringify } from \"../../helpers/mixed.mjs\";\nimport { stripTags } from \"../../helpers/string.mjs\";\nimport { KEY_CODES, isPrintableChar } from \"../../helpers/unicode.mjs\";\nimport { isMacOS } from \"../../helpers/browser.mjs\";\nimport { textRenderer } from \"../../renderers/textRenderer/index.mjs\";\nimport { A11Y_ACTIVEDESCENDANT, A11Y_AUTOCOMPLETE, A11Y_COMBOBOX, A11Y_CONTROLS, A11Y_EXPANDED, A11Y_HASPOPUP, A11Y_LISTBOX, A11Y_LIVE, A11Y_OPTION, A11Y_POSINSET, A11Y_PRESENTATION, A11Y_RELEVANT, A11Y_SELECTED, A11Y_SETSIZE, A11Y_TEXT } from \"../../helpers/a11y.mjs\";\nexport const EDITOR_TYPE = 'autocomplete';\n\n/**\n * @private\n * @class AutocompleteEditor\n */\nvar _idPrefix = /*#__PURE__*/new WeakMap();\nexport class AutocompleteEditor extends HandsontableEditor {\n  constructor() {\n    super(...arguments);\n    /**\n     * Query string to turn available values over.\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"query\", null);\n    /**\n     * Contains stripped choices.\n     *\n     * @type {string[]}\n     */\n    _defineProperty(this, \"strippedChoices\", []);\n    /**\n     * Contains raw choices.\n     *\n     * @type {Array}\n     */\n    _defineProperty(this, \"rawChoices\", []);\n    /**\n     * Holds the prefix of the editor's id.\n     *\n     * @type {string}\n     */\n    _classPrivateFieldInitSpec(this, _idPrefix, {\n      writable: true,\n      value: this.hot.guid.slice(0, 9)\n    });\n    /**\n     * Filters and sorts by relevance.\n     *\n     * @param {*} value The selected value.\n     * @param {string[]} choices The list of available choices.\n     * @param {boolean} caseSensitive Indicates if it's sorted by case.\n     * @returns {number[]} Array of indexes in original choices array.\n     */\n    _defineProperty(this, \"sortByRelevance\", function (value, choices, caseSensitive) {\n      const choicesRelevance = [];\n      const result = [];\n      const valueLength = value.length;\n      let choicesCount = choices.length;\n      let charsLeft;\n      let currentItem;\n      let i;\n      let valueIndex;\n      if (valueLength === 0) {\n        for (i = 0; i < choicesCount; i++) {\n          result.push(i);\n        }\n        return result;\n      }\n      for (i = 0; i < choicesCount; i++) {\n        currentItem = stripTags(stringify(choices[i]));\n        if (caseSensitive) {\n          valueIndex = currentItem.indexOf(value);\n        } else {\n          const locale = this.cellProperties.locale;\n          valueIndex = currentItem.toLocaleLowerCase(locale).indexOf(value.toLocaleLowerCase(locale));\n        }\n        if (valueIndex !== -1) {\n          charsLeft = currentItem.length - valueIndex - valueLength;\n          choicesRelevance.push({\n            baseIndex: i,\n            index: valueIndex,\n            charsLeft,\n            value: currentItem\n          });\n        }\n      }\n      choicesRelevance.sort((a, b) => {\n        if (b.index === -1) {\n          return -1;\n        }\n        if (a.index === -1) {\n          return 1;\n        }\n        if (a.index < b.index) {\n          return -1;\n        } else if (b.index < a.index) {\n          return 1;\n        } else if (a.index === b.index) {\n          if (a.charsLeft < b.charsLeft) {\n            return -1;\n          } else if (a.charsLeft > b.charsLeft) {\n            return 1;\n          }\n        }\n        return 0;\n      });\n      for (i = 0, choicesCount = choicesRelevance.length; i < choicesCount; i++) {\n        result.push(choicesRelevance[i].baseIndex);\n      }\n      return result;\n    });\n  }\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n  /**\n   * Gets current value from editable element.\n   *\n   * @returns {string}\n   */\n  getValue() {\n    const selectedValue = this.rawChoices.find(value => {\n      const strippedValue = this.stripValueIfNeeded(value);\n      return strippedValue === this.TEXTAREA.value;\n    });\n    if (isDefined(selectedValue)) {\n      return selectedValue;\n    }\n    return this.TEXTAREA.value;\n  }\n\n  /**\n   * Creates an editor's elements and adds necessary CSS classnames.\n   */\n  createElements() {\n    super.createElements();\n    addClass(this.htContainer, 'autocompleteEditor');\n    addClass(this.htContainer, this.hot.rootWindow.navigator.platform.indexOf('Mac') === -1 ? '' : 'htMacScroll');\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_TEXT(), A11Y_COMBOBOX(), A11Y_HASPOPUP('listbox'), A11Y_AUTOCOMPLETE()]);\n    }\n  }\n\n  /**\n   * Prepares editor's metadata and configuration of the internal Handsontable's instance.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_EXPANDED('false'), A11Y_CONTROLS(`${_classPrivateFieldGet(this, _idPrefix)}-listbox-${row}-${col}`)]);\n    }\n  }\n\n  /**\n   * Opens the editor and adjust its size and internal Handsontable's instance.\n   */\n  open() {\n    super.open();\n    const trimDropdown = this.cellProperties.trimDropdown === undefined ? true : this.cellProperties.trimDropdown;\n    const rootInstanceAriaTagsEnabled = this.hot.getSettings().ariaTags;\n    const sourceArray = Array.isArray(this.cellProperties.source) ? this.cellProperties.source : null;\n    const sourceSize = sourceArray === null || sourceArray === void 0 ? void 0 : sourceArray.length;\n    const {\n      row: rowIndex,\n      col: colIndex\n    } = this;\n    this.showEditableElement();\n    this.focus();\n    let scrollbarWidth = getScrollbarWidth();\n    if (scrollbarWidth === 0 && isMacOS()) {\n      scrollbarWidth += 15; // default scroll bar width if scroll bars are visible only when scrolling\n    }\n\n    this.addHook('beforeKeyDown', event => this.onBeforeKeyDown(event));\n    this.htEditor.updateSettings({\n      colWidths: trimDropdown ? [outerWidth(this.TEXTAREA) - 2] : undefined,\n      width: trimDropdown ? outerWidth(this.TEXTAREA) + scrollbarWidth : undefined,\n      autoColumnSize: true,\n      renderer: (hotInstance, TD, row, col, prop, value, cellProperties) => {\n        textRenderer(hotInstance, TD, row, col, prop, value, cellProperties);\n        const {\n          filteringCaseSensitive,\n          allowHtml,\n          locale\n        } = this.cellProperties;\n        const query = this.query;\n        let cellValue = stringify(value);\n        let indexOfMatch;\n        let match;\n        if (cellValue && !allowHtml) {\n          indexOfMatch = filteringCaseSensitive === true ? cellValue.indexOf(query) : cellValue.toLocaleLowerCase(locale).indexOf(query.toLocaleLowerCase(locale));\n          if (indexOfMatch !== -1) {\n            match = cellValue.substr(indexOfMatch, query.length);\n            cellValue = cellValue.replace(match, `<strong>${match}</strong>`);\n          }\n        }\n        if (rootInstanceAriaTagsEnabled) {\n          setAttribute(TD, [A11Y_OPTION(),\n          // Add `setsize` and `posinset` only if the source is an array.\n          ...(sourceArray ? [A11Y_SETSIZE(sourceSize)] : []), ...(sourceArray ? [A11Y_POSINSET(sourceArray.indexOf(value) + 1)] : []), ['id', `${this.htEditor.rootElement.id}_${row}-${col}`]]);\n        }\n        TD.innerHTML = cellValue;\n      },\n      afterSelection: (startRow, startCol) => {\n        if (rootInstanceAriaTagsEnabled) {\n          const TD = this.htEditor.getCell(startRow, startCol, true);\n          setAttribute(TD, [A11Y_SELECTED()]);\n          setAttribute(this.TEXTAREA, ...A11Y_ACTIVEDESCENDANT(TD.id));\n        }\n      }\n    });\n    if (rootInstanceAriaTagsEnabled) {\n      // Add `role=presentation` to the main table to prevent the readers from treating the option list as a table.\n      setAttribute(this.htEditor.view._wt.wtOverlays.wtTable.TABLE, ...A11Y_PRESENTATION());\n      setAttribute(this.htEditor.rootElement, [A11Y_LISTBOX(), A11Y_LIVE('polite'), A11Y_RELEVANT('text'), ['id', `${_classPrivateFieldGet(this, _idPrefix)}-listbox-${rowIndex}-${colIndex}`]]);\n      setAttribute(this.TEXTAREA, ...A11Y_EXPANDED('true'));\n    }\n    this.hot._registerTimeout(() => {\n      this.queryChoices(this.TEXTAREA.value);\n    });\n  }\n\n  /**\n   * Closes the editor.\n   */\n  close() {\n    this.removeHooksByKey('beforeKeyDown');\n    super.close();\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_EXPANDED('false')]);\n    }\n  }\n\n  /**\n   * Verifies result of validation or closes editor if user's cancelled changes.\n   *\n   * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,\n   *                                   then an editor won't be closed until validation is passed.\n   */\n  discardEditor(result) {\n    super.discardEditor(result);\n    this.hot.view.render();\n  }\n\n  /**\n   * Prepares choices list based on applied argument.\n   *\n   * @private\n   * @param {string} query The query.\n   */\n  queryChoices(query) {\n    const source = this.cellProperties.source;\n    this.query = query;\n    if (typeof source === 'function') {\n      source.call(this.cellProperties, query, choices => {\n        this.rawChoices = choices;\n        this.updateChoicesList(this.stripValuesIfNeeded(choices));\n      });\n    } else if (Array.isArray(source)) {\n      this.rawChoices = source;\n      this.updateChoicesList(this.stripValuesIfNeeded(source));\n    } else {\n      this.updateChoicesList([]);\n    }\n  }\n\n  /**\n   * Updates list of the possible completions to choose.\n   *\n   * @private\n   * @param {Array} choicesList The choices list to process.\n   */\n  updateChoicesList(choicesList) {\n    const pos = getCaretPosition(this.TEXTAREA);\n    const endPos = getSelectionEndPosition(this.TEXTAREA);\n    const sortByRelevanceSetting = this.cellProperties.sortByRelevance;\n    const filterSetting = this.cellProperties.filter;\n    let orderByRelevance = null;\n    let highlightIndex = null;\n    let choices = choicesList;\n    if (sortByRelevanceSetting) {\n      orderByRelevance = this.sortByRelevance(this.stripValueIfNeeded(this.getValue()), choices, this.cellProperties.filteringCaseSensitive);\n    }\n    const orderByRelevanceLength = Array.isArray(orderByRelevance) ? orderByRelevance.length : 0;\n    if (filterSetting === false) {\n      if (orderByRelevanceLength) {\n        highlightIndex = orderByRelevance[0];\n      }\n    } else {\n      const sorted = [];\n      for (let i = 0, choicesCount = choices.length; i < choicesCount; i++) {\n        if (sortByRelevanceSetting && orderByRelevanceLength <= i) {\n          break;\n        }\n        if (orderByRelevanceLength) {\n          sorted.push(choices[orderByRelevance[i]]);\n        } else {\n          sorted.push(choices[i]);\n        }\n      }\n      highlightIndex = 0;\n      choices = sorted;\n    }\n    this.strippedChoices = choices;\n    this.htEditor.loadData(pivot([choices]));\n    if (choices.length === 0) {\n      this.htEditor.rootElement.style.display = 'none';\n    } else {\n      this.htEditor.rootElement.style.display = '';\n      this.updateDropdownHeight();\n      this.flipDropdownIfNeeded();\n      if (this.cellProperties.strict === true) {\n        this.highlightBestMatchingChoice(highlightIndex);\n      }\n    }\n    this.hot.listen();\n    setCaretPosition(this.TEXTAREA, pos, pos === endPos ? undefined : endPos);\n  }\n\n  /**\n   * Checks where is enough place to open editor.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  flipDropdownIfNeeded() {\n    const trimmingContainer = getTrimmingContainer(this.hot.view._wt.wtTable.TABLE);\n    const isWindowAsScrollableElement = trimmingContainer === this.hot.rootWindow;\n    const preventOverflow = this.cellProperties.preventOverflow;\n    if (isWindowAsScrollableElement || !isWindowAsScrollableElement && (preventOverflow || preventOverflow === 'horizontal')) {\n      return false;\n    }\n    const textareaOffset = offset(this.TEXTAREA);\n    const textareaHeight = outerHeight(this.TEXTAREA);\n    const dropdownHeight = this.getDropdownHeight();\n    const trimmingContainerScrollTop = trimmingContainer.scrollTop;\n    const headersHeight = outerHeight(this.hot.view._wt.wtTable.THEAD);\n    const containerOffset = offset(trimmingContainer);\n    const spaceAbove = textareaOffset.top - containerOffset.top - headersHeight + trimmingContainerScrollTop;\n    const spaceBelow = trimmingContainer.scrollHeight - spaceAbove - headersHeight - textareaHeight;\n    const flipNeeded = dropdownHeight > spaceBelow && spaceAbove > spaceBelow;\n    if (flipNeeded) {\n      this.flipDropdown(dropdownHeight);\n    } else {\n      this.unflipDropdown();\n    }\n    this.limitDropdownIfNeeded(flipNeeded ? spaceAbove : spaceBelow, dropdownHeight);\n    return flipNeeded;\n  }\n\n  /**\n   * Checks if the internal table should generate scrollbar or could be rendered without it.\n   *\n   * @private\n   * @param {number} spaceAvailable The free space as height defined in px available for dropdown list.\n   * @param {number} dropdownHeight The dropdown height.\n   */\n  limitDropdownIfNeeded(spaceAvailable, dropdownHeight) {\n    if (dropdownHeight > spaceAvailable) {\n      let tempHeight = 0;\n      let i = 0;\n      let lastRowHeight = 0;\n      let height = null;\n      do {\n        lastRowHeight = this.htEditor.getRowHeight(i) || this.htEditor.view._wt.getSetting('defaultRowHeight');\n        tempHeight += lastRowHeight;\n        i += 1;\n      } while (tempHeight < spaceAvailable);\n      height = tempHeight - lastRowHeight;\n      if (this.htEditor.flipped) {\n        this.htEditor.rootElement.style.top = `${parseInt(this.htEditor.rootElement.style.top, 10) + dropdownHeight - height}px`; // eslint-disable-line max-len\n      }\n\n      this.setDropdownHeight(tempHeight - lastRowHeight);\n    }\n  }\n\n  /**\n   * Configures editor to open it at the top.\n   *\n   * @private\n   * @param {number} dropdownHeight The dropdown height.\n   */\n  flipDropdown(dropdownHeight) {\n    const dropdownStyle = this.htEditor.rootElement.style;\n    dropdownStyle.position = 'absolute';\n    dropdownStyle.top = `${-dropdownHeight}px`;\n    this.htEditor.flipped = true;\n  }\n\n  /**\n   * Configures editor to open it at the bottom.\n   *\n   * @private\n   */\n  unflipDropdown() {\n    const dropdownStyle = this.htEditor.rootElement.style;\n    dropdownStyle.position = 'absolute';\n    dropdownStyle.top = '';\n    this.htEditor.flipped = undefined;\n  }\n\n  /**\n   * Updates width and height of the internal Handsontable's instance.\n   *\n   * @private\n   */\n  updateDropdownHeight() {\n    const currentDropdownWidth = this.htEditor.getColWidth(0) + getScrollbarWidth(this.hot.rootDocument) + 2;\n    const trimDropdown = this.cellProperties.trimDropdown;\n    this.htEditor.updateSettings({\n      height: this.getDropdownHeight(),\n      width: trimDropdown ? undefined : currentDropdownWidth\n    });\n    this.htEditor.view._wt.wtTable.alignOverlaysWithTrimmingContainer();\n  }\n\n  /**\n   * Sets new height of the internal Handsontable's instance.\n   *\n   * @private\n   * @param {number} height The new dropdown height.\n   */\n  setDropdownHeight(height) {\n    this.htEditor.updateSettings({\n      height\n    });\n  }\n\n  /**\n   * Creates new selection on specified row index, or deselects selected cells.\n   *\n   * @private\n   * @param {number|undefined} index The visual row index.\n   */\n  highlightBestMatchingChoice(index) {\n    if (typeof index === 'number') {\n      this.htEditor.selectCell(index, 0, undefined, undefined, undefined, false);\n    } else {\n      this.htEditor.deselectCell();\n    }\n  }\n\n  /**\n   * Calculates and return the internal Handsontable's height.\n   *\n   * @private\n   * @returns {number}\n   */\n  getDropdownHeight() {\n    const firstRowHeight = this.htEditor.getRowHeight(0) || 23;\n    const visibleRows = this.cellProperties.visibleRows;\n    return this.strippedChoices.length >= visibleRows ? visibleRows * firstRowHeight : this.strippedChoices.length * firstRowHeight + 8; // eslint-disable-line max-len\n  }\n\n  /**\n   * Sanitizes value from potential dangerous tags.\n   *\n   * @private\n   * @param {string} value The value to sanitize.\n   * @returns {string}\n   */\n  stripValueIfNeeded(value) {\n    return this.stripValuesIfNeeded([value])[0];\n  }\n\n  /**\n   * Sanitizes an array of the values from potential dangerous tags.\n   *\n   * @private\n   * @param {string[]} values The value to sanitize.\n   * @returns {string[]}\n   */\n  stripValuesIfNeeded(values) {\n    const {\n      allowHtml\n    } = this.cellProperties;\n    const stringifiedValues = arrayMap(values, value => stringify(value));\n    const strippedValues = arrayMap(stringifiedValues, value => allowHtml ? value : stripTags(value));\n    return strippedValues;\n  }\n\n  /**\n   * Captures use of arrow down and up to control their behaviour.\n   *\n   * @private\n   * @param {number} keyCode The keyboard keycode.\n   * @returns {boolean}\n   */\n  allowKeyEventPropagation(keyCode) {\n    const selectedRange = this.htEditor.getSelectedRangeLast();\n    const selected = {\n      row: selectedRange ? selectedRange.from.row : -1\n    };\n    let allowed = false;\n    if (keyCode === KEY_CODES.ARROW_DOWN && selected.row > 0 && selected.row < this.htEditor.countRows() - 1) {\n      allowed = true;\n    }\n    if (keyCode === KEY_CODES.ARROW_UP && selected.row > -1) {\n      allowed = true;\n    }\n    return allowed;\n  }\n\n  /**\n   * OnBeforeKeyDown callback.\n   *\n   * @private\n   * @param {KeyboardEvent} event The keyboard event object.\n   */\n  onBeforeKeyDown(event) {\n    if (isPrintableChar(event.keyCode) || event.keyCode === KEY_CODES.BACKSPACE || event.keyCode === KEY_CODES.DELETE || event.keyCode === KEY_CODES.INSERT) {\n      // for Windows 10 + FF86 there is need to add delay to make sure that the value taken from\n      // the textarea is the freshest value. Otherwise the list of choices does not update correctly (see #7570).\n      // On the more modern version of the FF (~ >=91) it seems that the issue is not present or it is\n      // more difficult to induce.\n      let timeOffset = 10;\n\n      // on ctl+c / cmd+c don't update suggestion list\n      if (event.keyCode === KEY_CODES.C && (event.ctrlKey || event.metaKey)) {\n        return;\n      }\n      if (!this.isOpened()) {\n        timeOffset += 10;\n      }\n      if (this.htEditor) {\n        this.hot._registerTimeout(() => {\n          this.queryChoices(this.TEXTAREA.value);\n        }, timeOffset);\n      }\n    }\n  }\n}","map":{"version":3,"names":["_classPrivateFieldInitSpec","obj","privateMap","value","_checkPrivateRedeclaration","set","privateCollection","has","TypeError","_defineProperty","key","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","Number","_classPrivateFieldGet","receiver","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorGet","action","get","HandsontableEditor","arrayMap","pivot","addClass","getCaretPosition","getScrollbarWidth","getSelectionEndPosition","getTrimmingContainer","offset","outerHeight","outerWidth","setAttribute","setCaretPosition","isDefined","stringify","stripTags","KEY_CODES","isPrintableChar","isMacOS","textRenderer","A11Y_ACTIVEDESCENDANT","A11Y_AUTOCOMPLETE","A11Y_COMBOBOX","A11Y_CONTROLS","A11Y_EXPANDED","A11Y_HASPOPUP","A11Y_LISTBOX","A11Y_LIVE","A11Y_OPTION","A11Y_POSINSET","A11Y_PRESENTATION","A11Y_RELEVANT","A11Y_SELECTED","A11Y_SETSIZE","A11Y_TEXT","EDITOR_TYPE","_idPrefix","WeakMap","AutocompleteEditor","constructor","arguments","hot","guid","slice","choices","caseSensitive","choicesRelevance","result","valueLength","length","choicesCount","charsLeft","currentItem","valueIndex","push","indexOf","locale","cellProperties","toLocaleLowerCase","baseIndex","index","sort","a","b","getValue","selectedValue","rawChoices","find","strippedValue","stripValueIfNeeded","TEXTAREA","createElements","htContainer","rootWindow","navigator","platform","getSettings","ariaTags","prepare","row","col","prop","td","open","trimDropdown","undefined","rootInstanceAriaTagsEnabled","sourceArray","Array","isArray","source","sourceSize","rowIndex","colIndex","showEditableElement","focus","scrollbarWidth","addHook","event","onBeforeKeyDown","htEditor","updateSettings","colWidths","width","autoColumnSize","renderer","hotInstance","TD","filteringCaseSensitive","allowHtml","query","cellValue","indexOfMatch","match","substr","replace","rootElement","id","innerHTML","afterSelection","startRow","startCol","getCell","view","_wt","wtOverlays","wtTable","TABLE","_registerTimeout","queryChoices","close","removeHooksByKey","discardEditor","render","updateChoicesList","stripValuesIfNeeded","choicesList","pos","endPos","sortByRelevanceSetting","sortByRelevance","filterSetting","filter","orderByRelevance","highlightIndex","orderByRelevanceLength","sorted","strippedChoices","loadData","style","display","updateDropdownHeight","flipDropdownIfNeeded","strict","highlightBestMatchingChoice","listen","trimmingContainer","isWindowAsScrollableElement","preventOverflow","textareaOffset","textareaHeight","dropdownHeight","getDropdownHeight","trimmingContainerScrollTop","scrollTop","headersHeight","THEAD","containerOffset","spaceAbove","top","spaceBelow","scrollHeight","flipNeeded","flipDropdown","unflipDropdown","limitDropdownIfNeeded","spaceAvailable","tempHeight","lastRowHeight","height","getRowHeight","getSetting","flipped","parseInt","setDropdownHeight","dropdownStyle","position","currentDropdownWidth","getColWidth","rootDocument","alignOverlaysWithTrimmingContainer","selectCell","deselectCell","firstRowHeight","visibleRows","values","stringifiedValues","strippedValues","allowKeyEventPropagation","keyCode","selectedRange","getSelectedRangeLast","selected","from","allowed","ARROW_DOWN","countRows","ARROW_UP","BACKSPACE","DELETE","INSERT","timeOffset","C","ctrlKey","metaKey","isOpened"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/editors/autocompleteEditor/autocompleteEditor.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { HandsontableEditor } from \"../handsontableEditor/index.mjs\";\nimport { arrayMap, pivot } from \"../../helpers/array.mjs\";\nimport { addClass, getCaretPosition, getScrollbarWidth, getSelectionEndPosition, getTrimmingContainer, offset, outerHeight, outerWidth, setAttribute, setCaretPosition } from \"../../helpers/dom/element.mjs\";\nimport { isDefined, stringify } from \"../../helpers/mixed.mjs\";\nimport { stripTags } from \"../../helpers/string.mjs\";\nimport { KEY_CODES, isPrintableChar } from \"../../helpers/unicode.mjs\";\nimport { isMacOS } from \"../../helpers/browser.mjs\";\nimport { textRenderer } from \"../../renderers/textRenderer/index.mjs\";\nimport { A11Y_ACTIVEDESCENDANT, A11Y_AUTOCOMPLETE, A11Y_COMBOBOX, A11Y_CONTROLS, A11Y_EXPANDED, A11Y_HASPOPUP, A11Y_LISTBOX, A11Y_LIVE, A11Y_OPTION, A11Y_POSINSET, A11Y_PRESENTATION, A11Y_RELEVANT, A11Y_SELECTED, A11Y_SETSIZE, A11Y_TEXT } from \"../../helpers/a11y.mjs\";\nexport const EDITOR_TYPE = 'autocomplete';\n\n/**\n * @private\n * @class AutocompleteEditor\n */\nvar _idPrefix = /*#__PURE__*/new WeakMap();\nexport class AutocompleteEditor extends HandsontableEditor {\n  constructor() {\n    super(...arguments);\n    /**\n     * Query string to turn available values over.\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"query\", null);\n    /**\n     * Contains stripped choices.\n     *\n     * @type {string[]}\n     */\n    _defineProperty(this, \"strippedChoices\", []);\n    /**\n     * Contains raw choices.\n     *\n     * @type {Array}\n     */\n    _defineProperty(this, \"rawChoices\", []);\n    /**\n     * Holds the prefix of the editor's id.\n     *\n     * @type {string}\n     */\n    _classPrivateFieldInitSpec(this, _idPrefix, {\n      writable: true,\n      value: this.hot.guid.slice(0, 9)\n    });\n    /**\n     * Filters and sorts by relevance.\n     *\n     * @param {*} value The selected value.\n     * @param {string[]} choices The list of available choices.\n     * @param {boolean} caseSensitive Indicates if it's sorted by case.\n     * @returns {number[]} Array of indexes in original choices array.\n     */\n    _defineProperty(this, \"sortByRelevance\", function (value, choices, caseSensitive) {\n      const choicesRelevance = [];\n      const result = [];\n      const valueLength = value.length;\n      let choicesCount = choices.length;\n      let charsLeft;\n      let currentItem;\n      let i;\n      let valueIndex;\n      if (valueLength === 0) {\n        for (i = 0; i < choicesCount; i++) {\n          result.push(i);\n        }\n        return result;\n      }\n      for (i = 0; i < choicesCount; i++) {\n        currentItem = stripTags(stringify(choices[i]));\n        if (caseSensitive) {\n          valueIndex = currentItem.indexOf(value);\n        } else {\n          const locale = this.cellProperties.locale;\n          valueIndex = currentItem.toLocaleLowerCase(locale).indexOf(value.toLocaleLowerCase(locale));\n        }\n        if (valueIndex !== -1) {\n          charsLeft = currentItem.length - valueIndex - valueLength;\n          choicesRelevance.push({\n            baseIndex: i,\n            index: valueIndex,\n            charsLeft,\n            value: currentItem\n          });\n        }\n      }\n      choicesRelevance.sort((a, b) => {\n        if (b.index === -1) {\n          return -1;\n        }\n        if (a.index === -1) {\n          return 1;\n        }\n        if (a.index < b.index) {\n          return -1;\n        } else if (b.index < a.index) {\n          return 1;\n        } else if (a.index === b.index) {\n          if (a.charsLeft < b.charsLeft) {\n            return -1;\n          } else if (a.charsLeft > b.charsLeft) {\n            return 1;\n          }\n        }\n        return 0;\n      });\n      for (i = 0, choicesCount = choicesRelevance.length; i < choicesCount; i++) {\n        result.push(choicesRelevance[i].baseIndex);\n      }\n      return result;\n    });\n  }\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n  /**\n   * Gets current value from editable element.\n   *\n   * @returns {string}\n   */\n  getValue() {\n    const selectedValue = this.rawChoices.find(value => {\n      const strippedValue = this.stripValueIfNeeded(value);\n      return strippedValue === this.TEXTAREA.value;\n    });\n    if (isDefined(selectedValue)) {\n      return selectedValue;\n    }\n    return this.TEXTAREA.value;\n  }\n\n  /**\n   * Creates an editor's elements and adds necessary CSS classnames.\n   */\n  createElements() {\n    super.createElements();\n    addClass(this.htContainer, 'autocompleteEditor');\n    addClass(this.htContainer, this.hot.rootWindow.navigator.platform.indexOf('Mac') === -1 ? '' : 'htMacScroll');\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_TEXT(), A11Y_COMBOBOX(), A11Y_HASPOPUP('listbox'), A11Y_AUTOCOMPLETE()]);\n    }\n  }\n\n  /**\n   * Prepares editor's metadata and configuration of the internal Handsontable's instance.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_EXPANDED('false'), A11Y_CONTROLS(`${_classPrivateFieldGet(this, _idPrefix)}-listbox-${row}-${col}`)]);\n    }\n  }\n\n  /**\n   * Opens the editor and adjust its size and internal Handsontable's instance.\n   */\n  open() {\n    super.open();\n    const trimDropdown = this.cellProperties.trimDropdown === undefined ? true : this.cellProperties.trimDropdown;\n    const rootInstanceAriaTagsEnabled = this.hot.getSettings().ariaTags;\n    const sourceArray = Array.isArray(this.cellProperties.source) ? this.cellProperties.source : null;\n    const sourceSize = sourceArray === null || sourceArray === void 0 ? void 0 : sourceArray.length;\n    const {\n      row: rowIndex,\n      col: colIndex\n    } = this;\n    this.showEditableElement();\n    this.focus();\n    let scrollbarWidth = getScrollbarWidth();\n    if (scrollbarWidth === 0 && isMacOS()) {\n      scrollbarWidth += 15; // default scroll bar width if scroll bars are visible only when scrolling\n    }\n    this.addHook('beforeKeyDown', event => this.onBeforeKeyDown(event));\n    this.htEditor.updateSettings({\n      colWidths: trimDropdown ? [outerWidth(this.TEXTAREA) - 2] : undefined,\n      width: trimDropdown ? outerWidth(this.TEXTAREA) + scrollbarWidth : undefined,\n      autoColumnSize: true,\n      renderer: (hotInstance, TD, row, col, prop, value, cellProperties) => {\n        textRenderer(hotInstance, TD, row, col, prop, value, cellProperties);\n        const {\n          filteringCaseSensitive,\n          allowHtml,\n          locale\n        } = this.cellProperties;\n        const query = this.query;\n        let cellValue = stringify(value);\n        let indexOfMatch;\n        let match;\n        if (cellValue && !allowHtml) {\n          indexOfMatch = filteringCaseSensitive === true ? cellValue.indexOf(query) : cellValue.toLocaleLowerCase(locale).indexOf(query.toLocaleLowerCase(locale));\n          if (indexOfMatch !== -1) {\n            match = cellValue.substr(indexOfMatch, query.length);\n            cellValue = cellValue.replace(match, `<strong>${match}</strong>`);\n          }\n        }\n        if (rootInstanceAriaTagsEnabled) {\n          setAttribute(TD, [A11Y_OPTION(),\n          // Add `setsize` and `posinset` only if the source is an array.\n          ...(sourceArray ? [A11Y_SETSIZE(sourceSize)] : []), ...(sourceArray ? [A11Y_POSINSET(sourceArray.indexOf(value) + 1)] : []), ['id', `${this.htEditor.rootElement.id}_${row}-${col}`]]);\n        }\n        TD.innerHTML = cellValue;\n      },\n      afterSelection: (startRow, startCol) => {\n        if (rootInstanceAriaTagsEnabled) {\n          const TD = this.htEditor.getCell(startRow, startCol, true);\n          setAttribute(TD, [A11Y_SELECTED()]);\n          setAttribute(this.TEXTAREA, ...A11Y_ACTIVEDESCENDANT(TD.id));\n        }\n      }\n    });\n    if (rootInstanceAriaTagsEnabled) {\n      // Add `role=presentation` to the main table to prevent the readers from treating the option list as a table.\n      setAttribute(this.htEditor.view._wt.wtOverlays.wtTable.TABLE, ...A11Y_PRESENTATION());\n      setAttribute(this.htEditor.rootElement, [A11Y_LISTBOX(), A11Y_LIVE('polite'), A11Y_RELEVANT('text'), ['id', `${_classPrivateFieldGet(this, _idPrefix)}-listbox-${rowIndex}-${colIndex}`]]);\n      setAttribute(this.TEXTAREA, ...A11Y_EXPANDED('true'));\n    }\n    this.hot._registerTimeout(() => {\n      this.queryChoices(this.TEXTAREA.value);\n    });\n  }\n\n  /**\n   * Closes the editor.\n   */\n  close() {\n    this.removeHooksByKey('beforeKeyDown');\n    super.close();\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_EXPANDED('false')]);\n    }\n  }\n\n  /**\n   * Verifies result of validation or closes editor if user's cancelled changes.\n   *\n   * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,\n   *                                   then an editor won't be closed until validation is passed.\n   */\n  discardEditor(result) {\n    super.discardEditor(result);\n    this.hot.view.render();\n  }\n\n  /**\n   * Prepares choices list based on applied argument.\n   *\n   * @private\n   * @param {string} query The query.\n   */\n  queryChoices(query) {\n    const source = this.cellProperties.source;\n    this.query = query;\n    if (typeof source === 'function') {\n      source.call(this.cellProperties, query, choices => {\n        this.rawChoices = choices;\n        this.updateChoicesList(this.stripValuesIfNeeded(choices));\n      });\n    } else if (Array.isArray(source)) {\n      this.rawChoices = source;\n      this.updateChoicesList(this.stripValuesIfNeeded(source));\n    } else {\n      this.updateChoicesList([]);\n    }\n  }\n\n  /**\n   * Updates list of the possible completions to choose.\n   *\n   * @private\n   * @param {Array} choicesList The choices list to process.\n   */\n  updateChoicesList(choicesList) {\n    const pos = getCaretPosition(this.TEXTAREA);\n    const endPos = getSelectionEndPosition(this.TEXTAREA);\n    const sortByRelevanceSetting = this.cellProperties.sortByRelevance;\n    const filterSetting = this.cellProperties.filter;\n    let orderByRelevance = null;\n    let highlightIndex = null;\n    let choices = choicesList;\n    if (sortByRelevanceSetting) {\n      orderByRelevance = this.sortByRelevance(this.stripValueIfNeeded(this.getValue()), choices, this.cellProperties.filteringCaseSensitive);\n    }\n    const orderByRelevanceLength = Array.isArray(orderByRelevance) ? orderByRelevance.length : 0;\n    if (filterSetting === false) {\n      if (orderByRelevanceLength) {\n        highlightIndex = orderByRelevance[0];\n      }\n    } else {\n      const sorted = [];\n      for (let i = 0, choicesCount = choices.length; i < choicesCount; i++) {\n        if (sortByRelevanceSetting && orderByRelevanceLength <= i) {\n          break;\n        }\n        if (orderByRelevanceLength) {\n          sorted.push(choices[orderByRelevance[i]]);\n        } else {\n          sorted.push(choices[i]);\n        }\n      }\n      highlightIndex = 0;\n      choices = sorted;\n    }\n    this.strippedChoices = choices;\n    this.htEditor.loadData(pivot([choices]));\n    if (choices.length === 0) {\n      this.htEditor.rootElement.style.display = 'none';\n    } else {\n      this.htEditor.rootElement.style.display = '';\n      this.updateDropdownHeight();\n      this.flipDropdownIfNeeded();\n      if (this.cellProperties.strict === true) {\n        this.highlightBestMatchingChoice(highlightIndex);\n      }\n    }\n    this.hot.listen();\n    setCaretPosition(this.TEXTAREA, pos, pos === endPos ? undefined : endPos);\n  }\n\n  /**\n   * Checks where is enough place to open editor.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  flipDropdownIfNeeded() {\n    const trimmingContainer = getTrimmingContainer(this.hot.view._wt.wtTable.TABLE);\n    const isWindowAsScrollableElement = trimmingContainer === this.hot.rootWindow;\n    const preventOverflow = this.cellProperties.preventOverflow;\n    if (isWindowAsScrollableElement || !isWindowAsScrollableElement && (preventOverflow || preventOverflow === 'horizontal')) {\n      return false;\n    }\n    const textareaOffset = offset(this.TEXTAREA);\n    const textareaHeight = outerHeight(this.TEXTAREA);\n    const dropdownHeight = this.getDropdownHeight();\n    const trimmingContainerScrollTop = trimmingContainer.scrollTop;\n    const headersHeight = outerHeight(this.hot.view._wt.wtTable.THEAD);\n    const containerOffset = offset(trimmingContainer);\n    const spaceAbove = textareaOffset.top - containerOffset.top - headersHeight + trimmingContainerScrollTop;\n    const spaceBelow = trimmingContainer.scrollHeight - spaceAbove - headersHeight - textareaHeight;\n    const flipNeeded = dropdownHeight > spaceBelow && spaceAbove > spaceBelow;\n    if (flipNeeded) {\n      this.flipDropdown(dropdownHeight);\n    } else {\n      this.unflipDropdown();\n    }\n    this.limitDropdownIfNeeded(flipNeeded ? spaceAbove : spaceBelow, dropdownHeight);\n    return flipNeeded;\n  }\n\n  /**\n   * Checks if the internal table should generate scrollbar or could be rendered without it.\n   *\n   * @private\n   * @param {number} spaceAvailable The free space as height defined in px available for dropdown list.\n   * @param {number} dropdownHeight The dropdown height.\n   */\n  limitDropdownIfNeeded(spaceAvailable, dropdownHeight) {\n    if (dropdownHeight > spaceAvailable) {\n      let tempHeight = 0;\n      let i = 0;\n      let lastRowHeight = 0;\n      let height = null;\n      do {\n        lastRowHeight = this.htEditor.getRowHeight(i) || this.htEditor.view._wt.getSetting('defaultRowHeight');\n        tempHeight += lastRowHeight;\n        i += 1;\n      } while (tempHeight < spaceAvailable);\n      height = tempHeight - lastRowHeight;\n      if (this.htEditor.flipped) {\n        this.htEditor.rootElement.style.top = `${parseInt(this.htEditor.rootElement.style.top, 10) + dropdownHeight - height}px`; // eslint-disable-line max-len\n      }\n      this.setDropdownHeight(tempHeight - lastRowHeight);\n    }\n  }\n\n  /**\n   * Configures editor to open it at the top.\n   *\n   * @private\n   * @param {number} dropdownHeight The dropdown height.\n   */\n  flipDropdown(dropdownHeight) {\n    const dropdownStyle = this.htEditor.rootElement.style;\n    dropdownStyle.position = 'absolute';\n    dropdownStyle.top = `${-dropdownHeight}px`;\n    this.htEditor.flipped = true;\n  }\n\n  /**\n   * Configures editor to open it at the bottom.\n   *\n   * @private\n   */\n  unflipDropdown() {\n    const dropdownStyle = this.htEditor.rootElement.style;\n    dropdownStyle.position = 'absolute';\n    dropdownStyle.top = '';\n    this.htEditor.flipped = undefined;\n  }\n\n  /**\n   * Updates width and height of the internal Handsontable's instance.\n   *\n   * @private\n   */\n  updateDropdownHeight() {\n    const currentDropdownWidth = this.htEditor.getColWidth(0) + getScrollbarWidth(this.hot.rootDocument) + 2;\n    const trimDropdown = this.cellProperties.trimDropdown;\n    this.htEditor.updateSettings({\n      height: this.getDropdownHeight(),\n      width: trimDropdown ? undefined : currentDropdownWidth\n    });\n    this.htEditor.view._wt.wtTable.alignOverlaysWithTrimmingContainer();\n  }\n\n  /**\n   * Sets new height of the internal Handsontable's instance.\n   *\n   * @private\n   * @param {number} height The new dropdown height.\n   */\n  setDropdownHeight(height) {\n    this.htEditor.updateSettings({\n      height\n    });\n  }\n\n  /**\n   * Creates new selection on specified row index, or deselects selected cells.\n   *\n   * @private\n   * @param {number|undefined} index The visual row index.\n   */\n  highlightBestMatchingChoice(index) {\n    if (typeof index === 'number') {\n      this.htEditor.selectCell(index, 0, undefined, undefined, undefined, false);\n    } else {\n      this.htEditor.deselectCell();\n    }\n  }\n\n  /**\n   * Calculates and return the internal Handsontable's height.\n   *\n   * @private\n   * @returns {number}\n   */\n  getDropdownHeight() {\n    const firstRowHeight = this.htEditor.getRowHeight(0) || 23;\n    const visibleRows = this.cellProperties.visibleRows;\n    return this.strippedChoices.length >= visibleRows ? visibleRows * firstRowHeight : this.strippedChoices.length * firstRowHeight + 8; // eslint-disable-line max-len\n  }\n\n  /**\n   * Sanitizes value from potential dangerous tags.\n   *\n   * @private\n   * @param {string} value The value to sanitize.\n   * @returns {string}\n   */\n  stripValueIfNeeded(value) {\n    return this.stripValuesIfNeeded([value])[0];\n  }\n\n  /**\n   * Sanitizes an array of the values from potential dangerous tags.\n   *\n   * @private\n   * @param {string[]} values The value to sanitize.\n   * @returns {string[]}\n   */\n  stripValuesIfNeeded(values) {\n    const {\n      allowHtml\n    } = this.cellProperties;\n    const stringifiedValues = arrayMap(values, value => stringify(value));\n    const strippedValues = arrayMap(stringifiedValues, value => allowHtml ? value : stripTags(value));\n    return strippedValues;\n  }\n\n  /**\n   * Captures use of arrow down and up to control their behaviour.\n   *\n   * @private\n   * @param {number} keyCode The keyboard keycode.\n   * @returns {boolean}\n   */\n  allowKeyEventPropagation(keyCode) {\n    const selectedRange = this.htEditor.getSelectedRangeLast();\n    const selected = {\n      row: selectedRange ? selectedRange.from.row : -1\n    };\n    let allowed = false;\n    if (keyCode === KEY_CODES.ARROW_DOWN && selected.row > 0 && selected.row < this.htEditor.countRows() - 1) {\n      allowed = true;\n    }\n    if (keyCode === KEY_CODES.ARROW_UP && selected.row > -1) {\n      allowed = true;\n    }\n    return allowed;\n  }\n\n  /**\n   * OnBeforeKeyDown callback.\n   *\n   * @private\n   * @param {KeyboardEvent} event The keyboard event object.\n   */\n  onBeforeKeyDown(event) {\n    if (isPrintableChar(event.keyCode) || event.keyCode === KEY_CODES.BACKSPACE || event.keyCode === KEY_CODES.DELETE || event.keyCode === KEY_CODES.INSERT) {\n      // for Windows 10 + FF86 there is need to add delay to make sure that the value taken from\n      // the textarea is the freshest value. Otherwise the list of choices does not update correctly (see #7570).\n      // On the more modern version of the FF (~ >=91) it seems that the issue is not present or it is\n      // more difficult to induce.\n      let timeOffset = 10;\n\n      // on ctl+c / cmd+c don't update suggestion list\n      if (event.keyCode === KEY_CODES.C && (event.ctrlKey || event.metaKey)) {\n        return;\n      }\n      if (!this.isOpened()) {\n        timeOffset += 10;\n      }\n      if (this.htEditor) {\n        this.hot._registerTimeout(() => {\n          this.queryChoices(this.TEXTAREA.value);\n        }, timeOffset);\n      }\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}