{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { fastInnerHTML } from \"../../../helpers/dom/element.mjs\";\n/**\n * The class generates the nested headers structure in the DOM and reads the column width for\n * each column. The hierarchy is built only for visible, non-hidden columns. Each time the\n * column is shown or hidden, the structure is rebuilt, and the width of the columns in the\n * map updated.\n *\n * @private\n */\nclass GhostTable {\n  constructor(hot, nestedHeaderSettingsGetter) {\n    /**\n     * Reference to the Handsontable instance.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    _defineProperty(this, \"hot\", void 0);\n    /**\n     * The function for retrieving the nested headers settings.\n     *\n     * @private\n     * @type {Function}\n     */\n    _defineProperty(this, \"nestedHeaderSettingsGetter\", void 0);\n    /**\n     * The value that holds information about the number of the nested header layers (header rows).\n     *\n     * @private\n     * @type {number}\n     */\n    _defineProperty(this, \"layersCount\", 0);\n    /**\n     * Temporary element created to get minimal headers widths.\n     *\n     * @private\n     * @type {*}\n     */\n    _defineProperty(this, \"container\", void 0);\n    /**\n     * PhysicalIndexToValueMap to keep and track of the columns' widths.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n    _defineProperty(this, \"widthsMap\", void 0);\n    this.hot = hot;\n    this.nestedHeaderSettingsGetter = nestedHeaderSettingsGetter;\n    this.widthsMap = this.hot.columnIndexMapper.createAndRegisterIndexMap('nestedHeaders.widthsMap', 'physicalIndexToValue');\n  }\n\n  /**\n   * Sets the number of nested headers layers count.\n   *\n   * @param {number} layersCount Total number of headers levels.\n   * @returns {GhostTable}\n   */\n  setLayersCount(layersCount) {\n    this.layersCount = layersCount;\n    return this;\n  }\n\n  /**\n   * Gets the column width based on the visual column index.\n   *\n   * @param {number} visualColumn Visual column index.\n   * @returns {number|null}\n   */\n  getWidth(visualColumn) {\n    return this.widthsMap.getValueAtIndex(this.hot.toPhysicalColumn(visualColumn));\n  }\n\n  /**\n   * Build cache of the headers widths.\n   */\n  buildWidthsMap() {\n    this.container = this.hot.rootDocument.createElement('div');\n    this.container.classList.add('handsontable', 'htGhostTable', 'htAutoSize');\n    this._buildGhostTable(this.container);\n    this.hot.rootDocument.body.appendChild(this.container);\n    const columns = this.container.querySelectorAll('tr:last-of-type th');\n    const maxColumns = columns.length;\n    this.widthsMap.clear();\n    for (let column = 0; column < maxColumns; column++) {\n      const visualColumnsIndex = this.hot.columnIndexMapper.getVisualFromRenderableIndex(column);\n      const physicalColumnIndex = this.hot.toPhysicalColumn(visualColumnsIndex);\n      this.widthsMap.setValueAtIndex(physicalColumnIndex, columns[column].offsetWidth);\n    }\n    this.container.parentNode.removeChild(this.container);\n    this.container = null;\n  }\n\n  /**\n   * Build temporary table for getting minimal columns widths.\n   *\n   * @private\n   * @param {HTMLElement} container The element where the DOM nodes are injected.\n   */\n  _buildGhostTable(container) {\n    const {\n      rootDocument,\n      columnIndexMapper\n    } = this.hot;\n    const fragment = rootDocument.createDocumentFragment();\n    const table = rootDocument.createElement('table');\n    const isDropdownEnabled = !!this.hot.getSettings().dropdownMenu;\n    const maxRenderedCols = columnIndexMapper.getRenderableIndexesLength();\n    for (let row = 0; row < this.layersCount; row++) {\n      const tr = rootDocument.createElement('tr');\n      for (let col = 0; col < maxRenderedCols; col++) {\n        let visualColumnsIndex = columnIndexMapper.getVisualFromRenderableIndex(col);\n        if (visualColumnsIndex === null) {\n          visualColumnsIndex = col;\n        }\n        const th = rootDocument.createElement('th');\n        const headerSettings = this.nestedHeaderSettingsGetter(row, visualColumnsIndex);\n        if (headerSettings && (!headerSettings.isPlaceholder || headerSettings.isHidden)) {\n          let label = headerSettings.label;\n          if (isDropdownEnabled) {\n            label += '<button class=\"changeType\"></button>';\n          }\n          fastInnerHTML(th, label);\n          th.colSpan = headerSettings.colspan;\n          tr.appendChild(th);\n        }\n      }\n      table.appendChild(tr);\n    }\n    fragment.appendChild(table);\n    container.appendChild(fragment);\n  }\n\n  /**\n   * Clear the widths cache.\n   */\n  clear() {\n    this.widthsMap.clear();\n    this.container = null;\n  }\n}\nexport default GhostTable;","map":{"version":3,"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","fastInnerHTML","GhostTable","constructor","hot","nestedHeaderSettingsGetter","widthsMap","columnIndexMapper","createAndRegisterIndexMap","setLayersCount","layersCount","getWidth","visualColumn","getValueAtIndex","toPhysicalColumn","buildWidthsMap","container","rootDocument","createElement","classList","add","_buildGhostTable","body","appendChild","columns","querySelectorAll","maxColumns","length","clear","column","visualColumnsIndex","getVisualFromRenderableIndex","physicalColumnIndex","setValueAtIndex","offsetWidth","parentNode","removeChild","fragment","createDocumentFragment","table","isDropdownEnabled","getSettings","dropdownMenu","maxRenderedCols","getRenderableIndexesLength","row","tr","col","th","headerSettings","isPlaceholder","isHidden","label","colSpan","colspan"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/plugins/nestedHeaders/utils/ghostTable.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { fastInnerHTML } from \"../../../helpers/dom/element.mjs\";\n/**\n * The class generates the nested headers structure in the DOM and reads the column width for\n * each column. The hierarchy is built only for visible, non-hidden columns. Each time the\n * column is shown or hidden, the structure is rebuilt, and the width of the columns in the\n * map updated.\n *\n * @private\n */\nclass GhostTable {\n  constructor(hot, nestedHeaderSettingsGetter) {\n    /**\n     * Reference to the Handsontable instance.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    _defineProperty(this, \"hot\", void 0);\n    /**\n     * The function for retrieving the nested headers settings.\n     *\n     * @private\n     * @type {Function}\n     */\n    _defineProperty(this, \"nestedHeaderSettingsGetter\", void 0);\n    /**\n     * The value that holds information about the number of the nested header layers (header rows).\n     *\n     * @private\n     * @type {number}\n     */\n    _defineProperty(this, \"layersCount\", 0);\n    /**\n     * Temporary element created to get minimal headers widths.\n     *\n     * @private\n     * @type {*}\n     */\n    _defineProperty(this, \"container\", void 0);\n    /**\n     * PhysicalIndexToValueMap to keep and track of the columns' widths.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n    _defineProperty(this, \"widthsMap\", void 0);\n    this.hot = hot;\n    this.nestedHeaderSettingsGetter = nestedHeaderSettingsGetter;\n    this.widthsMap = this.hot.columnIndexMapper.createAndRegisterIndexMap('nestedHeaders.widthsMap', 'physicalIndexToValue');\n  }\n\n  /**\n   * Sets the number of nested headers layers count.\n   *\n   * @param {number} layersCount Total number of headers levels.\n   * @returns {GhostTable}\n   */\n  setLayersCount(layersCount) {\n    this.layersCount = layersCount;\n    return this;\n  }\n\n  /**\n   * Gets the column width based on the visual column index.\n   *\n   * @param {number} visualColumn Visual column index.\n   * @returns {number|null}\n   */\n  getWidth(visualColumn) {\n    return this.widthsMap.getValueAtIndex(this.hot.toPhysicalColumn(visualColumn));\n  }\n\n  /**\n   * Build cache of the headers widths.\n   */\n  buildWidthsMap() {\n    this.container = this.hot.rootDocument.createElement('div');\n    this.container.classList.add('handsontable', 'htGhostTable', 'htAutoSize');\n    this._buildGhostTable(this.container);\n    this.hot.rootDocument.body.appendChild(this.container);\n    const columns = this.container.querySelectorAll('tr:last-of-type th');\n    const maxColumns = columns.length;\n    this.widthsMap.clear();\n    for (let column = 0; column < maxColumns; column++) {\n      const visualColumnsIndex = this.hot.columnIndexMapper.getVisualFromRenderableIndex(column);\n      const physicalColumnIndex = this.hot.toPhysicalColumn(visualColumnsIndex);\n      this.widthsMap.setValueAtIndex(physicalColumnIndex, columns[column].offsetWidth);\n    }\n    this.container.parentNode.removeChild(this.container);\n    this.container = null;\n  }\n\n  /**\n   * Build temporary table for getting minimal columns widths.\n   *\n   * @private\n   * @param {HTMLElement} container The element where the DOM nodes are injected.\n   */\n  _buildGhostTable(container) {\n    const {\n      rootDocument,\n      columnIndexMapper\n    } = this.hot;\n    const fragment = rootDocument.createDocumentFragment();\n    const table = rootDocument.createElement('table');\n    const isDropdownEnabled = !!this.hot.getSettings().dropdownMenu;\n    const maxRenderedCols = columnIndexMapper.getRenderableIndexesLength();\n    for (let row = 0; row < this.layersCount; row++) {\n      const tr = rootDocument.createElement('tr');\n      for (let col = 0; col < maxRenderedCols; col++) {\n        let visualColumnsIndex = columnIndexMapper.getVisualFromRenderableIndex(col);\n        if (visualColumnsIndex === null) {\n          visualColumnsIndex = col;\n        }\n        const th = rootDocument.createElement('th');\n        const headerSettings = this.nestedHeaderSettingsGetter(row, visualColumnsIndex);\n        if (headerSettings && (!headerSettings.isPlaceholder || headerSettings.isHidden)) {\n          let label = headerSettings.label;\n          if (isDropdownEnabled) {\n            label += '<button class=\"changeType\"></button>';\n          }\n          fastInnerHTML(th, label);\n          th.colSpan = headerSettings.colspan;\n          tr.appendChild(th);\n        }\n      }\n      table.appendChild(tr);\n    }\n    fragment.appendChild(table);\n    container.appendChild(fragment);\n  }\n\n  /**\n   * Clear the widths cache.\n   */\n  clear() {\n    this.widthsMap.clear();\n    this.container = null;\n  }\n}\nexport default GhostTable;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}