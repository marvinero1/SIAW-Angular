{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport NodesPool from \"./../utils/nodesPool.mjs\";\n/**\n * Base renderer class, abstract logic for specialized renderers.\n *\n * @class BaseRenderer\n */\nexport default class BaseRenderer {\n  constructor(nodeType, rootNode) {\n    /**\n     * Factory for newly created DOM elements.\n     *\n     * NodePool should be used for each renderer. For the first stage of the refactoring\n     * process, only some of the renderers are implemented a new approach.\n     *\n     * @type {NodesPool|null}\n     */\n    _defineProperty(this, \"nodesPool\", null);\n    /**\n     * Node type which the renderer will manage while building the table (eg. 'TD', 'TR', 'TH').\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"nodeType\", void 0);\n    /**\n     * The root node to which newly created elements will be inserted.\n     *\n     * @type {HTMLElement}\n     */\n    _defineProperty(this, \"rootNode\", void 0);\n    /**\n     * The instance of the Table class, a wrapper for all renderers and holder for properties describe table state.\n     *\n     * @type {TableRenderer}\n     */\n    _defineProperty(this, \"table\", null);\n    /**\n     * Counter of nodes already added.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"renderedNodes\", 0);\n    this.nodesPool = typeof nodeType === 'string' ? new NodesPool(nodeType) : null;\n    this.nodeType = nodeType;\n    this.rootNode = rootNode;\n  }\n\n  /**\n   * Sets the table renderer instance to the current renderer.\n   *\n   * @param {TableRenderer} table The TableRenderer instance.\n   */\n  setTable(table) {\n    if (this.nodesPool) {\n      this.nodesPool.setRootDocument(table.rootDocument);\n    }\n    this.table = table;\n  }\n\n  /**\n   * Adjusts the number of rendered nodes.\n   */\n  adjust() {}\n\n  /**\n   * Renders the contents to the elements.\n   */\n  render() {}\n}","map":{"version":3,"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","NodesPool","BaseRenderer","constructor","nodeType","rootNode","nodesPool","setTable","table","setRootDocument","rootDocument","adjust","render"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/3rdparty/walkontable/src/renderer/_base.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport NodesPool from \"./../utils/nodesPool.mjs\";\n/**\n * Base renderer class, abstract logic for specialized renderers.\n *\n * @class BaseRenderer\n */\nexport default class BaseRenderer {\n  constructor(nodeType, rootNode) {\n    /**\n     * Factory for newly created DOM elements.\n     *\n     * NodePool should be used for each renderer. For the first stage of the refactoring\n     * process, only some of the renderers are implemented a new approach.\n     *\n     * @type {NodesPool|null}\n     */\n    _defineProperty(this, \"nodesPool\", null);\n    /**\n     * Node type which the renderer will manage while building the table (eg. 'TD', 'TR', 'TH').\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"nodeType\", void 0);\n    /**\n     * The root node to which newly created elements will be inserted.\n     *\n     * @type {HTMLElement}\n     */\n    _defineProperty(this, \"rootNode\", void 0);\n    /**\n     * The instance of the Table class, a wrapper for all renderers and holder for properties describe table state.\n     *\n     * @type {TableRenderer}\n     */\n    _defineProperty(this, \"table\", null);\n    /**\n     * Counter of nodes already added.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"renderedNodes\", 0);\n    this.nodesPool = typeof nodeType === 'string' ? new NodesPool(nodeType) : null;\n    this.nodeType = nodeType;\n    this.rootNode = rootNode;\n  }\n\n  /**\n   * Sets the table renderer instance to the current renderer.\n   *\n   * @param {TableRenderer} table The TableRenderer instance.\n   */\n  setTable(table) {\n    if (this.nodesPool) {\n      this.nodesPool.setRootDocument(table.rootDocument);\n    }\n    this.table = table;\n  }\n\n  /**\n   * Adjusts the number of rendered nodes.\n   */\n  adjust() {}\n\n  /**\n   * Renders the contents to the elements.\n   */\n  render() {}\n}"],"mappings":"AAAA,OAAO,mCAAmC;AAC1C,SAASA,eAAe,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAE;EAAED,GAAG,GAAGE,cAAc,CAACF,GAAG,CAAC;EAAE,IAAIA,GAAG,IAAID,GAAG,EAAE;IAAEI,MAAM,CAACC,cAAc,CAACL,GAAG,EAAEC,GAAG,EAAE;MAAEC,KAAK,EAAEA,KAAK;MAAEI,UAAU,EAAE,IAAI;MAAEC,YAAY,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAC;EAAE,CAAC,MAAM;IAAER,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;EAAE;EAAE,OAAOF,GAAG;AAAE;AAC3O,SAASG,cAAc,CAACM,CAAC,EAAE;EAAE,IAAIC,CAAC,GAAGC,YAAY,CAACF,CAAC,EAAE,QAAQ,CAAC;EAAE,OAAO,QAAQ,IAAI,OAAOC,CAAC,GAAGA,CAAC,GAAGE,MAAM,CAACF,CAAC,CAAC;AAAE;AAC7G,SAASC,YAAY,CAACF,CAAC,EAAEI,CAAC,EAAE;EAAE,IAAI,QAAQ,IAAI,OAAOJ,CAAC,IAAI,CAACA,CAAC,EAAE,OAAOA,CAAC;EAAE,IAAIK,CAAC,GAAGL,CAAC,CAACM,MAAM,CAACC,WAAW,CAAC;EAAE,IAAI,KAAK,CAAC,KAAKF,CAAC,EAAE;IAAE,IAAIJ,CAAC,GAAGI,CAAC,CAACG,IAAI,CAACR,CAAC,EAAEI,CAAC,IAAI,SAAS,CAAC;IAAE,IAAI,QAAQ,IAAI,OAAOH,CAAC,EAAE,OAAOA,CAAC;IAAE,MAAM,IAAIQ,SAAS,CAAC,8CAA8C,CAAC;EAAE;EAAE,OAAO,CAAC,QAAQ,KAAKL,CAAC,GAAGD,MAAM,GAAGO,MAAM,EAAEV,CAAC,CAAC;AAAE;AACvT,OAAOW,SAAS,MAAM,0BAA0B;AAChD;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,YAAY,CAAC;EAChCC,WAAW,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACIzB,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC;IACxC;AACJ;AACA;AACA;AACA;IACIA,eAAe,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;IACzC;AACJ;AACA;AACA;AACA;IACIA,eAAe,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;IACzC;AACJ;AACA;AACA;AACA;IACIA,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC;IACpC;AACJ;AACA;AACA;AACA;IACIA,eAAe,CAAC,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;IACzC,IAAI,CAAC0B,SAAS,GAAG,OAAOF,QAAQ,KAAK,QAAQ,GAAG,IAAIH,SAAS,CAACG,QAAQ,CAAC,GAAG,IAAI;IAC9E,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;;EAEA;AACF;AACA;AACA;AACA;EACEE,QAAQ,CAACC,KAAK,EAAE;IACd,IAAI,IAAI,CAACF,SAAS,EAAE;MAClB,IAAI,CAACA,SAAS,CAACG,eAAe,CAACD,KAAK,CAACE,YAAY,CAAC;IACpD;IACA,IAAI,CAACF,KAAK,GAAGA,KAAK;EACpB;;EAEA;AACF;AACA;EACEG,MAAM,GAAG,CAAC;;EAEV;AACF;AACA;EACEC,MAAM,GAAG,CAAC;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}