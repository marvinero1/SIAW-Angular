{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { objectEach } from \"../../helpers/object.mjs\";\nimport Endpoints from \"./endpoints.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport { isNullishOrNaN } from \"./utils.mjs\";\nexport const PLUGIN_KEY = 'columnSummary';\nexport const PLUGIN_PRIORITY = 220;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ColumnSummary\n * @class ColumnSummary\n *\n * @description\n * The `ColumnSummary` plugin lets you [easily summarize your columns](@/guides/columns/column-summary.md).\n *\n * You can use the [built-in summary functions](@/guides/columns/column-summary.md#built-in-summary-functions),\n * or implement a [custom summary function](@/guides/columns/column-summary.md#implement-a-custom-summary-function).\n *\n * For each column summary, you can set the following configuration options:\n *\n * | Option | Required | Type | Default | Description |\n * |---|---|---|---|---|\n * | `sourceColumn` | No | Number | Same as `destinationColumn` | [Selects a column to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize) |\n * | `ranges` | No | Array | - | [Selects ranges of rows to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize) |\n * | `type` | Yes | String | - | [Sets a summary function](@/guides/columns/column-summary.md#step-3-calculate-your-summary) |\n * | `destinationRow` | Yes | Number | - | [Sets the destination cell's row coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |\n * | `destinationColumn` | Yes | Number | - | [Sets the destination cell's column coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |\n * | `forceNumeric` | No | Boolean | `false` | [Forces the summary to treat non-numerics as numerics](@/guides/columns/column-summary.md#force-numeric-values) |\n * | `reversedRowCoords` | No | Boolean | `false` | [Reverses row coordinates](@/guides/columns/column-summary.md#step-5-make-room-for-the-destination-cell) |\n * | `suppressDataTypeErrors` | No | Boolean | `true` | [Suppresses data type errors](@/guides/columns/column-summary.md#throw-data-type-errors) |\n * | `readOnly` | No | Boolean | `true` | Makes summary cell read-only |\n * | `roundFloat` | No | Number/<br>Boolean | - | [Rounds summary result](@/guides/columns/column-summary.md#round-a-column-summary-result) |\n * | `customFunction` | No | Function | - | [Lets you add a custom summary function](@/guides/columns/column-summary.md#implement-a-custom-summary-function) |\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   columnSummary: [\n *     {\n *       type: 'min',\n *       destinationRow: 4,\n *       destinationColumn: 1,\n *     },\n *     {\n *       type: 'max',\n *       destinationRow: 0,\n *       destinationColumn: 3,\n *       reversedRowCoords: true\n *     },\n *     {\n *       type: 'sum',\n *       destinationRow: 4,\n *       destinationColumn: 5,\n *       forceNumeric: true\n *     }\n *   ]\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={getData()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   columnSummary={[\n *     {\n *       type: 'min',\n *       destinationRow: 4,\n *       destinationColumn: 1,\n *     },\n *     {\n *       type: 'max',\n *       destinationRow: 0,\n *       destinationColumn: 3,\n *       reversedRowCoords: true\n *     },\n *     {\n *       type: 'sum',\n *       destinationRow: 4,\n *       destinationColumn: 5,\n *       forceNumeric: true\n *     }\n *   ]}\n * />\n * ```\n * :::\n */\nvar _onAfterInit = /*#__PURE__*/new WeakSet();\nvar _onAfterChange = /*#__PURE__*/new WeakSet();\nvar _onAfterRowMove = /*#__PURE__*/new WeakSet();\nexport class ColumnSummary extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * `beforeRowMove` hook callback.\n     *\n     * @param {Array} rows Array of visual row indexes to be moved.\n     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.\n     * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md).\n     */\n    _classPrivateMethodInitSpec(this, _onAfterRowMove);\n    /**\n     * `afterChange` hook callback.\n     *\n     * @param {Array} changes 2D array containing information about each of the edited cells.\n     * @param {string} source The string that identifies source of changes.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterChange);\n    /**\n     * `afterInit` hook callback.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterInit);\n    /**\n     * The Endpoints class instance. Used to make all endpoint-related operations.\n     *\n     * @private\n     * @type {null|Endpoints}\n     */\n    _defineProperty(this, \"endpoints\", null);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ColumnSummary#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.settings = this.hot.getSettings()[PLUGIN_KEY];\n    this.endpoints = new Endpoints(this, this.settings);\n    this.addHook('afterInit', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _classPrivateMethodGet(_this, _onAfterInit, _onAfterInit2).call(_this, ...args);\n    });\n    this.addHook('afterChange', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _classPrivateMethodGet(_this, _onAfterChange, _onAfterChange2).call(_this, ...args);\n    });\n    this.addHook('beforeCreateRow', (index, amount, source) => this.endpoints.resetSetupBeforeStructureAlteration('insert_row', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('beforeCreateCol', (index, amount, source) => this.endpoints.resetSetupBeforeStructureAlteration('insert_col', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('beforeRemoveRow', function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return _this.endpoints.resetSetupBeforeStructureAlteration('remove_row', ...args);\n    });\n    this.addHook('beforeRemoveCol', function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return _this.endpoints.resetSetupBeforeStructureAlteration('remove_col', ...args);\n    });\n    this.addHook('afterCreateRow', (index, amount, source) => this.endpoints.resetSetupAfterStructureAlteration('insert_row', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('afterCreateCol', (index, amount, source) => this.endpoints.resetSetupAfterStructureAlteration('insert_col', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('afterRemoveRow', function () {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      return _this.endpoints.resetSetupAfterStructureAlteration('remove_row', ...args);\n    });\n    this.addHook('afterRemoveCol', function () {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      return _this.endpoints.resetSetupAfterStructureAlteration('remove_col', ...args);\n    });\n    this.addHook('afterRowMove', function () {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      return _classPrivateMethodGet(_this, _onAfterRowMove, _onAfterRowMove2).call(_this, ...args);\n    });\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.endpoints = null;\n    this.settings = null;\n    this.currentEndpoint = null;\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`columnSummary`](@/api/options.md#columnsummary)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    this.endpoints.initEndpoints();\n    super.updatePlugin();\n  }\n\n  /**\n   * Calculates math for a single endpoint.\n   *\n   * @private\n   * @param {object} endpoint Contains information about the endpoint.\n   */\n  calculate(endpoint) {\n    switch (endpoint.type.toLowerCase()) {\n      case 'sum':\n        endpoint.result = this.calculateSum(endpoint);\n        break;\n      case 'min':\n        endpoint.result = this.calculateMinMax(endpoint, endpoint.type);\n        break;\n      case 'max':\n        endpoint.result = this.calculateMinMax(endpoint, endpoint.type);\n        break;\n      case 'count':\n        endpoint.result = this.countEntries(endpoint);\n        break;\n      case 'average':\n        endpoint.result = this.calculateAverage(endpoint);\n        break;\n      case 'custom':\n        endpoint.result = endpoint.customFunction.call(this, endpoint);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Calculates sum of the values contained in ranges provided in the plugin config.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @returns {number} Sum for the selected range.\n   */\n  calculateSum(endpoint) {\n    let sum = 0;\n    objectEach(endpoint.ranges, range => {\n      sum += this.getPartialSum(range, endpoint.sourceColumn);\n    });\n    return sum;\n  }\n\n  /**\n   * Returns partial sum of values from a single row range.\n   *\n   * @private\n   * @param {Array} rowRange Range for the sum.\n   * @param {number} col Column index.\n   * @returns {number} The partial sum.\n   */\n  getPartialSum(rowRange, col) {\n    let sum = 0;\n    let i = rowRange[1] || rowRange[0];\n    let cellValue = null;\n    let biggestDecimalPlacesCount = 0;\n    do {\n      cellValue = this.getCellValue(i, col);\n      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;\n      if (cellValue !== null) {\n        const decimalPlaces = (`${cellValue}`.split('.')[1] || []).length || 1;\n        if (decimalPlaces > biggestDecimalPlacesCount) {\n          biggestDecimalPlacesCount = decimalPlaces;\n        }\n      }\n      sum += cellValue || 0;\n      i -= 1;\n    } while (i >= rowRange[0]);\n\n    // Workaround for e.g. 802.2 + 1.1 = 803.3000000000001\n    return Math.round(sum * 10 ** biggestDecimalPlacesCount) / 10 ** biggestDecimalPlacesCount;\n  }\n\n  /**\n   * Calculates the minimal value for the selected ranges.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @param {string} type `'min'` or `'max'`.\n   * @returns {number} Min or Max value.\n   */\n  calculateMinMax(endpoint, type) {\n    let result = null;\n    objectEach(endpoint.ranges, range => {\n      const partialResult = this.getPartialMinMax(range, endpoint.sourceColumn, type);\n      if (result === null && partialResult !== null) {\n        result = partialResult;\n      }\n      if (partialResult !== null) {\n        switch (type) {\n          case 'min':\n            result = Math.min(result, partialResult);\n            break;\n          case 'max':\n            result = Math.max(result, partialResult);\n            break;\n          default:\n            break;\n        }\n      }\n    });\n    return result === null ? 'Not enough data' : result;\n  }\n\n  /**\n   * Returns a local minimum of the provided sub-range.\n   *\n   * @private\n   * @param {Array} rowRange Range for the calculation.\n   * @param {number} col Column index.\n   * @param {string} type `'min'` or `'max'`.\n   * @returns {number|null} Min or max value.\n   */\n  getPartialMinMax(rowRange, col, type) {\n    let result = null;\n    let i = rowRange[1] || rowRange[0];\n    let cellValue;\n    do {\n      cellValue = this.getCellValue(i, col);\n      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;\n      if (result === null) {\n        result = cellValue;\n      } else if (cellValue !== null) {\n        switch (type) {\n          case 'min':\n            result = Math.min(result, cellValue);\n            break;\n          case 'max':\n            result = Math.max(result, cellValue);\n            break;\n          default:\n            break;\n        }\n      }\n      i -= 1;\n    } while (i >= rowRange[0]);\n    return result;\n  }\n\n  /**\n   * Counts empty cells in the provided row range.\n   *\n   * @private\n   * @param {Array} rowRange Row range for the calculation.\n   * @param {number} col Column index.\n   * @returns {number} Empty cells count.\n   */\n  countEmpty(rowRange, col) {\n    let cellValue;\n    let counter = 0;\n    let i = rowRange[1] || rowRange[0];\n    do {\n      cellValue = this.getCellValue(i, col);\n      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;\n      if (cellValue === null) {\n        counter += 1;\n      }\n      i -= 1;\n    } while (i >= rowRange[0]);\n    return counter;\n  }\n\n  /**\n   * Counts non-empty cells in the provided row range.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @returns {number} Entry count.\n   */\n  countEntries(endpoint) {\n    let result = 0;\n    const ranges = endpoint.ranges;\n    objectEach(ranges, range => {\n      const partial = range[1] === undefined ? 1 : range[1] - range[0] + 1;\n      const emptyCount = this.countEmpty(range, endpoint.sourceColumn);\n      result += partial;\n      result -= emptyCount;\n    });\n    return result;\n  }\n\n  /**\n   * Calculates the average value from the cells in the range.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @returns {number} Avarage value.\n   */\n  calculateAverage(endpoint) {\n    const sum = this.calculateSum(endpoint);\n    const entriesCount = this.countEntries(endpoint);\n    return sum / entriesCount;\n  }\n\n  /**\n   * Returns a cell value, taking into consideration a basic validation.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @param {number} col Column index.\n   * @returns {string} The cell value.\n   */\n  getCellValue(row, col) {\n    const visualRowIndex = this.hot.toVisualRow(row);\n    const visualColumnIndex = this.hot.toVisualColumn(col);\n    let cellValue = this.hot.getSourceDataAtCell(row, col);\n    let cellClassName = '';\n    if (visualRowIndex !== null && visualColumnIndex !== null) {\n      cellClassName = this.hot.getCellMeta(visualRowIndex, visualColumnIndex).className || '';\n    }\n    if (cellClassName.indexOf('columnSummaryResult') > -1) {\n      return null;\n    }\n    if (this.endpoints.currentEndpoint.forceNumeric) {\n      if (typeof cellValue === 'string') {\n        cellValue = cellValue.replace(/,/, '.');\n      }\n      cellValue = parseFloat(cellValue);\n    }\n    if (isNaN(cellValue)) {\n      if (!this.endpoints.currentEndpoint.suppressDataTypeErrors) {\n        throw new Error(toSingleLine`ColumnSummary plugin: cell at (${row}, ${col}) is not in a\\x20\n          numeric format. Cannot do the calculation.`);\n      }\n    }\n    return cellValue;\n  }\n}\nfunction _onAfterInit2() {\n  this.endpoints.initEndpoints();\n}\nfunction _onAfterChange2(changes, source) {\n  if (changes && source !== 'ColumnSummary.reset' && source !== 'ColumnSummary.set' && source !== 'loadData') {\n    this.endpoints.refreshChangedEndpoints(changes);\n  }\n}\nfunction _onAfterRowMove2(rows, finalIndex) {\n  this.endpoints.resetSetupBeforeStructureAlteration('move_row', rows[0], rows.length, rows, this.pluginName);\n  this.endpoints.resetSetupAfterStructureAlteration('move_row', finalIndex, rows.length, rows, this.pluginName);\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","obj","privateSet","_checkPrivateRedeclaration","add","privateCollection","has","TypeError","_defineProperty","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","Number","_classPrivateMethodGet","receiver","fn","BasePlugin","objectEach","Endpoints","toSingleLine","isNullishOrNaN","PLUGIN_KEY","PLUGIN_PRIORITY","_onAfterInit","WeakSet","_onAfterChange","_onAfterRowMove","ColumnSummary","constructor","arguments","isEnabled","hot","getSettings","enablePlugin","_this","enabled","settings","endpoints","addHook","_len","length","args","Array","_key","_onAfterInit2","_len2","_key2","_onAfterChange2","index","amount","source","resetSetupBeforeStructureAlteration","_len3","_key3","_len4","_key4","resetSetupAfterStructureAlteration","_len5","_key5","_len6","_key6","_len7","_key7","_onAfterRowMove2","disablePlugin","currentEndpoint","updatePlugin","initEndpoints","calculate","endpoint","type","toLowerCase","result","calculateSum","calculateMinMax","countEntries","calculateAverage","customFunction","sum","ranges","range","getPartialSum","sourceColumn","rowRange","col","cellValue","biggestDecimalPlacesCount","getCellValue","decimalPlaces","split","Math","round","partialResult","getPartialMinMax","min","max","countEmpty","counter","partial","undefined","emptyCount","entriesCount","row","visualRowIndex","toVisualRow","visualColumnIndex","toVisualColumn","getSourceDataAtCell","cellClassName","getCellMeta","className","indexOf","forceNumeric","replace","parseFloat","isNaN","suppressDataTypeErrors","Error","changes","refreshChangedEndpoints","rows","finalIndex","pluginName"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/plugins/columnSummary/columnSummary.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { objectEach } from \"../../helpers/object.mjs\";\nimport Endpoints from \"./endpoints.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport { isNullishOrNaN } from \"./utils.mjs\";\nexport const PLUGIN_KEY = 'columnSummary';\nexport const PLUGIN_PRIORITY = 220;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ColumnSummary\n * @class ColumnSummary\n *\n * @description\n * The `ColumnSummary` plugin lets you [easily summarize your columns](@/guides/columns/column-summary.md).\n *\n * You can use the [built-in summary functions](@/guides/columns/column-summary.md#built-in-summary-functions),\n * or implement a [custom summary function](@/guides/columns/column-summary.md#implement-a-custom-summary-function).\n *\n * For each column summary, you can set the following configuration options:\n *\n * | Option | Required | Type | Default | Description |\n * |---|---|---|---|---|\n * | `sourceColumn` | No | Number | Same as `destinationColumn` | [Selects a column to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize) |\n * | `ranges` | No | Array | - | [Selects ranges of rows to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize) |\n * | `type` | Yes | String | - | [Sets a summary function](@/guides/columns/column-summary.md#step-3-calculate-your-summary) |\n * | `destinationRow` | Yes | Number | - | [Sets the destination cell's row coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |\n * | `destinationColumn` | Yes | Number | - | [Sets the destination cell's column coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |\n * | `forceNumeric` | No | Boolean | `false` | [Forces the summary to treat non-numerics as numerics](@/guides/columns/column-summary.md#force-numeric-values) |\n * | `reversedRowCoords` | No | Boolean | `false` | [Reverses row coordinates](@/guides/columns/column-summary.md#step-5-make-room-for-the-destination-cell) |\n * | `suppressDataTypeErrors` | No | Boolean | `true` | [Suppresses data type errors](@/guides/columns/column-summary.md#throw-data-type-errors) |\n * | `readOnly` | No | Boolean | `true` | Makes summary cell read-only |\n * | `roundFloat` | No | Number/<br>Boolean | - | [Rounds summary result](@/guides/columns/column-summary.md#round-a-column-summary-result) |\n * | `customFunction` | No | Function | - | [Lets you add a custom summary function](@/guides/columns/column-summary.md#implement-a-custom-summary-function) |\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   columnSummary: [\n *     {\n *       type: 'min',\n *       destinationRow: 4,\n *       destinationColumn: 1,\n *     },\n *     {\n *       type: 'max',\n *       destinationRow: 0,\n *       destinationColumn: 3,\n *       reversedRowCoords: true\n *     },\n *     {\n *       type: 'sum',\n *       destinationRow: 4,\n *       destinationColumn: 5,\n *       forceNumeric: true\n *     }\n *   ]\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={getData()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   columnSummary={[\n *     {\n *       type: 'min',\n *       destinationRow: 4,\n *       destinationColumn: 1,\n *     },\n *     {\n *       type: 'max',\n *       destinationRow: 0,\n *       destinationColumn: 3,\n *       reversedRowCoords: true\n *     },\n *     {\n *       type: 'sum',\n *       destinationRow: 4,\n *       destinationColumn: 5,\n *       forceNumeric: true\n *     }\n *   ]}\n * />\n * ```\n * :::\n */\nvar _onAfterInit = /*#__PURE__*/new WeakSet();\nvar _onAfterChange = /*#__PURE__*/new WeakSet();\nvar _onAfterRowMove = /*#__PURE__*/new WeakSet();\nexport class ColumnSummary extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * `beforeRowMove` hook callback.\n     *\n     * @param {Array} rows Array of visual row indexes to be moved.\n     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.\n     * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md).\n     */\n    _classPrivateMethodInitSpec(this, _onAfterRowMove);\n    /**\n     * `afterChange` hook callback.\n     *\n     * @param {Array} changes 2D array containing information about each of the edited cells.\n     * @param {string} source The string that identifies source of changes.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterChange);\n    /**\n     * `afterInit` hook callback.\n     */\n    _classPrivateMethodInitSpec(this, _onAfterInit);\n    /**\n     * The Endpoints class instance. Used to make all endpoint-related operations.\n     *\n     * @private\n     * @type {null|Endpoints}\n     */\n    _defineProperty(this, \"endpoints\", null);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ColumnSummary#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.settings = this.hot.getSettings()[PLUGIN_KEY];\n    this.endpoints = new Endpoints(this, this.settings);\n    this.addHook('afterInit', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _classPrivateMethodGet(_this, _onAfterInit, _onAfterInit2).call(_this, ...args);\n    });\n    this.addHook('afterChange', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _classPrivateMethodGet(_this, _onAfterChange, _onAfterChange2).call(_this, ...args);\n    });\n    this.addHook('beforeCreateRow', (index, amount, source) => this.endpoints.resetSetupBeforeStructureAlteration('insert_row', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('beforeCreateCol', (index, amount, source) => this.endpoints.resetSetupBeforeStructureAlteration('insert_col', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('beforeRemoveRow', function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return _this.endpoints.resetSetupBeforeStructureAlteration('remove_row', ...args);\n    });\n    this.addHook('beforeRemoveCol', function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return _this.endpoints.resetSetupBeforeStructureAlteration('remove_col', ...args);\n    });\n    this.addHook('afterCreateRow', (index, amount, source) => this.endpoints.resetSetupAfterStructureAlteration('insert_row', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('afterCreateCol', (index, amount, source) => this.endpoints.resetSetupAfterStructureAlteration('insert_col', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('afterRemoveRow', function () {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      return _this.endpoints.resetSetupAfterStructureAlteration('remove_row', ...args);\n    });\n    this.addHook('afterRemoveCol', function () {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      return _this.endpoints.resetSetupAfterStructureAlteration('remove_col', ...args);\n    });\n    this.addHook('afterRowMove', function () {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      return _classPrivateMethodGet(_this, _onAfterRowMove, _onAfterRowMove2).call(_this, ...args);\n    });\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.endpoints = null;\n    this.settings = null;\n    this.currentEndpoint = null;\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`columnSummary`](@/api/options.md#columnsummary)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    this.endpoints.initEndpoints();\n    super.updatePlugin();\n  }\n\n  /**\n   * Calculates math for a single endpoint.\n   *\n   * @private\n   * @param {object} endpoint Contains information about the endpoint.\n   */\n  calculate(endpoint) {\n    switch (endpoint.type.toLowerCase()) {\n      case 'sum':\n        endpoint.result = this.calculateSum(endpoint);\n        break;\n      case 'min':\n        endpoint.result = this.calculateMinMax(endpoint, endpoint.type);\n        break;\n      case 'max':\n        endpoint.result = this.calculateMinMax(endpoint, endpoint.type);\n        break;\n      case 'count':\n        endpoint.result = this.countEntries(endpoint);\n        break;\n      case 'average':\n        endpoint.result = this.calculateAverage(endpoint);\n        break;\n      case 'custom':\n        endpoint.result = endpoint.customFunction.call(this, endpoint);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Calculates sum of the values contained in ranges provided in the plugin config.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @returns {number} Sum for the selected range.\n   */\n  calculateSum(endpoint) {\n    let sum = 0;\n    objectEach(endpoint.ranges, range => {\n      sum += this.getPartialSum(range, endpoint.sourceColumn);\n    });\n    return sum;\n  }\n\n  /**\n   * Returns partial sum of values from a single row range.\n   *\n   * @private\n   * @param {Array} rowRange Range for the sum.\n   * @param {number} col Column index.\n   * @returns {number} The partial sum.\n   */\n  getPartialSum(rowRange, col) {\n    let sum = 0;\n    let i = rowRange[1] || rowRange[0];\n    let cellValue = null;\n    let biggestDecimalPlacesCount = 0;\n    do {\n      cellValue = this.getCellValue(i, col);\n      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;\n      if (cellValue !== null) {\n        const decimalPlaces = (`${cellValue}`.split('.')[1] || []).length || 1;\n        if (decimalPlaces > biggestDecimalPlacesCount) {\n          biggestDecimalPlacesCount = decimalPlaces;\n        }\n      }\n      sum += cellValue || 0;\n      i -= 1;\n    } while (i >= rowRange[0]);\n\n    // Workaround for e.g. 802.2 + 1.1 = 803.3000000000001\n    return Math.round(sum * 10 ** biggestDecimalPlacesCount) / 10 ** biggestDecimalPlacesCount;\n  }\n\n  /**\n   * Calculates the minimal value for the selected ranges.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @param {string} type `'min'` or `'max'`.\n   * @returns {number} Min or Max value.\n   */\n  calculateMinMax(endpoint, type) {\n    let result = null;\n    objectEach(endpoint.ranges, range => {\n      const partialResult = this.getPartialMinMax(range, endpoint.sourceColumn, type);\n      if (result === null && partialResult !== null) {\n        result = partialResult;\n      }\n      if (partialResult !== null) {\n        switch (type) {\n          case 'min':\n            result = Math.min(result, partialResult);\n            break;\n          case 'max':\n            result = Math.max(result, partialResult);\n            break;\n          default:\n            break;\n        }\n      }\n    });\n    return result === null ? 'Not enough data' : result;\n  }\n\n  /**\n   * Returns a local minimum of the provided sub-range.\n   *\n   * @private\n   * @param {Array} rowRange Range for the calculation.\n   * @param {number} col Column index.\n   * @param {string} type `'min'` or `'max'`.\n   * @returns {number|null} Min or max value.\n   */\n  getPartialMinMax(rowRange, col, type) {\n    let result = null;\n    let i = rowRange[1] || rowRange[0];\n    let cellValue;\n    do {\n      cellValue = this.getCellValue(i, col);\n      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;\n      if (result === null) {\n        result = cellValue;\n      } else if (cellValue !== null) {\n        switch (type) {\n          case 'min':\n            result = Math.min(result, cellValue);\n            break;\n          case 'max':\n            result = Math.max(result, cellValue);\n            break;\n          default:\n            break;\n        }\n      }\n      i -= 1;\n    } while (i >= rowRange[0]);\n    return result;\n  }\n\n  /**\n   * Counts empty cells in the provided row range.\n   *\n   * @private\n   * @param {Array} rowRange Row range for the calculation.\n   * @param {number} col Column index.\n   * @returns {number} Empty cells count.\n   */\n  countEmpty(rowRange, col) {\n    let cellValue;\n    let counter = 0;\n    let i = rowRange[1] || rowRange[0];\n    do {\n      cellValue = this.getCellValue(i, col);\n      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;\n      if (cellValue === null) {\n        counter += 1;\n      }\n      i -= 1;\n    } while (i >= rowRange[0]);\n    return counter;\n  }\n\n  /**\n   * Counts non-empty cells in the provided row range.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @returns {number} Entry count.\n   */\n  countEntries(endpoint) {\n    let result = 0;\n    const ranges = endpoint.ranges;\n    objectEach(ranges, range => {\n      const partial = range[1] === undefined ? 1 : range[1] - range[0] + 1;\n      const emptyCount = this.countEmpty(range, endpoint.sourceColumn);\n      result += partial;\n      result -= emptyCount;\n    });\n    return result;\n  }\n\n  /**\n   * Calculates the average value from the cells in the range.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @returns {number} Avarage value.\n   */\n  calculateAverage(endpoint) {\n    const sum = this.calculateSum(endpoint);\n    const entriesCount = this.countEntries(endpoint);\n    return sum / entriesCount;\n  }\n\n  /**\n   * Returns a cell value, taking into consideration a basic validation.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @param {number} col Column index.\n   * @returns {string} The cell value.\n   */\n  getCellValue(row, col) {\n    const visualRowIndex = this.hot.toVisualRow(row);\n    const visualColumnIndex = this.hot.toVisualColumn(col);\n    let cellValue = this.hot.getSourceDataAtCell(row, col);\n    let cellClassName = '';\n    if (visualRowIndex !== null && visualColumnIndex !== null) {\n      cellClassName = this.hot.getCellMeta(visualRowIndex, visualColumnIndex).className || '';\n    }\n    if (cellClassName.indexOf('columnSummaryResult') > -1) {\n      return null;\n    }\n    if (this.endpoints.currentEndpoint.forceNumeric) {\n      if (typeof cellValue === 'string') {\n        cellValue = cellValue.replace(/,/, '.');\n      }\n      cellValue = parseFloat(cellValue);\n    }\n    if (isNaN(cellValue)) {\n      if (!this.endpoints.currentEndpoint.suppressDataTypeErrors) {\n        throw new Error(toSingleLine`ColumnSummary plugin: cell at (${row}, ${col}) is not in a\\x20\n          numeric format. Cannot do the calculation.`);\n      }\n    }\n    return cellValue;\n  }\n}\nfunction _onAfterInit2() {\n  this.endpoints.initEndpoints();\n}\nfunction _onAfterChange2(changes, source) {\n  if (changes && source !== 'ColumnSummary.reset' && source !== 'ColumnSummary.set' && source !== 'loadData') {\n    this.endpoints.refreshChangedEndpoints(changes);\n  }\n}\nfunction _onAfterRowMove2(rows, finalIndex) {\n  this.endpoints.resetSetupBeforeStructureAlteration('move_row', rows[0], rows.length, rows, this.pluginName);\n  this.endpoints.resetSetupAfterStructureAlteration('move_row', finalIndex, rows.length, rows, this.pluginName);\n}"],"mappings":"AAAA,OAAO,mCAAmC;AAC1C,SAASA,2BAA2B,CAACC,GAAG,EAAEC,UAAU,EAAE;EAAEC,0BAA0B,CAACF,GAAG,EAAEC,UAAU,CAAC;EAAEA,UAAU,CAACE,GAAG,CAACH,GAAG,CAAC;AAAE;AAC1H,SAASE,0BAA0B,CAACF,GAAG,EAAEI,iBAAiB,EAAE;EAAE,IAAIA,iBAAiB,CAACC,GAAG,CAACL,GAAG,CAAC,EAAE;IAAE,MAAM,IAAIM,SAAS,CAAC,gEAAgE,CAAC;EAAE;AAAE;AACzL,SAASC,eAAe,CAACP,GAAG,EAAEQ,GAAG,EAAEC,KAAK,EAAE;EAAED,GAAG,GAAGE,cAAc,CAACF,GAAG,CAAC;EAAE,IAAIA,GAAG,IAAIR,GAAG,EAAE;IAAEW,MAAM,CAACC,cAAc,CAACZ,GAAG,EAAEQ,GAAG,EAAE;MAAEC,KAAK,EAAEA,KAAK;MAAEI,UAAU,EAAE,IAAI;MAAEC,YAAY,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAC;EAAE,CAAC,MAAM;IAAEf,GAAG,CAACQ,GAAG,CAAC,GAAGC,KAAK;EAAE;EAAE,OAAOT,GAAG;AAAE;AAC3O,SAASU,cAAc,CAACM,CAAC,EAAE;EAAE,IAAIC,CAAC,GAAGC,YAAY,CAACF,CAAC,EAAE,QAAQ,CAAC;EAAE,OAAO,QAAQ,IAAI,OAAOC,CAAC,GAAGA,CAAC,GAAGE,MAAM,CAACF,CAAC,CAAC;AAAE;AAC7G,SAASC,YAAY,CAACF,CAAC,EAAEI,CAAC,EAAE;EAAE,IAAI,QAAQ,IAAI,OAAOJ,CAAC,IAAI,CAACA,CAAC,EAAE,OAAOA,CAAC;EAAE,IAAIK,CAAC,GAAGL,CAAC,CAACM,MAAM,CAACC,WAAW,CAAC;EAAE,IAAI,KAAK,CAAC,KAAKF,CAAC,EAAE;IAAE,IAAIJ,CAAC,GAAGI,CAAC,CAACG,IAAI,CAACR,CAAC,EAAEI,CAAC,IAAI,SAAS,CAAC;IAAE,IAAI,QAAQ,IAAI,OAAOH,CAAC,EAAE,OAAOA,CAAC;IAAE,MAAM,IAAIX,SAAS,CAAC,8CAA8C,CAAC;EAAE;EAAE,OAAO,CAAC,QAAQ,KAAKc,CAAC,GAAGD,MAAM,GAAGM,MAAM,EAAET,CAAC,CAAC;AAAE;AACvT,SAASU,sBAAsB,CAACC,QAAQ,EAAE1B,UAAU,EAAE2B,EAAE,EAAE;EAAE,IAAI,CAAC3B,UAAU,CAACI,GAAG,CAACsB,QAAQ,CAAC,EAAE;IAAE,MAAM,IAAIrB,SAAS,CAAC,gDAAgD,CAAC;EAAE;EAAE,OAAOsB,EAAE;AAAE;AACjL,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,UAAU,QAAQ,0BAA0B;AACrD,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,YAAY,QAAQ,sCAAsC;AACnE,SAASC,cAAc,QAAQ,aAAa;AAC5C,OAAO,MAAMC,UAAU,GAAG,eAAe;AACzC,OAAO,MAAMC,eAAe,GAAG,GAAG;;AAElC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,aAAa,IAAIC,OAAO,EAAE;AAC7C,IAAIC,cAAc,GAAG,aAAa,IAAID,OAAO,EAAE;AAC/C,IAAIE,eAAe,GAAG,aAAa,IAAIF,OAAO,EAAE;AAChD,OAAO,MAAMG,aAAa,SAASX,UAAU,CAAC;EAC5CY,WAAW,GAAG;IACZ,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB;AACJ;AACA;AACA;AACA;AACA;AACA;IACI3C,2BAA2B,CAAC,IAAI,EAAEwC,eAAe,CAAC;IAClD;AACJ;AACA;AACA;AACA;AACA;IACIxC,2BAA2B,CAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}