{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass, closest, hasClass, removeClass, outerWidth, isDetached } from \"../../helpers/dom/element.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { ViewportRowsCalculator } from \"../../3rdparty/walkontable/src/index.mjs\"; // Developer note! Whenever you make a change in this file, make an analogous change in manualColumnResize.js\nexport const PLUGIN_KEY = 'manualRowResize';\nexport const PLUGIN_PRIORITY = 30;\nconst PERSISTENT_STATE_KEY = 'manualRowHeights';\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualRowResize\n * @class ManualRowResize\n *\n * @description\n * This plugin allows to change rows height. To make rows height persistent the {@link Options#persistentState}\n * plugin should be enabled.\n *\n * The plugin creates additional components to make resizing possibly using user interface:\n * - handle - the draggable element that sets the desired height of the row.\n * - guide - the helper guide that shows the desired height as a horizontal guide.\n */\nvar _currentTH = /*#__PURE__*/new WeakMap();\nvar _currentRow = /*#__PURE__*/new WeakMap();\nvar _selectedRows = /*#__PURE__*/new WeakMap();\nvar _currentHeight = /*#__PURE__*/new WeakMap();\nvar _newSize = /*#__PURE__*/new WeakMap();\nvar _startY = /*#__PURE__*/new WeakMap();\nvar _startHeight = /*#__PURE__*/new WeakMap();\nvar _startOffset = /*#__PURE__*/new WeakMap();\nvar _handle = /*#__PURE__*/new WeakMap();\nvar _guide = /*#__PURE__*/new WeakMap();\nvar _pressed = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByRMB = /*#__PURE__*/new WeakMap();\nvar _dblclick = /*#__PURE__*/new WeakMap();\nvar _autoresizeTimeout = /*#__PURE__*/new WeakMap();\nvar _rowHeightsMap = /*#__PURE__*/new WeakMap();\nvar _config = /*#__PURE__*/new WeakMap();\nvar _onMouseOver = /*#__PURE__*/new WeakSet();\nvar _onMouseDown = /*#__PURE__*/new WeakSet();\nvar _onMouseMove = /*#__PURE__*/new WeakSet();\nvar _onMouseUp = /*#__PURE__*/new WeakSet();\nvar _onContextMenu = /*#__PURE__*/new WeakSet();\nvar _onModifyRowHeight = /*#__PURE__*/new WeakSet();\nvar _onMapInit = /*#__PURE__*/new WeakSet();\nexport class ManualRowResize extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n\n  /**\n   * @type {HTMLTableCellElement}\n   */\n\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Callback to call on map's `init` local hook.\n     */\n    _classPrivateMethodInitSpec(this, _onMapInit);\n    /**\n     * Modifies the provided row height, based on the plugin settings.\n     *\n     * @param {number} height Row height.\n     * @param {number} row Visual row index.\n     * @returns {number}\n     */\n    _classPrivateMethodInitSpec(this, _onModifyRowHeight);\n    /**\n     * Callback for \"contextmenu\" event triggered on element showing move handle. It removes handle and guide elements.\n     */\n    _classPrivateMethodInitSpec(this, _onContextMenu);\n    /**\n     * 'mouseup' event callback - apply the row resizing.\n     *\n     * @fires Hooks#beforeRowResize\n     * @fires Hooks#afterRowResize\n     */\n    _classPrivateMethodInitSpec(this, _onMouseUp);\n    /**\n     * 'mousemove' event callback - refresh the handle and guide positions, cache the new row height.\n     *\n     * @param {MouseEvent} event The mouse event.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseMove);\n    /**\n     * 'mousedown' event callback.\n     *\n     * @param {MouseEvent} event The mouse event.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseDown);\n    /**\n     * 'mouseover' event callback - set the handle position.\n     *\n     * @param {MouseEvent} event The mouse event.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseOver);\n    _classPrivateFieldInitSpec(this, _currentTH, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentRow, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number[]}\n     */\n    _classPrivateFieldInitSpec(this, _selectedRows, {\n      writable: true,\n      value: []\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentHeight, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _newSize, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startY, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startHeight, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startOffset, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _handle, {\n      writable: true,\n      value: this.hot.rootDocument.createElement('DIV')\n    });\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _guide, {\n      writable: true,\n      value: this.hot.rootDocument.createElement('DIV')\n    });\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _pressed, {\n      writable: true,\n      value: false\n    });\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isTriggeredByRMB, {\n      writable: true,\n      value: false\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _dblclick, {\n      writable: true,\n      value: 0\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _autoresizeTimeout, {\n      writable: true,\n      value: null\n    });\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical row indexes.\n     *\n     * @type {PhysicalIndexToValueMap}\n     */\n    _classPrivateFieldInitSpec(this, _rowHeightsMap, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Private pool to save configuration from updateSettings.\n     *\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _config, {\n      writable: true,\n      value: void 0\n    });\n    addClass(_classPrivateFieldGet(this, _handle), 'manualRowResizer');\n    addClass(_classPrivateFieldGet(this, _guide), 'manualRowResizerGuide');\n  }\n\n  /**\n   * @private\n   * @returns {string}\n   */\n  get inlineDir() {\n    return this.hot.isRtl() ? 'right' : 'left';\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualRowResize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    _classPrivateFieldSet(this, _rowHeightsMap, new IndexToValueMap());\n    _classPrivateFieldGet(this, _rowHeightsMap).addLocalHook('init', () => _classPrivateMethodGet(this, _onMapInit, _onMapInit2).call(this));\n    this.hot.rowIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(this, _rowHeightsMap));\n    this.addHook('modifyRowHeight', (height, row) => _classPrivateMethodGet(this, _onModifyRowHeight, _onModifyRowHeight2).call(this, height, row));\n    this.bindEvents();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualRowResize`](@/api/options.md#manualrowresize)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    _classPrivateFieldSet(this, _config, _classPrivateFieldGet(this, _rowHeightsMap).getValues());\n    this.hot.rowIndexMapper.unregisterMap(this.pluginName);\n    super.disablePlugin();\n  }\n\n  /**\n   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be\n   * enabled).\n   *\n   * @fires Hooks#persistentStateSave\n   */\n  saveManualRowHeights() {\n    this.hot.runHooks('persistentStateSave', PERSISTENT_STATE_KEY, _classPrivateFieldGet(this, _rowHeightsMap).getValues());\n  }\n\n  /**\n   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option\n   * has be enabled).\n   *\n   * @returns {Array}\n   * @fires Hooks#persistentStateLoad\n   */\n  loadManualRowHeights() {\n    const storedState = {};\n    this.hot.runHooks('persistentStateLoad', PERSISTENT_STATE_KEY, storedState);\n    return storedState.value;\n  }\n\n  /**\n   * Sets the new height for specified row index.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} height Row height.\n   * @returns {number} Returns new height.\n   */\n  setManualSize(row, height) {\n    const physicalRow = this.hot.toPhysicalRow(row);\n    const newHeight = Math.max(height, ViewportRowsCalculator.DEFAULT_HEIGHT);\n    _classPrivateFieldGet(this, _rowHeightsMap).setValueAtIndex(physicalRow, newHeight);\n    return newHeight;\n  }\n\n  /**\n   * Sets the resize handle position.\n   *\n   * @private\n   * @param {HTMLCellElement} TH TH HTML element.\n   */\n  setupHandlePosition(TH) {\n    _classPrivateFieldSet(this, _currentTH, TH);\n    const {\n      view\n    } = this.hot;\n    const {\n      _wt: wt\n    } = view;\n    const cellCoords = wt.wtTable.getCoords(_classPrivateFieldGet(this, _currentTH));\n    const row = cellCoords.row;\n\n    // Ignore row headers.\n    if (row < 0) {\n      return;\n    }\n    const headerWidth = outerWidth(_classPrivateFieldGet(this, _currentTH));\n    const box = _classPrivateFieldGet(this, _currentTH).getBoundingClientRect();\n    // Read \"fixedRowsTop\" and \"fixedRowsBottom\" through the Walkontable as in that context, the fixed\n    // rows are modified (reduced by the number of hidden rows) by TableView module.\n    const fixedRowTop = row < wt.getSetting('fixedRowsTop');\n    const fixedRowBottom = row >= view.countNotHiddenRowIndexes(0, 1) - wt.getSetting('fixedRowsBottom');\n    let relativeHeaderPosition;\n    if (fixedRowTop) {\n      relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet(this, _currentTH), cellCoords.row, cellCoords.col);\n    } else if (fixedRowBottom) {\n      relativeHeaderPosition = wt.wtOverlays.bottomInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet(this, _currentTH), cellCoords.row, cellCoords.col);\n    }\n\n    // If the TH is not a child of the top-left/bottom-left overlay, recalculate using\n    // the left overlay - as this overlay contains the rest of the headers.\n    if (!relativeHeaderPosition) {\n      relativeHeaderPosition = wt.wtOverlays.inlineStartOverlay.getRelativeCellPosition(_classPrivateFieldGet(this, _currentTH), cellCoords.row, cellCoords.col);\n    }\n    _classPrivateFieldSet(this, _currentRow, this.hot.rowIndexMapper.getVisualFromRenderableIndex(row));\n    _classPrivateFieldSet(this, _selectedRows, []);\n    const isFullRowSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByRowHeader();\n    if (this.hot.selection.isSelected() && isFullRowSelected) {\n      const selectionRanges = this.hot.getSelectedRange();\n      arrayEach(selectionRanges, selectionRange => {\n        const fromRow = selectionRange.getTopStartCorner().row;\n        const toRow = selectionRange.getBottomStartCorner().row;\n\n        // Add every selected row for resize action.\n        rangeEach(fromRow, toRow, rowIndex => {\n          if (!_classPrivateFieldGet(this, _selectedRows).includes(rowIndex)) {\n            _classPrivateFieldGet(this, _selectedRows).push(rowIndex);\n          }\n        });\n      });\n    }\n\n    // Resizing element beyond the current selection (also when there is no selection).\n    if (!_classPrivateFieldGet(this, _selectedRows).includes(_classPrivateFieldGet(this, _currentRow))) {\n      _classPrivateFieldSet(this, _selectedRows, [_classPrivateFieldGet(this, _currentRow)]);\n    }\n    _classPrivateFieldSet(this, _startOffset, relativeHeaderPosition.top - 6);\n    _classPrivateFieldSet(this, _startHeight, parseInt(box.height, 10));\n    _classPrivateFieldGet(this, _handle).style.top = `${_classPrivateFieldGet(this, _startOffset) + _classPrivateFieldGet(this, _startHeight)}px`;\n    _classPrivateFieldGet(this, _handle).style[this.inlineDir] = `${relativeHeaderPosition.start}px`;\n    _classPrivateFieldGet(this, _handle).style.width = `${headerWidth}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(this, _handle));\n  }\n\n  /**\n   * Refresh the resize handle position.\n   *\n   * @private\n   */\n  refreshHandlePosition() {\n    _classPrivateFieldGet(this, _handle).style.top = `${_classPrivateFieldGet(this, _startOffset) + _classPrivateFieldGet(this, _currentHeight)}px`;\n  }\n\n  /**\n   * Sets the resize guide position.\n   *\n   * @private\n   */\n  setupGuidePosition() {\n    const handleWidth = parseInt(outerWidth(_classPrivateFieldGet(this, _handle)), 10);\n    const handleEndPosition = parseInt(_classPrivateFieldGet(this, _handle).style[this.inlineDir], 10) + handleWidth;\n    const maximumVisibleElementWidth = parseInt(this.hot.view.maximumVisibleElementWidth(0), 10);\n    addClass(_classPrivateFieldGet(this, _handle), 'active');\n    addClass(_classPrivateFieldGet(this, _guide), 'active');\n    _classPrivateFieldGet(this, _guide).style.top = _classPrivateFieldGet(this, _handle).style.top;\n    _classPrivateFieldGet(this, _guide).style[this.inlineDir] = `${handleEndPosition}px`;\n    _classPrivateFieldGet(this, _guide).style.width = `${maximumVisibleElementWidth - handleWidth}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(this, _guide));\n  }\n\n  /**\n   * Refresh the resize guide position.\n   *\n   * @private\n   */\n  refreshGuidePosition() {\n    _classPrivateFieldGet(this, _guide).style.top = _classPrivateFieldGet(this, _handle).style.top;\n  }\n\n  /**\n   * Hides both the resize handle and resize guide.\n   *\n   * @private\n   */\n  hideHandleAndGuide() {\n    removeClass(_classPrivateFieldGet(this, _handle), 'active');\n    removeClass(_classPrivateFieldGet(this, _guide), 'active');\n  }\n\n  /**\n   * Checks if provided element is considered as a row header.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {boolean}\n   */\n  checkIfRowHeader(element) {\n    const tbody = closest(element, ['TBODY'], this.hot.rootElement);\n    const {\n      inlineStartOverlay,\n      topInlineStartCornerOverlay,\n      bottomInlineStartCornerOverlay\n    } = this.hot.view._wt.wtOverlays;\n    return [inlineStartOverlay.clone.wtTable.TBODY, topInlineStartCornerOverlay.clone.wtTable.TBODY, bottomInlineStartCornerOverlay.clone.wtTable.TBODY].includes(tbody);\n  }\n\n  /**\n   * Gets the TH element from the provided element.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {HTMLElement}\n   */\n  getClosestTHParent(element) {\n    if (element.tagName !== 'TABLE') {\n      if (element.tagName === 'TH') {\n        return element;\n      }\n      return this.getClosestTHParent(element.parentNode);\n    }\n    return null;\n  }\n\n  /**\n   * Returns the actual height for the provided row index.\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @returns {number} Actual row height.\n   */\n  getActualRowHeight(row) {\n    // TODO: this should utilize `this.hot.getRowHeight` after it's fixed and working properly.\n    const walkontableHeight = this.hot.view._wt.wtTable.getRowHeight(row);\n    if (walkontableHeight !== undefined && _classPrivateFieldGet(this, _newSize) < walkontableHeight) {\n      return walkontableHeight;\n    }\n    return _classPrivateFieldGet(this, _newSize);\n  }\n  /**\n   * Auto-size row after doubleclick - callback.\n   *\n   * @private\n   * @fires Hooks#beforeRowResize\n   * @fires Hooks#afterRowResize\n   */\n  afterMouseDownTimeout() {\n    const render = () => {\n      this.hot.forceFullRender = true;\n      this.hot.view.render(); // updates all\n      this.hot.view.adjustElementsSize(true);\n    };\n    const resize = (row, forceRender) => {\n      const hookNewSize = this.hot.runHooks('beforeRowResize', this.getActualRowHeight(row), row, true);\n      if (hookNewSize !== undefined) {\n        _classPrivateFieldSet(this, _newSize, hookNewSize);\n      }\n      this.setManualSize(row, _classPrivateFieldGet(this, _newSize)); // double click sets auto row size\n\n      this.hot.runHooks('afterRowResize', this.getActualRowHeight(row), row, true);\n      if (forceRender) {\n        render();\n      }\n    };\n    if (_classPrivateFieldGet(this, _dblclick) >= 2) {\n      const selectedRowsLength = _classPrivateFieldGet(this, _selectedRows).length;\n      if (selectedRowsLength > 1) {\n        arrayEach(_classPrivateFieldGet(this, _selectedRows), selectedRow => {\n          resize(selectedRow);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(this, _selectedRows), selectedRow => {\n          resize(selectedRow, true);\n        });\n      }\n    }\n    _classPrivateFieldSet(this, _dblclick, 0);\n    _classPrivateFieldSet(this, _autoresizeTimeout, null);\n  }\n  /**\n   * Binds the mouse events.\n   *\n   * @private\n   */\n  bindEvents() {\n    const {\n      rootElement,\n      rootWindow\n    } = this.hot;\n    this.eventManager.addEventListener(rootElement, 'mouseover', e => _classPrivateMethodGet(this, _onMouseOver, _onMouseOver2).call(this, e));\n    this.eventManager.addEventListener(rootElement, 'mousedown', e => _classPrivateMethodGet(this, _onMouseDown, _onMouseDown2).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mousemove', e => _classPrivateMethodGet(this, _onMouseMove, _onMouseMove2).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mouseup', () => _classPrivateMethodGet(this, _onMouseUp, _onMouseUp2).call(this));\n    this.eventManager.addEventListener(_classPrivateFieldGet(this, _handle), 'contextmenu', () => _classPrivateMethodGet(this, _onContextMenu, _onContextMenu2).call(this));\n  }\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}\nfunction _onMouseOver2(event) {\n  // Workaround for #6926 - if the `event.target` is temporarily detached, we can skip this callback and wait for\n  // the next `onmouseover`.\n  if (isDetached(event.target)) {\n    return;\n  }\n\n  // A \"mouseover\" action is triggered right after executing \"contextmenu\" event. It should be ignored.\n  if (_classPrivateFieldGet(this, _isTriggeredByRMB) === true) {\n    return;\n  }\n  if (this.checkIfRowHeader(event.target)) {\n    const th = this.getClosestTHParent(event.target);\n    if (th) {\n      if (!_classPrivateFieldGet(this, _pressed)) {\n        this.setupHandlePosition(th);\n      }\n    }\n  }\n}\nfunction _onMouseDown2(event) {\n  if (hasClass(event.target, 'manualRowResizer')) {\n    this.setupHandlePosition(_classPrivateFieldGet(this, _currentTH));\n    this.setupGuidePosition();\n    _classPrivateFieldSet(this, _pressed, true);\n    if (_classPrivateFieldGet(this, _autoresizeTimeout) === null) {\n      _classPrivateFieldSet(this, _autoresizeTimeout, setTimeout(() => this.afterMouseDownTimeout(), 500));\n      this.hot._registerTimeout(_classPrivateFieldGet(this, _autoresizeTimeout));\n    }\n    _classPrivateFieldSet(this, _dblclick, _classPrivateFieldGet(this, _dblclick) + 1);\n    _classPrivateFieldSet(this, _startY, event.pageY);\n    _classPrivateFieldSet(this, _newSize, _classPrivateFieldGet(this, _startHeight));\n  }\n}\nfunction _onMouseMove2(event) {\n  if (_classPrivateFieldGet(this, _pressed)) {\n    _classPrivateFieldSet(this, _currentHeight, _classPrivateFieldGet(this, _startHeight) + (event.pageY - _classPrivateFieldGet(this, _startY)));\n    arrayEach(_classPrivateFieldGet(this, _selectedRows), selectedRow => {\n      _classPrivateFieldSet(this, _newSize, this.setManualSize(selectedRow, _classPrivateFieldGet(this, _currentHeight)));\n    });\n    this.refreshHandlePosition();\n    this.refreshGuidePosition();\n  }\n}\nfunction _onMouseUp2() {\n  const render = () => {\n    this.hot.forceFullRender = true;\n    this.hot.view.render(); // updates all\n    this.hot.view.adjustElementsSize(true);\n  };\n  const runHooks = (row, forceRender) => {\n    this.hot.runHooks('beforeRowResize', this.getActualRowHeight(row), row, false);\n    if (forceRender) {\n      render();\n    }\n    this.saveManualRowHeights();\n    this.hot.runHooks('afterRowResize', this.getActualRowHeight(row), row, false);\n  };\n  if (_classPrivateFieldGet(this, _pressed)) {\n    this.hideHandleAndGuide();\n    _classPrivateFieldSet(this, _pressed, false);\n    if (_classPrivateFieldGet(this, _newSize) !== _classPrivateFieldGet(this, _startHeight)) {\n      const selectedRowsLength = _classPrivateFieldGet(this, _selectedRows).length;\n      if (selectedRowsLength > 1) {\n        arrayEach(_classPrivateFieldGet(this, _selectedRows), selectedRow => {\n          runHooks(selectedRow);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(this, _selectedRows), selectedRow => {\n          runHooks(selectedRow, true);\n        });\n      }\n    }\n    this.setupHandlePosition(_classPrivateFieldGet(this, _currentTH));\n  }\n}\nfunction _onContextMenu2() {\n  this.hideHandleAndGuide();\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(this, _handle));\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(this, _guide));\n  _classPrivateFieldSet(this, _pressed, false);\n  _classPrivateFieldSet(this, _isTriggeredByRMB, true);\n\n  // There is thrown \"mouseover\" event right after opening a context menu. This flag inform that handle\n  // shouldn't be drawn just after removing it.\n  this.hot._registerImmediate(() => {\n    _classPrivateFieldSet(this, _isTriggeredByRMB, false);\n  });\n}\nfunction _onModifyRowHeight2(height, row) {\n  let newHeight = height;\n  if (this.enabled) {\n    const physicalRow = this.hot.toPhysicalRow(row);\n    const rowHeight = _classPrivateFieldGet(this, _rowHeightsMap).getValueAtIndex(physicalRow);\n    if (this.hot.getSettings()[PLUGIN_KEY] && rowHeight) {\n      newHeight = rowHeight;\n    }\n  }\n  return newHeight;\n}\nfunction _onMapInit2() {\n  const initialSetting = this.hot.getSettings()[PLUGIN_KEY];\n  const loadedManualRowHeights = this.loadManualRowHeights();\n  this.hot.batchExecution(() => {\n    if (typeof loadedManualRowHeights !== 'undefined') {\n      loadedManualRowHeights.forEach((height, index) => {\n        _classPrivateFieldGet(this, _rowHeightsMap).setValueAtIndex(index, height);\n      });\n    } else if (Array.isArray(initialSetting)) {\n      initialSetting.forEach((height, index) => {\n        _classPrivateFieldGet(this, _rowHeightsMap).setValueAtIndex(index, height);\n      });\n      _classPrivateFieldSet(this, _config, initialSetting);\n    } else if (initialSetting === true && Array.isArray(_classPrivateFieldGet(this, _config))) {\n      _classPrivateFieldGet(this, _config).forEach((height, index) => {\n        _classPrivateFieldGet(this, _rowHeightsMap).setValueAtIndex(index, height);\n      });\n    }\n  }, true);\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","obj","privateSet","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","privateMap","value","set","privateCollection","has","TypeError","_classPrivateMethodGet","receiver","fn","_classPrivateFieldSet","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorSet","call","writable","_classPrivateFieldGet","_classApplyDescriptorGet","action","get","BasePlugin","addClass","closest","hasClass","removeClass","outerWidth","isDetached","arrayEach","rangeEach","PhysicalIndexToValueMap","IndexToValueMap","ViewportRowsCalculator","PLUGIN_KEY","PLUGIN_PRIORITY","PERSISTENT_STATE_KEY","_currentTH","WeakMap","_currentRow","_selectedRows","_currentHeight","_newSize","_startY","_startHeight","_startOffset","_handle","_guide","_pressed","_isTriggeredByRMB","_dblclick","_autoresizeTimeout","_rowHeightsMap","_config","_onMouseOver","WeakSet","_onMouseDown","_onMouseMove","_onMouseUp","_onContextMenu","_onModifyRowHeight","_onMapInit","ManualRowResize","constructor","hotInstance","hot","rootDocument","createElement","inlineDir","isRtl","isEnabled","getSettings","enablePlugin","enabled","addLocalHook","_onMapInit2","rowIndexMapper","registerMap","pluginName","addHook","height","row","_onModifyRowHeight2","bindEvents","updatePlugin","disablePlugin","getValues","unregisterMap","saveManualRowHeights","runHooks","loadManualRowHeights","storedState","setManualSize","physicalRow","toPhysicalRow","newHeight","Math","max","DEFAULT_HEIGHT","setValueAtIndex","setupHandlePosition","TH","view","_wt","wt","cellCoords","wtTable","getCoords","headerWidth","box","getBoundingClientRect","fixedRowTop","getSetting","fixedRowBottom","countNotHiddenRowIndexes","relativeHeaderPosition","wtOverlays","topInlineStartCornerOverlay","getRelativeCellPosition","col","bottomInlineStartCornerOverlay","inlineStartOverlay","getVisualFromRenderableIndex","isFullRowSelected","selection","isSelectedByCorner","isSelectedByRowHeader","isSelected","selectionRanges","getSelectedRange","selectionRange","fromRow","getTopStartCorner","toRow","getBottomStartCorner","rowIndex","includes","push","top","parseInt","style","start","width","rootElement","appendChild","refreshHandlePosition","setupGuidePosition","handleWidth","handleEndPosition","maximumVisibleElementWidth","refreshGuidePosition","hideHandleAndGuide","checkIfRowHeader","element","tbody","clone","TBODY","getClosestTHParent","tagName","parentNode","getActualRowHeight","walkontableHeight","getRowHeight","undefined","afterMouseDownTimeout","render","forceFullRender","adjustElementsSize","resize","forceRender","hookNewSize","selectedRowsLength","length","selectedRow","rootWindow","eventManager","addEventListener","e","_onMouseOver2","_onMouseDown2","_onMouseMove2","_onMouseUp2","_onContextMenu2","destroy","event","target","th","setTimeout","_registerTimeout","pageY","removeChild","_registerImmediate","rowHeight","getValueAtIndex","initialSetting","loadedManualRowHeights","batchExecution","forEach","index","Array","isArray"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/plugins/manualRowResize/manualRowResize.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass, closest, hasClass, removeClass, outerWidth, isDetached } from \"../../helpers/dom/element.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { ViewportRowsCalculator } from \"../../3rdparty/walkontable/src/index.mjs\"; // Developer note! Whenever you make a change in this file, make an analogous change in manualColumnResize.js\nexport const PLUGIN_KEY = 'manualRowResize';\nexport const PLUGIN_PRIORITY = 30;\nconst PERSISTENT_STATE_KEY = 'manualRowHeights';\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualRowResize\n * @class ManualRowResize\n *\n * @description\n * This plugin allows to change rows height. To make rows height persistent the {@link Options#persistentState}\n * plugin should be enabled.\n *\n * The plugin creates additional components to make resizing possibly using user interface:\n * - handle - the draggable element that sets the desired height of the row.\n * - guide - the helper guide that shows the desired height as a horizontal guide.\n */\nvar _currentTH = /*#__PURE__*/new WeakMap();\nvar _currentRow = /*#__PURE__*/new WeakMap();\nvar _selectedRows = /*#__PURE__*/new WeakMap();\nvar _currentHeight = /*#__PURE__*/new WeakMap();\nvar _newSize = /*#__PURE__*/new WeakMap();\nvar _startY = /*#__PURE__*/new WeakMap();\nvar _startHeight = /*#__PURE__*/new WeakMap();\nvar _startOffset = /*#__PURE__*/new WeakMap();\nvar _handle = /*#__PURE__*/new WeakMap();\nvar _guide = /*#__PURE__*/new WeakMap();\nvar _pressed = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByRMB = /*#__PURE__*/new WeakMap();\nvar _dblclick = /*#__PURE__*/new WeakMap();\nvar _autoresizeTimeout = /*#__PURE__*/new WeakMap();\nvar _rowHeightsMap = /*#__PURE__*/new WeakMap();\nvar _config = /*#__PURE__*/new WeakMap();\nvar _onMouseOver = /*#__PURE__*/new WeakSet();\nvar _onMouseDown = /*#__PURE__*/new WeakSet();\nvar _onMouseMove = /*#__PURE__*/new WeakSet();\nvar _onMouseUp = /*#__PURE__*/new WeakSet();\nvar _onContextMenu = /*#__PURE__*/new WeakSet();\nvar _onModifyRowHeight = /*#__PURE__*/new WeakSet();\nvar _onMapInit = /*#__PURE__*/new WeakSet();\nexport class ManualRowResize extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n\n  /**\n   * @type {HTMLTableCellElement}\n   */\n\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Callback to call on map's `init` local hook.\n     */\n    _classPrivateMethodInitSpec(this, _onMapInit);\n    /**\n     * Modifies the provided row height, based on the plugin settings.\n     *\n     * @param {number} height Row height.\n     * @param {number} row Visual row index.\n     * @returns {number}\n     */\n    _classPrivateMethodInitSpec(this, _onModifyRowHeight);\n    /**\n     * Callback for \"contextmenu\" event triggered on element showing move handle. It removes handle and guide elements.\n     */\n    _classPrivateMethodInitSpec(this, _onContextMenu);\n    /**\n     * 'mouseup' event callback - apply the row resizing.\n     *\n     * @fires Hooks#beforeRowResize\n     * @fires Hooks#afterRowResize\n     */\n    _classPrivateMethodInitSpec(this, _onMouseUp);\n    /**\n     * 'mousemove' event callback - refresh the handle and guide positions, cache the new row height.\n     *\n     * @param {MouseEvent} event The mouse event.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseMove);\n    /**\n     * 'mousedown' event callback.\n     *\n     * @param {MouseEvent} event The mouse event.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseDown);\n    /**\n     * 'mouseover' event callback - set the handle position.\n     *\n     * @param {MouseEvent} event The mouse event.\n     */\n    _classPrivateMethodInitSpec(this, _onMouseOver);\n    _classPrivateFieldInitSpec(this, _currentTH, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentRow, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number[]}\n     */\n    _classPrivateFieldInitSpec(this, _selectedRows, {\n      writable: true,\n      value: []\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentHeight, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _newSize, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startY, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startHeight, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startOffset, {\n      writable: true,\n      value: null\n    });\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _handle, {\n      writable: true,\n      value: this.hot.rootDocument.createElement('DIV')\n    });\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _guide, {\n      writable: true,\n      value: this.hot.rootDocument.createElement('DIV')\n    });\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _pressed, {\n      writable: true,\n      value: false\n    });\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isTriggeredByRMB, {\n      writable: true,\n      value: false\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _dblclick, {\n      writable: true,\n      value: 0\n    });\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _autoresizeTimeout, {\n      writable: true,\n      value: null\n    });\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical row indexes.\n     *\n     * @type {PhysicalIndexToValueMap}\n     */\n    _classPrivateFieldInitSpec(this, _rowHeightsMap, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Private pool to save configuration from updateSettings.\n     *\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _config, {\n      writable: true,\n      value: void 0\n    });\n    addClass(_classPrivateFieldGet(this, _handle), 'manualRowResizer');\n    addClass(_classPrivateFieldGet(this, _guide), 'manualRowResizerGuide');\n  }\n\n  /**\n   * @private\n   * @returns {string}\n   */\n  get inlineDir() {\n    return this.hot.isRtl() ? 'right' : 'left';\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualRowResize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    _classPrivateFieldSet(this, _rowHeightsMap, new IndexToValueMap());\n    _classPrivateFieldGet(this, _rowHeightsMap).addLocalHook('init', () => _classPrivateMethodGet(this, _onMapInit, _onMapInit2).call(this));\n    this.hot.rowIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(this, _rowHeightsMap));\n    this.addHook('modifyRowHeight', (height, row) => _classPrivateMethodGet(this, _onModifyRowHeight, _onModifyRowHeight2).call(this, height, row));\n    this.bindEvents();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualRowResize`](@/api/options.md#manualrowresize)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    _classPrivateFieldSet(this, _config, _classPrivateFieldGet(this, _rowHeightsMap).getValues());\n    this.hot.rowIndexMapper.unregisterMap(this.pluginName);\n    super.disablePlugin();\n  }\n\n  /**\n   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be\n   * enabled).\n   *\n   * @fires Hooks#persistentStateSave\n   */\n  saveManualRowHeights() {\n    this.hot.runHooks('persistentStateSave', PERSISTENT_STATE_KEY, _classPrivateFieldGet(this, _rowHeightsMap).getValues());\n  }\n\n  /**\n   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option\n   * has be enabled).\n   *\n   * @returns {Array}\n   * @fires Hooks#persistentStateLoad\n   */\n  loadManualRowHeights() {\n    const storedState = {};\n    this.hot.runHooks('persistentStateLoad', PERSISTENT_STATE_KEY, storedState);\n    return storedState.value;\n  }\n\n  /**\n   * Sets the new height for specified row index.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} height Row height.\n   * @returns {number} Returns new height.\n   */\n  setManualSize(row, height) {\n    const physicalRow = this.hot.toPhysicalRow(row);\n    const newHeight = Math.max(height, ViewportRowsCalculator.DEFAULT_HEIGHT);\n    _classPrivateFieldGet(this, _rowHeightsMap).setValueAtIndex(physicalRow, newHeight);\n    return newHeight;\n  }\n\n  /**\n   * Sets the resize handle position.\n   *\n   * @private\n   * @param {HTMLCellElement} TH TH HTML element.\n   */\n  setupHandlePosition(TH) {\n    _classPrivateFieldSet(this, _currentTH, TH);\n    const {\n      view\n    } = this.hot;\n    const {\n      _wt: wt\n    } = view;\n    const cellCoords = wt.wtTable.getCoords(_classPrivateFieldGet(this, _currentTH));\n    const row = cellCoords.row;\n\n    // Ignore row headers.\n    if (row < 0) {\n      return;\n    }\n    const headerWidth = outerWidth(_classPrivateFieldGet(this, _currentTH));\n    const box = _classPrivateFieldGet(this, _currentTH).getBoundingClientRect();\n    // Read \"fixedRowsTop\" and \"fixedRowsBottom\" through the Walkontable as in that context, the fixed\n    // rows are modified (reduced by the number of hidden rows) by TableView module.\n    const fixedRowTop = row < wt.getSetting('fixedRowsTop');\n    const fixedRowBottom = row >= view.countNotHiddenRowIndexes(0, 1) - wt.getSetting('fixedRowsBottom');\n    let relativeHeaderPosition;\n    if (fixedRowTop) {\n      relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet(this, _currentTH), cellCoords.row, cellCoords.col);\n    } else if (fixedRowBottom) {\n      relativeHeaderPosition = wt.wtOverlays.bottomInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet(this, _currentTH), cellCoords.row, cellCoords.col);\n    }\n\n    // If the TH is not a child of the top-left/bottom-left overlay, recalculate using\n    // the left overlay - as this overlay contains the rest of the headers.\n    if (!relativeHeaderPosition) {\n      relativeHeaderPosition = wt.wtOverlays.inlineStartOverlay.getRelativeCellPosition(_classPrivateFieldGet(this, _currentTH), cellCoords.row, cellCoords.col);\n    }\n    _classPrivateFieldSet(this, _currentRow, this.hot.rowIndexMapper.getVisualFromRenderableIndex(row));\n    _classPrivateFieldSet(this, _selectedRows, []);\n    const isFullRowSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByRowHeader();\n    if (this.hot.selection.isSelected() && isFullRowSelected) {\n      const selectionRanges = this.hot.getSelectedRange();\n      arrayEach(selectionRanges, selectionRange => {\n        const fromRow = selectionRange.getTopStartCorner().row;\n        const toRow = selectionRange.getBottomStartCorner().row;\n\n        // Add every selected row for resize action.\n        rangeEach(fromRow, toRow, rowIndex => {\n          if (!_classPrivateFieldGet(this, _selectedRows).includes(rowIndex)) {\n            _classPrivateFieldGet(this, _selectedRows).push(rowIndex);\n          }\n        });\n      });\n    }\n\n    // Resizing element beyond the current selection (also when there is no selection).\n    if (!_classPrivateFieldGet(this, _selectedRows).includes(_classPrivateFieldGet(this, _currentRow))) {\n      _classPrivateFieldSet(this, _selectedRows, [_classPrivateFieldGet(this, _currentRow)]);\n    }\n    _classPrivateFieldSet(this, _startOffset, relativeHeaderPosition.top - 6);\n    _classPrivateFieldSet(this, _startHeight, parseInt(box.height, 10));\n    _classPrivateFieldGet(this, _handle).style.top = `${_classPrivateFieldGet(this, _startOffset) + _classPrivateFieldGet(this, _startHeight)}px`;\n    _classPrivateFieldGet(this, _handle).style[this.inlineDir] = `${relativeHeaderPosition.start}px`;\n    _classPrivateFieldGet(this, _handle).style.width = `${headerWidth}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(this, _handle));\n  }\n\n  /**\n   * Refresh the resize handle position.\n   *\n   * @private\n   */\n  refreshHandlePosition() {\n    _classPrivateFieldGet(this, _handle).style.top = `${_classPrivateFieldGet(this, _startOffset) + _classPrivateFieldGet(this, _currentHeight)}px`;\n  }\n\n  /**\n   * Sets the resize guide position.\n   *\n   * @private\n   */\n  setupGuidePosition() {\n    const handleWidth = parseInt(outerWidth(_classPrivateFieldGet(this, _handle)), 10);\n    const handleEndPosition = parseInt(_classPrivateFieldGet(this, _handle).style[this.inlineDir], 10) + handleWidth;\n    const maximumVisibleElementWidth = parseInt(this.hot.view.maximumVisibleElementWidth(0), 10);\n    addClass(_classPrivateFieldGet(this, _handle), 'active');\n    addClass(_classPrivateFieldGet(this, _guide), 'active');\n    _classPrivateFieldGet(this, _guide).style.top = _classPrivateFieldGet(this, _handle).style.top;\n    _classPrivateFieldGet(this, _guide).style[this.inlineDir] = `${handleEndPosition}px`;\n    _classPrivateFieldGet(this, _guide).style.width = `${maximumVisibleElementWidth - handleWidth}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(this, _guide));\n  }\n\n  /**\n   * Refresh the resize guide position.\n   *\n   * @private\n   */\n  refreshGuidePosition() {\n    _classPrivateFieldGet(this, _guide).style.top = _classPrivateFieldGet(this, _handle).style.top;\n  }\n\n  /**\n   * Hides both the resize handle and resize guide.\n   *\n   * @private\n   */\n  hideHandleAndGuide() {\n    removeClass(_classPrivateFieldGet(this, _handle), 'active');\n    removeClass(_classPrivateFieldGet(this, _guide), 'active');\n  }\n\n  /**\n   * Checks if provided element is considered as a row header.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {boolean}\n   */\n  checkIfRowHeader(element) {\n    const tbody = closest(element, ['TBODY'], this.hot.rootElement);\n    const {\n      inlineStartOverlay,\n      topInlineStartCornerOverlay,\n      bottomInlineStartCornerOverlay\n    } = this.hot.view._wt.wtOverlays;\n    return [inlineStartOverlay.clone.wtTable.TBODY, topInlineStartCornerOverlay.clone.wtTable.TBODY, bottomInlineStartCornerOverlay.clone.wtTable.TBODY].includes(tbody);\n  }\n\n  /**\n   * Gets the TH element from the provided element.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {HTMLElement}\n   */\n  getClosestTHParent(element) {\n    if (element.tagName !== 'TABLE') {\n      if (element.tagName === 'TH') {\n        return element;\n      }\n      return this.getClosestTHParent(element.parentNode);\n    }\n    return null;\n  }\n\n  /**\n   * Returns the actual height for the provided row index.\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @returns {number} Actual row height.\n   */\n  getActualRowHeight(row) {\n    // TODO: this should utilize `this.hot.getRowHeight` after it's fixed and working properly.\n    const walkontableHeight = this.hot.view._wt.wtTable.getRowHeight(row);\n    if (walkontableHeight !== undefined && _classPrivateFieldGet(this, _newSize) < walkontableHeight) {\n      return walkontableHeight;\n    }\n    return _classPrivateFieldGet(this, _newSize);\n  }\n  /**\n   * Auto-size row after doubleclick - callback.\n   *\n   * @private\n   * @fires Hooks#beforeRowResize\n   * @fires Hooks#afterRowResize\n   */\n  afterMouseDownTimeout() {\n    const render = () => {\n      this.hot.forceFullRender = true;\n      this.hot.view.render(); // updates all\n      this.hot.view.adjustElementsSize(true);\n    };\n    const resize = (row, forceRender) => {\n      const hookNewSize = this.hot.runHooks('beforeRowResize', this.getActualRowHeight(row), row, true);\n      if (hookNewSize !== undefined) {\n        _classPrivateFieldSet(this, _newSize, hookNewSize);\n      }\n      this.setManualSize(row, _classPrivateFieldGet(this, _newSize)); // double click sets auto row size\n\n      this.hot.runHooks('afterRowResize', this.getActualRowHeight(row), row, true);\n      if (forceRender) {\n        render();\n      }\n    };\n    if (_classPrivateFieldGet(this, _dblclick) >= 2) {\n      const selectedRowsLength = _classPrivateFieldGet(this, _selectedRows).length;\n      if (selectedRowsLength > 1) {\n        arrayEach(_classPrivateFieldGet(this, _selectedRows), selectedRow => {\n          resize(selectedRow);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(this, _selectedRows), selectedRow => {\n          resize(selectedRow, true);\n        });\n      }\n    }\n    _classPrivateFieldSet(this, _dblclick, 0);\n    _classPrivateFieldSet(this, _autoresizeTimeout, null);\n  }\n  /**\n   * Binds the mouse events.\n   *\n   * @private\n   */\n  bindEvents() {\n    const {\n      rootElement,\n      rootWindow\n    } = this.hot;\n    this.eventManager.addEventListener(rootElement, 'mouseover', e => _classPrivateMethodGet(this, _onMouseOver, _onMouseOver2).call(this, e));\n    this.eventManager.addEventListener(rootElement, 'mousedown', e => _classPrivateMethodGet(this, _onMouseDown, _onMouseDown2).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mousemove', e => _classPrivateMethodGet(this, _onMouseMove, _onMouseMove2).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mouseup', () => _classPrivateMethodGet(this, _onMouseUp, _onMouseUp2).call(this));\n    this.eventManager.addEventListener(_classPrivateFieldGet(this, _handle), 'contextmenu', () => _classPrivateMethodGet(this, _onContextMenu, _onContextMenu2).call(this));\n  }\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}\nfunction _onMouseOver2(event) {\n  // Workaround for #6926 - if the `event.target` is temporarily detached, we can skip this callback and wait for\n  // the next `onmouseover`.\n  if (isDetached(event.target)) {\n    return;\n  }\n\n  // A \"mouseover\" action is triggered right after executing \"contextmenu\" event. It should be ignored.\n  if (_classPrivateFieldGet(this, _isTriggeredByRMB) === true) {\n    return;\n  }\n  if (this.checkIfRowHeader(event.target)) {\n    const th = this.getClosestTHParent(event.target);\n    if (th) {\n      if (!_classPrivateFieldGet(this, _pressed)) {\n        this.setupHandlePosition(th);\n      }\n    }\n  }\n}\nfunction _onMouseDown2(event) {\n  if (hasClass(event.target, 'manualRowResizer')) {\n    this.setupHandlePosition(_classPrivateFieldGet(this, _currentTH));\n    this.setupGuidePosition();\n    _classPrivateFieldSet(this, _pressed, true);\n    if (_classPrivateFieldGet(this, _autoresizeTimeout) === null) {\n      _classPrivateFieldSet(this, _autoresizeTimeout, setTimeout(() => this.afterMouseDownTimeout(), 500));\n      this.hot._registerTimeout(_classPrivateFieldGet(this, _autoresizeTimeout));\n    }\n    _classPrivateFieldSet(this, _dblclick, _classPrivateFieldGet(this, _dblclick) + 1);\n    _classPrivateFieldSet(this, _startY, event.pageY);\n    _classPrivateFieldSet(this, _newSize, _classPrivateFieldGet(this, _startHeight));\n  }\n}\nfunction _onMouseMove2(event) {\n  if (_classPrivateFieldGet(this, _pressed)) {\n    _classPrivateFieldSet(this, _currentHeight, _classPrivateFieldGet(this, _startHeight) + (event.pageY - _classPrivateFieldGet(this, _startY)));\n    arrayEach(_classPrivateFieldGet(this, _selectedRows), selectedRow => {\n      _classPrivateFieldSet(this, _newSize, this.setManualSize(selectedRow, _classPrivateFieldGet(this, _currentHeight)));\n    });\n    this.refreshHandlePosition();\n    this.refreshGuidePosition();\n  }\n}\nfunction _onMouseUp2() {\n  const render = () => {\n    this.hot.forceFullRender = true;\n    this.hot.view.render(); // updates all\n    this.hot.view.adjustElementsSize(true);\n  };\n  const runHooks = (row, forceRender) => {\n    this.hot.runHooks('beforeRowResize', this.getActualRowHeight(row), row, false);\n    if (forceRender) {\n      render();\n    }\n    this.saveManualRowHeights();\n    this.hot.runHooks('afterRowResize', this.getActualRowHeight(row), row, false);\n  };\n  if (_classPrivateFieldGet(this, _pressed)) {\n    this.hideHandleAndGuide();\n    _classPrivateFieldSet(this, _pressed, false);\n    if (_classPrivateFieldGet(this, _newSize) !== _classPrivateFieldGet(this, _startHeight)) {\n      const selectedRowsLength = _classPrivateFieldGet(this, _selectedRows).length;\n      if (selectedRowsLength > 1) {\n        arrayEach(_classPrivateFieldGet(this, _selectedRows), selectedRow => {\n          runHooks(selectedRow);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(this, _selectedRows), selectedRow => {\n          runHooks(selectedRow, true);\n        });\n      }\n    }\n    this.setupHandlePosition(_classPrivateFieldGet(this, _currentTH));\n  }\n}\nfunction _onContextMenu2() {\n  this.hideHandleAndGuide();\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(this, _handle));\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(this, _guide));\n  _classPrivateFieldSet(this, _pressed, false);\n  _classPrivateFieldSet(this, _isTriggeredByRMB, true);\n\n  // There is thrown \"mouseover\" event right after opening a context menu. This flag inform that handle\n  // shouldn't be drawn just after removing it.\n  this.hot._registerImmediate(() => {\n    _classPrivateFieldSet(this, _isTriggeredByRMB, false);\n  });\n}\nfunction _onModifyRowHeight2(height, row) {\n  let newHeight = height;\n  if (this.enabled) {\n    const physicalRow = this.hot.toPhysicalRow(row);\n    const rowHeight = _classPrivateFieldGet(this, _rowHeightsMap).getValueAtIndex(physicalRow);\n    if (this.hot.getSettings()[PLUGIN_KEY] && rowHeight) {\n      newHeight = rowHeight;\n    }\n  }\n  return newHeight;\n}\nfunction _onMapInit2() {\n  const initialSetting = this.hot.getSettings()[PLUGIN_KEY];\n  const loadedManualRowHeights = this.loadManualRowHeights();\n  this.hot.batchExecution(() => {\n    if (typeof loadedManualRowHeights !== 'undefined') {\n      loadedManualRowHeights.forEach((height, index) => {\n        _classPrivateFieldGet(this, _rowHeightsMap).setValueAtIndex(index, height);\n      });\n    } else if (Array.isArray(initialSetting)) {\n      initialSetting.forEach((height, index) => {\n        _classPrivateFieldGet(this, _rowHeightsMap).setValueAtIndex(index, height);\n      });\n      _classPrivateFieldSet(this, _config, initialSetting);\n    } else if (initialSetting === true && Array.isArray(_classPrivateFieldGet(this, _config))) {\n      _classPrivateFieldGet(this, _config).forEach((height, index) => {\n        _classPrivateFieldGet(this, _rowHeightsMap).setValueAtIndex(index, height);\n      });\n    }\n  }, true);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}