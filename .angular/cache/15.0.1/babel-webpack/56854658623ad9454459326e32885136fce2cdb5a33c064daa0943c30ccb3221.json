{"ast":null,"code":"import { isRightClick as isRightClickEvent, isLeftClick as isLeftClickEvent } from \"./../helpers/dom/event.mjs\";\n/**\n * MouseDown handler.\n *\n * @param {object} options The handler options.\n * @param {boolean} options.isShiftKey The flag which indicates if the shift key is pressed.\n * @param {boolean} options.isLeftClick The flag which indicates if the left mouse button is pressed.\n * @param {boolean} options.isRightClick The flag which indicates if the right mouse button is pressed.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function mouseDown(_ref) {\n  let {\n    isShiftKey,\n    isLeftClick,\n    isRightClick,\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory\n  } = _ref;\n  const currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;\n  const selectedCorner = selection.isSelectedByCorner();\n  const selectedRow = selection.isSelectedByRowHeader();\n  if (isShiftKey && currentSelection) {\n    if (coords.row >= 0 && coords.col >= 0 && !controller.cell) {\n      selection.setRangeEnd(coords);\n    } else if ((selectedCorner || selectedRow) && coords.row >= 0 && coords.col >= 0 && !controller.cell) {\n      selection.setRangeEnd(cellCoordsFactory(coords.row, coords.col));\n    } else if (selectedCorner && coords.row < 0 && !controller.column) {\n      selection.setRangeEnd(cellCoordsFactory(currentSelection.to.row, coords.col));\n    } else if (selectedRow && coords.col < 0 && !controller.row) {\n      selection.setRangeEnd(cellCoordsFactory(coords.row, currentSelection.to.col));\n    } else if ((!selectedCorner && !selectedRow && coords.col < 0 || selectedCorner && coords.col < 0) && !controller.row) {\n      selection.selectRows(Math.max(currentSelection.from.row, 0), coords.row, coords.col);\n    } else if ((!selectedCorner && !selectedRow && coords.row < 0 || selectedRow && coords.row < 0) && !controller.column) {\n      selection.selectColumns(Math.max(currentSelection.from.col, 0), coords.col, coords.row);\n    }\n  } else {\n    const allowRightClickSelection = !selection.inInSelection(coords);\n    const performSelection = isLeftClick || isRightClick && allowRightClickSelection;\n\n    // clicked row header and when some column was selected\n    if (coords.row < 0 && coords.col >= 0 && !controller.column) {\n      if (performSelection) {\n        selection.selectColumns(coords.col, coords.col, coords.row);\n      }\n\n      // clicked column header and when some row was selected\n    } else if (coords.col < 0 && coords.row >= 0 && !controller.row) {\n      if (performSelection) {\n        selection.selectRows(coords.row, coords.row, coords.col);\n      }\n    } else if (coords.col >= 0 && coords.row >= 0 && !controller.cell) {\n      if (performSelection) {\n        selection.setRangeStart(coords);\n      }\n    } else if (coords.col < 0 && coords.row < 0) {\n      selection.selectAll(true, true, {\n        disableHeadersHighlight: true,\n        focusPosition: {\n          row: 0,\n          col: 0\n        }\n      });\n    }\n  }\n}\n\n/**\n * MouseOver handler.\n *\n * @param {object} options The handler options.\n * @param {boolean} options.isLeftClick Indicates that event was fired using the left mouse button.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function mouseOver(_ref2) {\n  let {\n    isLeftClick,\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory\n  } = _ref2;\n  if (!isLeftClick) {\n    return;\n  }\n  const selectedRow = selection.isSelectedByRowHeader();\n  const selectedColumn = selection.isSelectedByColumnHeader();\n  const countCols = selection.tableProps.countCols();\n  const countRows = selection.tableProps.countRows();\n  if (selectedColumn && !controller.column) {\n    selection.setRangeEnd(cellCoordsFactory(countRows - 1, coords.col));\n  } else if (selectedRow && !controller.row) {\n    selection.setRangeEnd(cellCoordsFactory(coords.row, countCols - 1));\n  } else if (!controller.cell) {\n    selection.setRangeEnd(coords);\n  }\n}\nconst handlers = new Map([['mousedown', mouseDown], ['mouseover', mouseOver], ['touchstart', mouseDown]]);\n\n/**\n * Mouse handler for selection functionality.\n *\n * @param {Event} event An native event to handle.\n * @param {object} options The handler options.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function handleMouseEvent(event, _ref3) {\n  let {\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory\n  } = _ref3;\n  handlers.get(event.type)({\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory,\n    isShiftKey: event.shiftKey,\n    isLeftClick: isLeftClickEvent(event) || event.type === 'touchstart',\n    isRightClick: isRightClickEvent(event)\n  });\n}","map":{"version":3,"names":["isRightClick","isRightClickEvent","isLeftClick","isLeftClickEvent","mouseDown","_ref","isShiftKey","coords","selection","controller","cellCoordsFactory","currentSelection","isSelected","getSelectedRange","current","selectedCorner","isSelectedByCorner","selectedRow","isSelectedByRowHeader","row","col","cell","setRangeEnd","column","to","selectRows","Math","max","from","selectColumns","allowRightClickSelection","inInSelection","performSelection","setRangeStart","selectAll","disableHeadersHighlight","focusPosition","mouseOver","_ref2","selectedColumn","isSelectedByColumnHeader","countCols","tableProps","countRows","handlers","Map","handleMouseEvent","event","_ref3","get","type","shiftKey"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/selection/mouseEventHandler.mjs"],"sourcesContent":["import { isRightClick as isRightClickEvent, isLeftClick as isLeftClickEvent } from \"./../helpers/dom/event.mjs\";\n/**\n * MouseDown handler.\n *\n * @param {object} options The handler options.\n * @param {boolean} options.isShiftKey The flag which indicates if the shift key is pressed.\n * @param {boolean} options.isLeftClick The flag which indicates if the left mouse button is pressed.\n * @param {boolean} options.isRightClick The flag which indicates if the right mouse button is pressed.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function mouseDown(_ref) {\n  let {\n    isShiftKey,\n    isLeftClick,\n    isRightClick,\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory\n  } = _ref;\n  const currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;\n  const selectedCorner = selection.isSelectedByCorner();\n  const selectedRow = selection.isSelectedByRowHeader();\n  if (isShiftKey && currentSelection) {\n    if (coords.row >= 0 && coords.col >= 0 && !controller.cell) {\n      selection.setRangeEnd(coords);\n    } else if ((selectedCorner || selectedRow) && coords.row >= 0 && coords.col >= 0 && !controller.cell) {\n      selection.setRangeEnd(cellCoordsFactory(coords.row, coords.col));\n    } else if (selectedCorner && coords.row < 0 && !controller.column) {\n      selection.setRangeEnd(cellCoordsFactory(currentSelection.to.row, coords.col));\n    } else if (selectedRow && coords.col < 0 && !controller.row) {\n      selection.setRangeEnd(cellCoordsFactory(coords.row, currentSelection.to.col));\n    } else if ((!selectedCorner && !selectedRow && coords.col < 0 || selectedCorner && coords.col < 0) && !controller.row) {\n      selection.selectRows(Math.max(currentSelection.from.row, 0), coords.row, coords.col);\n    } else if ((!selectedCorner && !selectedRow && coords.row < 0 || selectedRow && coords.row < 0) && !controller.column) {\n      selection.selectColumns(Math.max(currentSelection.from.col, 0), coords.col, coords.row);\n    }\n  } else {\n    const allowRightClickSelection = !selection.inInSelection(coords);\n    const performSelection = isLeftClick || isRightClick && allowRightClickSelection;\n\n    // clicked row header and when some column was selected\n    if (coords.row < 0 && coords.col >= 0 && !controller.column) {\n      if (performSelection) {\n        selection.selectColumns(coords.col, coords.col, coords.row);\n      }\n\n      // clicked column header and when some row was selected\n    } else if (coords.col < 0 && coords.row >= 0 && !controller.row) {\n      if (performSelection) {\n        selection.selectRows(coords.row, coords.row, coords.col);\n      }\n    } else if (coords.col >= 0 && coords.row >= 0 && !controller.cell) {\n      if (performSelection) {\n        selection.setRangeStart(coords);\n      }\n    } else if (coords.col < 0 && coords.row < 0) {\n      selection.selectAll(true, true, {\n        disableHeadersHighlight: true,\n        focusPosition: {\n          row: 0,\n          col: 0\n        }\n      });\n    }\n  }\n}\n\n/**\n * MouseOver handler.\n *\n * @param {object} options The handler options.\n * @param {boolean} options.isLeftClick Indicates that event was fired using the left mouse button.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function mouseOver(_ref2) {\n  let {\n    isLeftClick,\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory\n  } = _ref2;\n  if (!isLeftClick) {\n    return;\n  }\n  const selectedRow = selection.isSelectedByRowHeader();\n  const selectedColumn = selection.isSelectedByColumnHeader();\n  const countCols = selection.tableProps.countCols();\n  const countRows = selection.tableProps.countRows();\n  if (selectedColumn && !controller.column) {\n    selection.setRangeEnd(cellCoordsFactory(countRows - 1, coords.col));\n  } else if (selectedRow && !controller.row) {\n    selection.setRangeEnd(cellCoordsFactory(coords.row, countCols - 1));\n  } else if (!controller.cell) {\n    selection.setRangeEnd(coords);\n  }\n}\nconst handlers = new Map([['mousedown', mouseDown], ['mouseover', mouseOver], ['touchstart', mouseDown]]);\n\n/**\n * Mouse handler for selection functionality.\n *\n * @param {Event} event An native event to handle.\n * @param {object} options The handler options.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function handleMouseEvent(event, _ref3) {\n  let {\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory\n  } = _ref3;\n  handlers.get(event.type)({\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory,\n    isShiftKey: event.shiftKey,\n    isLeftClick: isLeftClickEvent(event) || event.type === 'touchstart',\n    isRightClick: isRightClickEvent(event)\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}