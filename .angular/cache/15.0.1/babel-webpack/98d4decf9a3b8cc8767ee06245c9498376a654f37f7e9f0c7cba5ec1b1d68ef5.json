{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { addClass, outerWidth, outerHeight } from \"../../helpers/dom/element.mjs\";\n/**\n * Comment editor for the Comments plugin.\n *\n * @private\n * @class CommentEditor\n */\nclass CommentEditor {\n  static get CLASS_EDITOR_CONTAINER() {\n    return 'htCommentsContainer';\n  }\n  static get CLASS_EDITOR() {\n    return 'htComments';\n  }\n  static get CLASS_INPUT() {\n    return 'htCommentTextArea';\n  }\n  static get CLASS_CELL() {\n    return 'htCommentCell';\n  }\n\n  /**\n   * @type {HTMLDocument}\n   */\n\n  constructor(rootDocument, isRtl) {\n    _defineProperty(this, \"rootDocument\", void 0);\n    /**\n     * @type {boolean}\n     */\n    _defineProperty(this, \"isRtl\", false);\n    /**\n     * @type {HTMLElement}\n     */\n    _defineProperty(this, \"container\", null);\n    /**\n     * @type {HTMLElement}\n     */\n    _defineProperty(this, \"editor\", void 0);\n    /**\n     * @type {CSSStyleDeclaration}\n     */\n    _defineProperty(this, \"editorStyle\", void 0);\n    /**\n     * @type {boolean}\n     */\n    _defineProperty(this, \"hidden\", true);\n    this.rootDocument = rootDocument;\n    this.isRtl = isRtl;\n    this.editor = this.createEditor();\n    this.editorStyle = this.editor.style;\n    this.hide();\n  }\n\n  /**\n   * Set position of the comments editor according to the  provided x and y coordinates.\n   *\n   * @param {number} x X position (in pixels).\n   * @param {number} y Y position (in pixels).\n   */\n  setPosition(x, y) {\n    this.editorStyle.left = `${x}px`;\n    this.editorStyle.top = `${y}px`;\n  }\n\n  /**\n   * Set the editor size according to the provided arguments.\n   *\n   * @param {number} width Width in pixels.\n   * @param {number} height Height in pixels.\n   */\n  setSize(width, height) {\n    if (width && height) {\n      const input = this.getInputElement();\n      input.style.width = `${width}px`;\n      input.style.height = `${height}px`;\n    }\n  }\n\n  /**\n   * Returns the size of the comments editor.\n   *\n   * @returns {{ width: number, height: number }}\n   */\n  getSize() {\n    return {\n      width: outerWidth(this.getInputElement()),\n      height: outerHeight(this.getInputElement())\n    };\n  }\n\n  /**\n   * Reset the editor size to its initial state.\n   */\n  resetSize() {\n    const input = this.getInputElement();\n    input.style.width = '';\n    input.style.height = '';\n  }\n\n  /**\n   * Set the read-only state for the comments editor.\n   *\n   * @param {boolean} state The new read only state.\n   */\n  setReadOnlyState(state) {\n    const input = this.getInputElement();\n    input.readOnly = state;\n  }\n\n  /**\n   * Show the comments editor.\n   */\n  show() {\n    this.editorStyle.display = 'block';\n    this.hidden = false;\n  }\n\n  /**\n   * Hide the comments editor.\n   */\n  hide() {\n    if (!this.hidden) {\n      this.editorStyle.display = 'none';\n    }\n    this.hidden = true;\n  }\n\n  /**\n   * Checks if the editor is visible.\n   *\n   * @returns {boolean}\n   */\n  isVisible() {\n    return this.editorStyle.display === 'block';\n  }\n\n  /**\n   * Set the comment value.\n   *\n   * @param {string} [value] The value to use.\n   */\n  setValue() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const comment = value || '';\n    this.getInputElement().value = comment;\n  }\n\n  /**\n   * Get the comment value.\n   *\n   * @returns {string}\n   */\n  getValue() {\n    return this.getInputElement().value;\n  }\n\n  /**\n   * Checks if the comment input element is focused.\n   *\n   * @returns {boolean}\n   */\n  isFocused() {\n    return this.rootDocument.activeElement === this.getInputElement();\n  }\n\n  /**\n   * Focus the comments input element.\n   */\n  focus() {\n    this.getInputElement().focus();\n  }\n\n  /**\n   * Create the `textarea` to be used as a comments editor.\n   *\n   * @returns {HTMLElement}\n   */\n  createEditor() {\n    const editor = this.rootDocument.createElement('div');\n    const textArea = this.rootDocument.createElement('textarea');\n    editor.style.display = 'none';\n    this.container = this.rootDocument.createElement('div');\n    this.container.setAttribute('dir', this.isRtl ? 'rtl' : 'ltr');\n    addClass(this.container, CommentEditor.CLASS_EDITOR_CONTAINER);\n    this.rootDocument.body.appendChild(this.container);\n    addClass(editor, CommentEditor.CLASS_EDITOR);\n    addClass(textArea, CommentEditor.CLASS_INPUT);\n    textArea.setAttribute('data-hot-input', true);\n    editor.appendChild(textArea);\n    this.container.appendChild(editor);\n    return editor;\n  }\n\n  /**\n   * Get the input element.\n   *\n   * @returns {HTMLElement}\n   */\n  getInputElement() {\n    return this.editor.querySelector(`.${CommentEditor.CLASS_INPUT}`);\n  }\n\n  /**\n   * Destroy the comments editor.\n   */\n  destroy() {\n    const containerParentElement = this.container ? this.container.parentNode : null;\n    this.editor.parentNode.removeChild(this.editor);\n    this.editor = null;\n    this.editorStyle = null;\n    if (containerParentElement) {\n      containerParentElement.removeChild(this.container);\n    }\n  }\n}\nexport default CommentEditor;","map":{"version":3,"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","addClass","outerWidth","outerHeight","CommentEditor","CLASS_EDITOR_CONTAINER","CLASS_EDITOR","CLASS_INPUT","CLASS_CELL","constructor","rootDocument","isRtl","editor","createEditor","editorStyle","style","hide","setPosition","x","y","left","top","setSize","width","height","input","getInputElement","getSize","resetSize","setReadOnlyState","state","readOnly","show","display","hidden","isVisible","setValue","arguments","length","undefined","comment","getValue","isFocused","activeElement","focus","createElement","textArea","container","setAttribute","body","appendChild","querySelector","destroy","containerParentElement","parentNode","removeChild"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/plugins/comments/commentEditor.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { addClass, outerWidth, outerHeight } from \"../../helpers/dom/element.mjs\";\n/**\n * Comment editor for the Comments plugin.\n *\n * @private\n * @class CommentEditor\n */\nclass CommentEditor {\n  static get CLASS_EDITOR_CONTAINER() {\n    return 'htCommentsContainer';\n  }\n  static get CLASS_EDITOR() {\n    return 'htComments';\n  }\n  static get CLASS_INPUT() {\n    return 'htCommentTextArea';\n  }\n  static get CLASS_CELL() {\n    return 'htCommentCell';\n  }\n\n  /**\n   * @type {HTMLDocument}\n   */\n\n  constructor(rootDocument, isRtl) {\n    _defineProperty(this, \"rootDocument\", void 0);\n    /**\n     * @type {boolean}\n     */\n    _defineProperty(this, \"isRtl\", false);\n    /**\n     * @type {HTMLElement}\n     */\n    _defineProperty(this, \"container\", null);\n    /**\n     * @type {HTMLElement}\n     */\n    _defineProperty(this, \"editor\", void 0);\n    /**\n     * @type {CSSStyleDeclaration}\n     */\n    _defineProperty(this, \"editorStyle\", void 0);\n    /**\n     * @type {boolean}\n     */\n    _defineProperty(this, \"hidden\", true);\n    this.rootDocument = rootDocument;\n    this.isRtl = isRtl;\n    this.editor = this.createEditor();\n    this.editorStyle = this.editor.style;\n    this.hide();\n  }\n\n  /**\n   * Set position of the comments editor according to the  provided x and y coordinates.\n   *\n   * @param {number} x X position (in pixels).\n   * @param {number} y Y position (in pixels).\n   */\n  setPosition(x, y) {\n    this.editorStyle.left = `${x}px`;\n    this.editorStyle.top = `${y}px`;\n  }\n\n  /**\n   * Set the editor size according to the provided arguments.\n   *\n   * @param {number} width Width in pixels.\n   * @param {number} height Height in pixels.\n   */\n  setSize(width, height) {\n    if (width && height) {\n      const input = this.getInputElement();\n      input.style.width = `${width}px`;\n      input.style.height = `${height}px`;\n    }\n  }\n\n  /**\n   * Returns the size of the comments editor.\n   *\n   * @returns {{ width: number, height: number }}\n   */\n  getSize() {\n    return {\n      width: outerWidth(this.getInputElement()),\n      height: outerHeight(this.getInputElement())\n    };\n  }\n\n  /**\n   * Reset the editor size to its initial state.\n   */\n  resetSize() {\n    const input = this.getInputElement();\n    input.style.width = '';\n    input.style.height = '';\n  }\n\n  /**\n   * Set the read-only state for the comments editor.\n   *\n   * @param {boolean} state The new read only state.\n   */\n  setReadOnlyState(state) {\n    const input = this.getInputElement();\n    input.readOnly = state;\n  }\n\n  /**\n   * Show the comments editor.\n   */\n  show() {\n    this.editorStyle.display = 'block';\n    this.hidden = false;\n  }\n\n  /**\n   * Hide the comments editor.\n   */\n  hide() {\n    if (!this.hidden) {\n      this.editorStyle.display = 'none';\n    }\n    this.hidden = true;\n  }\n\n  /**\n   * Checks if the editor is visible.\n   *\n   * @returns {boolean}\n   */\n  isVisible() {\n    return this.editorStyle.display === 'block';\n  }\n\n  /**\n   * Set the comment value.\n   *\n   * @param {string} [value] The value to use.\n   */\n  setValue() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const comment = value || '';\n    this.getInputElement().value = comment;\n  }\n\n  /**\n   * Get the comment value.\n   *\n   * @returns {string}\n   */\n  getValue() {\n    return this.getInputElement().value;\n  }\n\n  /**\n   * Checks if the comment input element is focused.\n   *\n   * @returns {boolean}\n   */\n  isFocused() {\n    return this.rootDocument.activeElement === this.getInputElement();\n  }\n\n  /**\n   * Focus the comments input element.\n   */\n  focus() {\n    this.getInputElement().focus();\n  }\n\n  /**\n   * Create the `textarea` to be used as a comments editor.\n   *\n   * @returns {HTMLElement}\n   */\n  createEditor() {\n    const editor = this.rootDocument.createElement('div');\n    const textArea = this.rootDocument.createElement('textarea');\n    editor.style.display = 'none';\n    this.container = this.rootDocument.createElement('div');\n    this.container.setAttribute('dir', this.isRtl ? 'rtl' : 'ltr');\n    addClass(this.container, CommentEditor.CLASS_EDITOR_CONTAINER);\n    this.rootDocument.body.appendChild(this.container);\n    addClass(editor, CommentEditor.CLASS_EDITOR);\n    addClass(textArea, CommentEditor.CLASS_INPUT);\n    textArea.setAttribute('data-hot-input', true);\n    editor.appendChild(textArea);\n    this.container.appendChild(editor);\n    return editor;\n  }\n\n  /**\n   * Get the input element.\n   *\n   * @returns {HTMLElement}\n   */\n  getInputElement() {\n    return this.editor.querySelector(`.${CommentEditor.CLASS_INPUT}`);\n  }\n\n  /**\n   * Destroy the comments editor.\n   */\n  destroy() {\n    const containerParentElement = this.container ? this.container.parentNode : null;\n    this.editor.parentNode.removeChild(this.editor);\n    this.editor = null;\n    this.editorStyle = null;\n    if (containerParentElement) {\n      containerParentElement.removeChild(this.container);\n    }\n  }\n}\nexport default CommentEditor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}