{"ast":null,"code":"import { getScrollbarWidth, getStyle, offset, outerHeight, outerWidth } from \"../../../helpers/dom/element.mjs\";\nimport { objectEach } from \"../../../helpers/object.mjs\";\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE, RenderAllColumnsCalculator, RenderAllRowsCalculator, ViewportColumnsCalculator, ViewportRowsCalculator } from \"./calculator/index.mjs\";\n/**\n * @class Viewport\n */\nclass Viewport {\n  /**\n   * @param {ViewportDao} dataAccessObject The Walkontable instance.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {EventManager} eventManager The instance event manager.\n   * @param {Table} wtTable The table.\n   */\n  constructor(dataAccessObject, domBindings, wtSettings, eventManager, wtTable) {\n    this.dataAccessObject = dataAccessObject;\n    // legacy support\n    this.wot = dataAccessObject.wot;\n    this.instance = this.wot;\n    this.domBindings = domBindings;\n    this.wtSettings = wtSettings;\n    this.wtTable = wtTable;\n    this.oversizedRows = [];\n    this.oversizedColumnHeaders = [];\n    this.hasOversizedColumnHeadersMarked = {};\n    this.clientHeight = 0;\n    this.containerWidth = NaN;\n    this.rowHeaderWidth = NaN;\n    this.rowsVisibleCalculator = null;\n    this.columnsVisibleCalculator = null;\n    this.eventManager = eventManager;\n    this.eventManager.addEventListener(this.domBindings.rootWindow, 'resize', () => {\n      this.clientHeight = this.getWorkspaceHeight();\n    });\n  }\n\n  /**\n   * @returns {number}\n   */\n  getWorkspaceHeight() {\n    const currentDocument = this.domBindings.rootDocument;\n    const trimmingContainer = this.dataAccessObject.topOverlayTrimmingContainer;\n    let height = 0;\n    if (trimmingContainer === this.domBindings.rootWindow) {\n      height = currentDocument.documentElement.clientHeight;\n    } else {\n      const elemHeight = outerHeight(trimmingContainer);\n\n      // returns height without DIV scrollbar\n      height = elemHeight > 0 && trimmingContainer.clientHeight > 0 ? trimmingContainer.clientHeight : Infinity;\n    }\n    return height;\n  }\n  getWorkspaceWidth() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const trimmingContainer = this.dataAccessObject.inlineStartOverlayTrimmingContainer;\n    const docOffsetWidth = rootDocument.documentElement.offsetWidth;\n    const totalColumns = wtSettings.getSetting('totalColumns');\n    const preventOverflow = wtSettings.getSetting('preventOverflow');\n    const isRtl = wtSettings.getSetting('rtlMode');\n    const tableRect = this.wtTable.TABLE.getBoundingClientRect();\n    const inlineStart = isRtl ? tableRect.right - docOffsetWidth : tableRect.left;\n    const tableOffset = docOffsetWidth - inlineStart;\n    let width;\n    let overflow;\n    if (preventOverflow) {\n      return outerWidth(this.wtTable.wtRootElement);\n    }\n    if (wtSettings.getSetting('freezeOverlays')) {\n      width = Math.min(tableOffset, docOffsetWidth);\n    } else {\n      width = Math.min(this.getContainerFillWidth(), tableOffset, docOffsetWidth);\n    }\n    if (trimmingContainer === rootWindow && totalColumns > 0 && this.sumColumnWidths(0, totalColumns - 1) > width) {\n      // in case sum of column widths is higher than available stylesheet width, let's assume using the whole window\n      // otherwise continue below, which will allow stretching\n      // this is used in `scroll_window.html`\n      // TODO test me\n      return rootDocument.documentElement.clientWidth;\n    }\n    if (trimmingContainer !== rootWindow) {\n      overflow = getStyle(this.dataAccessObject.inlineStartOverlayTrimmingContainer, 'overflow', rootWindow);\n      if (overflow === 'scroll' || overflow === 'hidden' || overflow === 'auto') {\n        // this is used in `scroll.html`\n        // TODO test me\n        return Math.max(width, trimmingContainer.clientWidth);\n      }\n    }\n    const stretchSetting = wtSettings.getSetting('stretchH');\n    if (stretchSetting === 'none' || !stretchSetting) {\n      // if no stretching is used, return the maximum used workspace width\n      return Math.max(width, outerWidth(this.wtTable.TABLE));\n    }\n\n    // if stretching is used, return the actual container width, so the columns can fit inside it\n    return width;\n  }\n\n  /**\n   * Checks if viewport has vertical scroll.\n   *\n   * @returns {boolean}\n   */\n  hasVerticalScroll() {\n    return this.wtTable.hider.offsetHeight > this.getWorkspaceHeight();\n  }\n\n  /**\n   * Checks if viewport has horizontal scroll.\n   *\n   * @returns {boolean}\n   */\n  hasHorizontalScroll() {\n    return this.wtTable.hider.offsetWidth > this.getWorkspaceWidth();\n  }\n\n  /**\n   * @param {number} from The visual column index from the width sum is start calculated.\n   * @param {number} length The length of the column to traverse.\n   * @returns {number}\n   */\n  sumColumnWidths(from, length) {\n    let sum = 0;\n    let column = from;\n    while (column < length) {\n      sum += this.wtTable.getColumnWidth(column);\n      column += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getContainerFillWidth() {\n    if (this.containerWidth) {\n      return this.containerWidth;\n    }\n    const mainContainer = this.wtTable.holder;\n    const dummyElement = this.domBindings.rootDocument.createElement('div');\n    dummyElement.style.width = '100%';\n    dummyElement.style.height = '1px';\n    mainContainer.appendChild(dummyElement);\n    const fillWidth = dummyElement.offsetWidth;\n    this.containerWidth = fillWidth;\n    mainContainer.removeChild(dummyElement);\n    return fillWidth;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getWorkspaceOffset() {\n    return offset(this.wtTable.TABLE);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getColumnHeaderHeight() {\n    const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n    if (!columnHeaders.length) {\n      this.columnHeaderHeight = 0;\n    } else if (isNaN(this.columnHeaderHeight)) {\n      this.columnHeaderHeight = outerHeight(this.wtTable.THEAD);\n    }\n    return this.columnHeaderHeight;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getViewportHeight() {\n    let containerHeight = this.getWorkspaceHeight();\n    if (containerHeight === Infinity) {\n      return containerHeight;\n    }\n    const columnHeaderHeight = this.getColumnHeaderHeight();\n    if (columnHeaderHeight > 0) {\n      containerHeight -= columnHeaderHeight;\n    }\n    return containerHeight;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getRowHeaderWidth() {\n    const rowHeadersWidthSetting = this.wtSettings.getSetting('rowHeaderWidth');\n    const rowHeaders = this.wtSettings.getSetting('rowHeaders');\n    if (rowHeadersWidthSetting) {\n      this.rowHeaderWidth = 0;\n      for (let i = 0, len = rowHeaders.length; i < len; i++) {\n        this.rowHeaderWidth += rowHeadersWidthSetting[i] || rowHeadersWidthSetting;\n      }\n    }\n    if (isNaN(this.rowHeaderWidth)) {\n      if (rowHeaders.length) {\n        let TH = this.wtTable.TABLE.querySelector('TH');\n        this.rowHeaderWidth = 0;\n        for (let i = 0, len = rowHeaders.length; i < len; i++) {\n          if (TH) {\n            this.rowHeaderWidth += outerWidth(TH);\n            TH = TH.nextSibling;\n          } else {\n            // yes this is a cheat but it worked like that before, just taking assumption from CSS instead of measuring.\n            // TODO: proper fix\n            this.rowHeaderWidth += 50;\n          }\n        }\n      } else {\n        this.rowHeaderWidth = 0;\n      }\n    }\n    this.rowHeaderWidth = this.wtSettings.getSetting('onModifyRowHeaderWidth', this.rowHeaderWidth) || this.rowHeaderWidth;\n    return this.rowHeaderWidth;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getViewportWidth() {\n    const containerWidth = this.getWorkspaceWidth();\n    if (containerWidth === Infinity) {\n      return containerWidth;\n    }\n    const rowHeaderWidth = this.getRowHeaderWidth();\n    if (rowHeaderWidth > 0) {\n      return containerWidth - rowHeaderWidth;\n    }\n    return containerWidth;\n  }\n\n  /**\n   * Creates:\n   * - rowsRenderCalculator (before draw, to qualify rows for rendering)\n   * - rowsVisibleCalculator (after draw, to measure which rows are actually visible).\n   *\n   * @param {number} calculationType The render type ID, which determines for what type of\n   *                                 calculation calculator is created.\n   * @returns {ViewportRowsCalculator}\n   */\n  createRowsCalculator() {\n    let calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RENDER_TYPE;\n    const {\n      wtSettings,\n      wtTable\n    } = this;\n    if (wtSettings.getSetting('renderAllRows') && calculationType === RENDER_TYPE) {\n      return new RenderAllRowsCalculator({\n        totalRows: wtSettings.getSetting('totalRows')\n      });\n    }\n    let height = this.getViewportHeight();\n    let scrollbarHeight;\n    let fixedRowsHeight;\n    this.rowHeaderWidth = NaN;\n    let pos = this.dataAccessObject.topScrollPosition - this.dataAccessObject.topParentOffset;\n    const fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n    const fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n    const totalRows = wtSettings.getSetting('totalRows');\n    if (fixedRowsTop && pos >= 0) {\n      fixedRowsHeight = this.dataAccessObject.topOverlay.sumCellSizes(0, fixedRowsTop);\n      pos += fixedRowsHeight;\n      height -= fixedRowsHeight;\n    }\n    if (fixedRowsBottom && this.dataAccessObject.bottomOverlay.clone) {\n      fixedRowsHeight = this.dataAccessObject.bottomOverlay.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n      height -= fixedRowsHeight;\n    }\n    if (wtTable.holder.clientHeight === wtTable.holder.offsetHeight) {\n      scrollbarHeight = 0;\n    } else {\n      scrollbarHeight = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    return new ViewportRowsCalculator({\n      viewportHeight: height,\n      scrollOffset: pos,\n      totalRows: wtSettings.getSetting('totalRows'),\n      rowHeightFn: sourceRow => wtTable.getRowHeight(sourceRow),\n      overrideFn: wtSettings.getSettingPure('viewportRowCalculatorOverride'),\n      calculationType,\n      horizontalScrollbarHeight: scrollbarHeight\n    });\n  }\n\n  /**\n   * Creates:\n   * - columnsRenderCalculator (before draw, to qualify columns for rendering)\n   * - columnsVisibleCalculator (after draw, to measure which columns are actually visible).\n   *\n   * @param {number} calculationType The render type ID, which determines for what type of\n   *                                 calculation calculator is created.\n   * @returns {ViewportColumnsCalculator}\n   */\n  createColumnsCalculator() {\n    let calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RENDER_TYPE;\n    const {\n      wtSettings,\n      wtTable\n    } = this;\n    if (wtSettings.getSetting('renderAllColumns') && calculationType === RENDER_TYPE) {\n      return new RenderAllColumnsCalculator({\n        totalColumns: wtSettings.getSetting('totalColumns')\n      });\n    }\n    let width = this.getViewportWidth();\n    let pos = Math.abs(this.dataAccessObject.inlineStartScrollPosition) - this.dataAccessObject.inlineStartParentOffset;\n    this.columnHeaderHeight = NaN;\n    const fixedColumnsStart = wtSettings.getSetting('fixedColumnsStart');\n    if (fixedColumnsStart && pos >= 0) {\n      const fixedColumnsWidth = this.dataAccessObject.inlineStartOverlay.sumCellSizes(0, fixedColumnsStart);\n      pos += fixedColumnsWidth;\n      width -= fixedColumnsWidth;\n    }\n    if (wtTable.holder.clientWidth !== wtTable.holder.offsetWidth) {\n      width -= getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    return new ViewportColumnsCalculator({\n      viewportWidth: width,\n      scrollOffset: pos,\n      totalColumns: wtSettings.getSetting('totalColumns'),\n      columnWidthFn: sourceCol => wtTable.getColumnWidth(sourceCol),\n      overrideFn: wtSettings.getSettingPure('viewportColumnCalculatorOverride'),\n      calculationType,\n      inlineStartOffset: this.dataAccessObject.inlineStartParentOffset\n    });\n  }\n\n  /**\n   * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and\n   * cols should be rendered).\n   *\n   * @param {boolean} fastDraw If `true`, will try to avoid full redraw and only update the border positions.\n   *                           If `false` or `undefined`, will perform a full redraw.\n   * @returns {boolean} The fastDraw value, possibly modified.\n   */\n  createRenderCalculators() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const {\n      wtSettings\n    } = this;\n    if (fastDraw && !wtSettings.getSetting('renderAllRows')) {\n      const proposedRowsVisibleCalculator = this.createRowsCalculator(FULLY_VISIBLE_TYPE);\n      fastDraw = this.areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator);\n    }\n    if (fastDraw && !wtSettings.getSetting('renderAllColumns')) {\n      const proposedColumnsVisibleCalculator = this.createColumnsCalculator(FULLY_VISIBLE_TYPE);\n      fastDraw = this.areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator);\n    }\n    if (!fastDraw) {\n      this.rowsRenderCalculator = this.createRowsCalculator(RENDER_TYPE);\n      this.columnsRenderCalculator = this.createColumnsCalculator(RENDER_TYPE);\n    }\n\n    // delete temporarily to make sure that renderers always use rowsRenderCalculator, not rowsVisibleCalculator\n    this.rowsVisibleCalculator = null;\n    this.columnsVisibleCalculator = null;\n    return fastDraw;\n  }\n\n  /**\n   * Creates rowsVisibleCalculator and columnsVisibleCalculator (after draw, to determine what are\n   * the actually fully visible rows and columns).\n   */\n  createVisibleCalculators() {\n    this.rowsVisibleCalculator = this.createRowsCalculator(FULLY_VISIBLE_TYPE);\n    this.columnsVisibleCalculator = this.createColumnsCalculator(FULLY_VISIBLE_TYPE);\n  }\n\n  /**\n   * Returns information whether proposedRowsVisibleCalculator viewport\n   * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator).\n   *\n   * @param {ViewportRowsCalculator} proposedRowsVisibleCalculator The instance of the viewport calculator to compare with.\n   * @returns {boolean} Returns `true` if all proposed visible rows are already rendered (meaning: redraw is not needed).\n   *                    Returns `false` if at least one proposed visible row is not already rendered (meaning: redraw is needed).\n   */\n  areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) {\n    if (!this.rowsVisibleCalculator) {\n      return false;\n    }\n    const {\n      startRow,\n      endRow,\n      isVisibleInTrimmingContainer\n    } = proposedRowsVisibleCalculator;\n\n    // if there are no fully visible rows at all, return false\n    if (startRow === null && endRow === null) {\n      return !isVisibleInTrimmingContainer;\n    }\n    const {\n      startRow: renderedStartRow,\n      endRow: renderedEndRow\n    } = this.rowsRenderCalculator;\n    if (startRow < renderedStartRow || startRow === renderedStartRow && startRow > 0) {\n      return false;\n    } else if (endRow > renderedEndRow || endRow === renderedEndRow && endRow < this.wtSettings.getSetting('totalRows') - 1) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Returns information whether proposedColumnsVisibleCalculator viewport\n   * is contained inside column rendered in previous draw (cached in columnsRenderCalculator).\n   *\n   * @param {ViewportRowsCalculator} proposedColumnsVisibleCalculator The instance of the viewport calculator to compare with.\n   * @returns {boolean} Returns `true` if all proposed visible columns are already rendered (meaning: redraw is not needed).\n   *                    Returns `false` if at least one proposed visible column is not already rendered (meaning: redraw is needed).\n   */\n  areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator) {\n    if (!this.columnsVisibleCalculator) {\n      return false;\n    }\n    const {\n      startColumn,\n      endColumn,\n      isVisibleInTrimmingContainer\n    } = proposedColumnsVisibleCalculator;\n\n    // if there are no fully visible columns at all, return false\n    if (startColumn === null && endColumn === null) {\n      return !isVisibleInTrimmingContainer;\n    }\n    const {\n      startColumn: renderedStartColumn,\n      endColumn: renderedEndColumn\n    } = this.columnsRenderCalculator;\n    if (startColumn < renderedStartColumn || startColumn === renderedStartColumn && startColumn > 0) {\n      return false;\n    } else if (endColumn > renderedEndColumn || endColumn === renderedEndColumn && endColumn < this.wtSettings.getSetting('totalColumns') - 1) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Resets values in keys of the hasOversizedColumnHeadersMarked object after updateSettings.\n   */\n  resetHasOversizedColumnHeadersMarked() {\n    objectEach(this.hasOversizedColumnHeadersMarked, (value, key, object) => {\n      object[key] = undefined;\n    });\n  }\n}\nexport default Viewport;","map":{"version":3,"names":["getScrollbarWidth","getStyle","offset","outerHeight","outerWidth","objectEach","RENDER_TYPE","FULLY_VISIBLE_TYPE","RenderAllColumnsCalculator","RenderAllRowsCalculator","ViewportColumnsCalculator","ViewportRowsCalculator","Viewport","constructor","dataAccessObject","domBindings","wtSettings","eventManager","wtTable","wot","instance","oversizedRows","oversizedColumnHeaders","hasOversizedColumnHeadersMarked","clientHeight","containerWidth","NaN","rowHeaderWidth","rowsVisibleCalculator","columnsVisibleCalculator","addEventListener","rootWindow","getWorkspaceHeight","currentDocument","rootDocument","trimmingContainer","topOverlayTrimmingContainer","height","documentElement","elemHeight","Infinity","getWorkspaceWidth","inlineStartOverlayTrimmingContainer","docOffsetWidth","offsetWidth","totalColumns","getSetting","preventOverflow","isRtl","tableRect","TABLE","getBoundingClientRect","inlineStart","right","left","tableOffset","width","overflow","wtRootElement","Math","min","getContainerFillWidth","sumColumnWidths","clientWidth","max","stretchSetting","hasVerticalScroll","hider","offsetHeight","hasHorizontalScroll","from","length","sum","column","getColumnWidth","mainContainer","holder","dummyElement","createElement","style","appendChild","fillWidth","removeChild","getWorkspaceOffset","getColumnHeaderHeight","columnHeaders","columnHeaderHeight","isNaN","THEAD","getViewportHeight","containerHeight","getRowHeaderWidth","rowHeadersWidthSetting","rowHeaders","i","len","TH","querySelector","nextSibling","getViewportWidth","createRowsCalculator","calculationType","arguments","undefined","totalRows","scrollbarHeight","fixedRowsHeight","pos","topScrollPosition","topParentOffset","fixedRowsTop","fixedRowsBottom","topOverlay","sumCellSizes","bottomOverlay","clone","viewportHeight","scrollOffset","rowHeightFn","sourceRow","getRowHeight","overrideFn","getSettingPure","horizontalScrollbarHeight","createColumnsCalculator","abs","inlineStartScrollPosition","inlineStartParentOffset","fixedColumnsStart","fixedColumnsWidth","inlineStartOverlay","viewportWidth","columnWidthFn","sourceCol","inlineStartOffset","createRenderCalculators","fastDraw","proposedRowsVisibleCalculator","areAllProposedVisibleRowsAlreadyRendered","proposedColumnsVisibleCalculator","areAllProposedVisibleColumnsAlreadyRendered","rowsRenderCalculator","columnsRenderCalculator","createVisibleCalculators","startRow","endRow","isVisibleInTrimmingContainer","renderedStartRow","renderedEndRow","startColumn","endColumn","renderedStartColumn","renderedEndColumn","resetHasOversizedColumnHeadersMarked","value","key","object"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/3rdparty/walkontable/src/viewport.mjs"],"sourcesContent":["import { getScrollbarWidth, getStyle, offset, outerHeight, outerWidth } from \"../../../helpers/dom/element.mjs\";\nimport { objectEach } from \"../../../helpers/object.mjs\";\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE, RenderAllColumnsCalculator, RenderAllRowsCalculator, ViewportColumnsCalculator, ViewportRowsCalculator } from \"./calculator/index.mjs\";\n/**\n * @class Viewport\n */\nclass Viewport {\n  /**\n   * @param {ViewportDao} dataAccessObject The Walkontable instance.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {EventManager} eventManager The instance event manager.\n   * @param {Table} wtTable The table.\n   */\n  constructor(dataAccessObject, domBindings, wtSettings, eventManager, wtTable) {\n    this.dataAccessObject = dataAccessObject;\n    // legacy support\n    this.wot = dataAccessObject.wot;\n    this.instance = this.wot;\n    this.domBindings = domBindings;\n    this.wtSettings = wtSettings;\n    this.wtTable = wtTable;\n    this.oversizedRows = [];\n    this.oversizedColumnHeaders = [];\n    this.hasOversizedColumnHeadersMarked = {};\n    this.clientHeight = 0;\n    this.containerWidth = NaN;\n    this.rowHeaderWidth = NaN;\n    this.rowsVisibleCalculator = null;\n    this.columnsVisibleCalculator = null;\n    this.eventManager = eventManager;\n    this.eventManager.addEventListener(this.domBindings.rootWindow, 'resize', () => {\n      this.clientHeight = this.getWorkspaceHeight();\n    });\n  }\n\n  /**\n   * @returns {number}\n   */\n  getWorkspaceHeight() {\n    const currentDocument = this.domBindings.rootDocument;\n    const trimmingContainer = this.dataAccessObject.topOverlayTrimmingContainer;\n    let height = 0;\n    if (trimmingContainer === this.domBindings.rootWindow) {\n      height = currentDocument.documentElement.clientHeight;\n    } else {\n      const elemHeight = outerHeight(trimmingContainer);\n\n      // returns height without DIV scrollbar\n      height = elemHeight > 0 && trimmingContainer.clientHeight > 0 ? trimmingContainer.clientHeight : Infinity;\n    }\n    return height;\n  }\n  getWorkspaceWidth() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const trimmingContainer = this.dataAccessObject.inlineStartOverlayTrimmingContainer;\n    const docOffsetWidth = rootDocument.documentElement.offsetWidth;\n    const totalColumns = wtSettings.getSetting('totalColumns');\n    const preventOverflow = wtSettings.getSetting('preventOverflow');\n    const isRtl = wtSettings.getSetting('rtlMode');\n    const tableRect = this.wtTable.TABLE.getBoundingClientRect();\n    const inlineStart = isRtl ? tableRect.right - docOffsetWidth : tableRect.left;\n    const tableOffset = docOffsetWidth - inlineStart;\n    let width;\n    let overflow;\n    if (preventOverflow) {\n      return outerWidth(this.wtTable.wtRootElement);\n    }\n    if (wtSettings.getSetting('freezeOverlays')) {\n      width = Math.min(tableOffset, docOffsetWidth);\n    } else {\n      width = Math.min(this.getContainerFillWidth(), tableOffset, docOffsetWidth);\n    }\n    if (trimmingContainer === rootWindow && totalColumns > 0 && this.sumColumnWidths(0, totalColumns - 1) > width) {\n      // in case sum of column widths is higher than available stylesheet width, let's assume using the whole window\n      // otherwise continue below, which will allow stretching\n      // this is used in `scroll_window.html`\n      // TODO test me\n      return rootDocument.documentElement.clientWidth;\n    }\n    if (trimmingContainer !== rootWindow) {\n      overflow = getStyle(this.dataAccessObject.inlineStartOverlayTrimmingContainer, 'overflow', rootWindow);\n      if (overflow === 'scroll' || overflow === 'hidden' || overflow === 'auto') {\n        // this is used in `scroll.html`\n        // TODO test me\n        return Math.max(width, trimmingContainer.clientWidth);\n      }\n    }\n    const stretchSetting = wtSettings.getSetting('stretchH');\n    if (stretchSetting === 'none' || !stretchSetting) {\n      // if no stretching is used, return the maximum used workspace width\n      return Math.max(width, outerWidth(this.wtTable.TABLE));\n    }\n\n    // if stretching is used, return the actual container width, so the columns can fit inside it\n    return width;\n  }\n\n  /**\n   * Checks if viewport has vertical scroll.\n   *\n   * @returns {boolean}\n   */\n  hasVerticalScroll() {\n    return this.wtTable.hider.offsetHeight > this.getWorkspaceHeight();\n  }\n\n  /**\n   * Checks if viewport has horizontal scroll.\n   *\n   * @returns {boolean}\n   */\n  hasHorizontalScroll() {\n    return this.wtTable.hider.offsetWidth > this.getWorkspaceWidth();\n  }\n\n  /**\n   * @param {number} from The visual column index from the width sum is start calculated.\n   * @param {number} length The length of the column to traverse.\n   * @returns {number}\n   */\n  sumColumnWidths(from, length) {\n    let sum = 0;\n    let column = from;\n    while (column < length) {\n      sum += this.wtTable.getColumnWidth(column);\n      column += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getContainerFillWidth() {\n    if (this.containerWidth) {\n      return this.containerWidth;\n    }\n    const mainContainer = this.wtTable.holder;\n    const dummyElement = this.domBindings.rootDocument.createElement('div');\n    dummyElement.style.width = '100%';\n    dummyElement.style.height = '1px';\n    mainContainer.appendChild(dummyElement);\n    const fillWidth = dummyElement.offsetWidth;\n    this.containerWidth = fillWidth;\n    mainContainer.removeChild(dummyElement);\n    return fillWidth;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getWorkspaceOffset() {\n    return offset(this.wtTable.TABLE);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getColumnHeaderHeight() {\n    const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n    if (!columnHeaders.length) {\n      this.columnHeaderHeight = 0;\n    } else if (isNaN(this.columnHeaderHeight)) {\n      this.columnHeaderHeight = outerHeight(this.wtTable.THEAD);\n    }\n    return this.columnHeaderHeight;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getViewportHeight() {\n    let containerHeight = this.getWorkspaceHeight();\n    if (containerHeight === Infinity) {\n      return containerHeight;\n    }\n    const columnHeaderHeight = this.getColumnHeaderHeight();\n    if (columnHeaderHeight > 0) {\n      containerHeight -= columnHeaderHeight;\n    }\n    return containerHeight;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getRowHeaderWidth() {\n    const rowHeadersWidthSetting = this.wtSettings.getSetting('rowHeaderWidth');\n    const rowHeaders = this.wtSettings.getSetting('rowHeaders');\n    if (rowHeadersWidthSetting) {\n      this.rowHeaderWidth = 0;\n      for (let i = 0, len = rowHeaders.length; i < len; i++) {\n        this.rowHeaderWidth += rowHeadersWidthSetting[i] || rowHeadersWidthSetting;\n      }\n    }\n    if (isNaN(this.rowHeaderWidth)) {\n      if (rowHeaders.length) {\n        let TH = this.wtTable.TABLE.querySelector('TH');\n        this.rowHeaderWidth = 0;\n        for (let i = 0, len = rowHeaders.length; i < len; i++) {\n          if (TH) {\n            this.rowHeaderWidth += outerWidth(TH);\n            TH = TH.nextSibling;\n          } else {\n            // yes this is a cheat but it worked like that before, just taking assumption from CSS instead of measuring.\n            // TODO: proper fix\n            this.rowHeaderWidth += 50;\n          }\n        }\n      } else {\n        this.rowHeaderWidth = 0;\n      }\n    }\n    this.rowHeaderWidth = this.wtSettings.getSetting('onModifyRowHeaderWidth', this.rowHeaderWidth) || this.rowHeaderWidth;\n    return this.rowHeaderWidth;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getViewportWidth() {\n    const containerWidth = this.getWorkspaceWidth();\n    if (containerWidth === Infinity) {\n      return containerWidth;\n    }\n    const rowHeaderWidth = this.getRowHeaderWidth();\n    if (rowHeaderWidth > 0) {\n      return containerWidth - rowHeaderWidth;\n    }\n    return containerWidth;\n  }\n\n  /**\n   * Creates:\n   * - rowsRenderCalculator (before draw, to qualify rows for rendering)\n   * - rowsVisibleCalculator (after draw, to measure which rows are actually visible).\n   *\n   * @param {number} calculationType The render type ID, which determines for what type of\n   *                                 calculation calculator is created.\n   * @returns {ViewportRowsCalculator}\n   */\n  createRowsCalculator() {\n    let calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RENDER_TYPE;\n    const {\n      wtSettings,\n      wtTable\n    } = this;\n    if (wtSettings.getSetting('renderAllRows') && calculationType === RENDER_TYPE) {\n      return new RenderAllRowsCalculator({\n        totalRows: wtSettings.getSetting('totalRows')\n      });\n    }\n    let height = this.getViewportHeight();\n    let scrollbarHeight;\n    let fixedRowsHeight;\n    this.rowHeaderWidth = NaN;\n    let pos = this.dataAccessObject.topScrollPosition - this.dataAccessObject.topParentOffset;\n    const fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n    const fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n    const totalRows = wtSettings.getSetting('totalRows');\n    if (fixedRowsTop && pos >= 0) {\n      fixedRowsHeight = this.dataAccessObject.topOverlay.sumCellSizes(0, fixedRowsTop);\n      pos += fixedRowsHeight;\n      height -= fixedRowsHeight;\n    }\n    if (fixedRowsBottom && this.dataAccessObject.bottomOverlay.clone) {\n      fixedRowsHeight = this.dataAccessObject.bottomOverlay.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n      height -= fixedRowsHeight;\n    }\n    if (wtTable.holder.clientHeight === wtTable.holder.offsetHeight) {\n      scrollbarHeight = 0;\n    } else {\n      scrollbarHeight = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    return new ViewportRowsCalculator({\n      viewportHeight: height,\n      scrollOffset: pos,\n      totalRows: wtSettings.getSetting('totalRows'),\n      rowHeightFn: sourceRow => wtTable.getRowHeight(sourceRow),\n      overrideFn: wtSettings.getSettingPure('viewportRowCalculatorOverride'),\n      calculationType,\n      horizontalScrollbarHeight: scrollbarHeight\n    });\n  }\n\n  /**\n   * Creates:\n   * - columnsRenderCalculator (before draw, to qualify columns for rendering)\n   * - columnsVisibleCalculator (after draw, to measure which columns are actually visible).\n   *\n   * @param {number} calculationType The render type ID, which determines for what type of\n   *                                 calculation calculator is created.\n   * @returns {ViewportColumnsCalculator}\n   */\n  createColumnsCalculator() {\n    let calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RENDER_TYPE;\n    const {\n      wtSettings,\n      wtTable\n    } = this;\n    if (wtSettings.getSetting('renderAllColumns') && calculationType === RENDER_TYPE) {\n      return new RenderAllColumnsCalculator({\n        totalColumns: wtSettings.getSetting('totalColumns')\n      });\n    }\n    let width = this.getViewportWidth();\n    let pos = Math.abs(this.dataAccessObject.inlineStartScrollPosition) - this.dataAccessObject.inlineStartParentOffset;\n    this.columnHeaderHeight = NaN;\n    const fixedColumnsStart = wtSettings.getSetting('fixedColumnsStart');\n    if (fixedColumnsStart && pos >= 0) {\n      const fixedColumnsWidth = this.dataAccessObject.inlineStartOverlay.sumCellSizes(0, fixedColumnsStart);\n      pos += fixedColumnsWidth;\n      width -= fixedColumnsWidth;\n    }\n    if (wtTable.holder.clientWidth !== wtTable.holder.offsetWidth) {\n      width -= getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    return new ViewportColumnsCalculator({\n      viewportWidth: width,\n      scrollOffset: pos,\n      totalColumns: wtSettings.getSetting('totalColumns'),\n      columnWidthFn: sourceCol => wtTable.getColumnWidth(sourceCol),\n      overrideFn: wtSettings.getSettingPure('viewportColumnCalculatorOverride'),\n      calculationType,\n      inlineStartOffset: this.dataAccessObject.inlineStartParentOffset\n    });\n  }\n\n  /**\n   * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and\n   * cols should be rendered).\n   *\n   * @param {boolean} fastDraw If `true`, will try to avoid full redraw and only update the border positions.\n   *                           If `false` or `undefined`, will perform a full redraw.\n   * @returns {boolean} The fastDraw value, possibly modified.\n   */\n  createRenderCalculators() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const {\n      wtSettings\n    } = this;\n    if (fastDraw && !wtSettings.getSetting('renderAllRows')) {\n      const proposedRowsVisibleCalculator = this.createRowsCalculator(FULLY_VISIBLE_TYPE);\n      fastDraw = this.areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator);\n    }\n    if (fastDraw && !wtSettings.getSetting('renderAllColumns')) {\n      const proposedColumnsVisibleCalculator = this.createColumnsCalculator(FULLY_VISIBLE_TYPE);\n      fastDraw = this.areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator);\n    }\n    if (!fastDraw) {\n      this.rowsRenderCalculator = this.createRowsCalculator(RENDER_TYPE);\n      this.columnsRenderCalculator = this.createColumnsCalculator(RENDER_TYPE);\n    }\n\n    // delete temporarily to make sure that renderers always use rowsRenderCalculator, not rowsVisibleCalculator\n    this.rowsVisibleCalculator = null;\n    this.columnsVisibleCalculator = null;\n    return fastDraw;\n  }\n\n  /**\n   * Creates rowsVisibleCalculator and columnsVisibleCalculator (after draw, to determine what are\n   * the actually fully visible rows and columns).\n   */\n  createVisibleCalculators() {\n    this.rowsVisibleCalculator = this.createRowsCalculator(FULLY_VISIBLE_TYPE);\n    this.columnsVisibleCalculator = this.createColumnsCalculator(FULLY_VISIBLE_TYPE);\n  }\n\n  /**\n   * Returns information whether proposedRowsVisibleCalculator viewport\n   * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator).\n   *\n   * @param {ViewportRowsCalculator} proposedRowsVisibleCalculator The instance of the viewport calculator to compare with.\n   * @returns {boolean} Returns `true` if all proposed visible rows are already rendered (meaning: redraw is not needed).\n   *                    Returns `false` if at least one proposed visible row is not already rendered (meaning: redraw is needed).\n   */\n  areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) {\n    if (!this.rowsVisibleCalculator) {\n      return false;\n    }\n    const {\n      startRow,\n      endRow,\n      isVisibleInTrimmingContainer\n    } = proposedRowsVisibleCalculator;\n\n    // if there are no fully visible rows at all, return false\n    if (startRow === null && endRow === null) {\n      return !isVisibleInTrimmingContainer;\n    }\n    const {\n      startRow: renderedStartRow,\n      endRow: renderedEndRow\n    } = this.rowsRenderCalculator;\n    if (startRow < renderedStartRow || startRow === renderedStartRow && startRow > 0) {\n      return false;\n    } else if (endRow > renderedEndRow || endRow === renderedEndRow && endRow < this.wtSettings.getSetting('totalRows') - 1) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Returns information whether proposedColumnsVisibleCalculator viewport\n   * is contained inside column rendered in previous draw (cached in columnsRenderCalculator).\n   *\n   * @param {ViewportRowsCalculator} proposedColumnsVisibleCalculator The instance of the viewport calculator to compare with.\n   * @returns {boolean} Returns `true` if all proposed visible columns are already rendered (meaning: redraw is not needed).\n   *                    Returns `false` if at least one proposed visible column is not already rendered (meaning: redraw is needed).\n   */\n  areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator) {\n    if (!this.columnsVisibleCalculator) {\n      return false;\n    }\n    const {\n      startColumn,\n      endColumn,\n      isVisibleInTrimmingContainer\n    } = proposedColumnsVisibleCalculator;\n\n    // if there are no fully visible columns at all, return false\n    if (startColumn === null && endColumn === null) {\n      return !isVisibleInTrimmingContainer;\n    }\n    const {\n      startColumn: renderedStartColumn,\n      endColumn: renderedEndColumn\n    } = this.columnsRenderCalculator;\n    if (startColumn < renderedStartColumn || startColumn === renderedStartColumn && startColumn > 0) {\n      return false;\n    } else if (endColumn > renderedEndColumn || endColumn === renderedEndColumn && endColumn < this.wtSettings.getSetting('totalColumns') - 1) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Resets values in keys of the hasOversizedColumnHeadersMarked object after updateSettings.\n   */\n  resetHasOversizedColumnHeadersMarked() {\n    objectEach(this.hasOversizedColumnHeadersMarked, (value, key, object) => {\n      object[key] = undefined;\n    });\n  }\n}\nexport default Viewport;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}