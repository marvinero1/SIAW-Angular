{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { getScrollbarWidth } from \"./../../../../helpers/dom/element.mjs\";\nimport { ColumnStretching } from \"./columnStretching.mjs\";\n/**\n * Column utils class contains all necessary information about sizes of the columns.\n *\n * @class {ColumnUtils}\n */\nexport default class ColumnUtils {\n  /**\n   * @param {TableDao} dataAccessObject The table Data Access Object.\n   * @param {Settings} wtSettings The walkontable settings.\n   */\n  constructor(dataAccessObject, wtSettings) {\n    /**\n     * @type {TableDao}\n     */\n    _defineProperty(this, \"dataAccessObject\", void 0);\n    /**\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", void 0);\n    /**\n     * @type {Map<number, number>}\n     */\n    _defineProperty(this, \"headerWidths\", new Map());\n    /**\n     * @type {ColumnStretching}\n     */\n    _defineProperty(this, \"stretching\", void 0);\n    this.dataAccessObject = dataAccessObject;\n    this.wtSettings = wtSettings;\n    this.stretching = new ColumnStretching({\n      totalColumns: () => this.wtSettings.getSetting('totalColumns'),\n      stretchMode: () => this.wtSettings.getSetting('stretchH'),\n      stretchingColumnWidthFn: (stretchedWidth, column) => this.wtSettings.getSetting('onBeforeStretchingColumnWidth', stretchedWidth, column),\n      columnWidthFn: sourceCol => this.dataAccessObject.wtTable.getColumnWidth(sourceCol)\n    });\n  }\n\n  /**\n   * Returns column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getWidth(sourceIndex) {\n    return this.wtSettings.getSetting('columnWidth', sourceIndex) || this.wtSettings.getSetting('defaultColumnWidth');\n  }\n\n  /**\n   * Returns stretched column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getStretchedColumnWidth(sourceIndex) {\n    let width = this.getWidth(sourceIndex);\n    const stretchedWidth = this.stretching.getStretchedColumnWidth(sourceIndex, width);\n    if (stretchedWidth) {\n      width = stretchedWidth;\n    }\n    return width;\n  }\n\n  /**\n   * Returns column header height based on passed header level.\n   *\n   * @param {number} level Column header level.\n   * @returns {number}\n   */\n  getHeaderHeight(level) {\n    let height = this.wtSettings.getSetting('defaultRowHeight');\n    const oversizedHeight = this.dataAccessObject.wtViewport.oversizedColumnHeaders[level];\n    if (oversizedHeight !== undefined) {\n      height = height ? Math.max(height, oversizedHeight) : oversizedHeight;\n    }\n    return height;\n  }\n\n  /**\n   * Returns column header width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getHeaderWidth(sourceIndex) {\n    return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(sourceIndex));\n  }\n\n  /**\n   * Refreshes the stretching column width by recalculating the widths of the columns.\n   */\n  refreshStretching() {\n    const {\n      wtTable,\n      wtViewport,\n      cloneSource\n    } = this.dataAccessObject;\n    const mainHolder = cloneSource ? cloneSource.wtTable.holder : wtTable.holder;\n    const scrollbarCompensation = mainHolder.offsetHeight < mainHolder.scrollHeight ? getScrollbarWidth() : 0;\n    this.stretching.refreshStretching(wtViewport.getViewportWidth() - scrollbarCompensation);\n  }\n\n  /**\n   * Calculates column header widths that can be retrieved from the cache.\n   */\n  calculateWidths() {\n    const {\n      wtSettings\n    } = this;\n    let rowHeaderWidthSetting = wtSettings.getSetting('rowHeaderWidth');\n    this.refreshStretching();\n    rowHeaderWidthSetting = wtSettings.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);\n    if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== undefined) {\n      const rowHeadersCount = wtSettings.getSetting('rowHeaders').length;\n      const defaultColumnWidth = wtSettings.getSetting('defaultColumnWidth');\n      for (let visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n        let width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[visibleColumnIndex] : rowHeaderWidthSetting;\n        width = width === null || width === undefined ? defaultColumnWidth : width;\n        this.headerWidths.set(visibleColumnIndex, width);\n      }\n    }\n  }\n}","map":{"version":3,"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","getScrollbarWidth","ColumnStretching","ColumnUtils","constructor","dataAccessObject","wtSettings","Map","stretching","totalColumns","getSetting","stretchMode","stretchingColumnWidthFn","stretchedWidth","column","columnWidthFn","sourceCol","wtTable","getColumnWidth","getWidth","sourceIndex","getStretchedColumnWidth","width","getHeaderHeight","level","height","oversizedHeight","wtViewport","oversizedColumnHeaders","undefined","Math","max","getHeaderWidth","headerWidths","get","columnFilter","sourceToRendered","refreshStretching","cloneSource","mainHolder","holder","scrollbarCompensation","offsetHeight","scrollHeight","getViewportWidth","calculateWidths","rowHeaderWidthSetting","rowHeadersCount","length","defaultColumnWidth","visibleColumnIndex","Array","isArray","set"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/handsontable/3rdparty/walkontable/src/utils/column.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { getScrollbarWidth } from \"./../../../../helpers/dom/element.mjs\";\nimport { ColumnStretching } from \"./columnStretching.mjs\";\n/**\n * Column utils class contains all necessary information about sizes of the columns.\n *\n * @class {ColumnUtils}\n */\nexport default class ColumnUtils {\n  /**\n   * @param {TableDao} dataAccessObject The table Data Access Object.\n   * @param {Settings} wtSettings The walkontable settings.\n   */\n  constructor(dataAccessObject, wtSettings) {\n    /**\n     * @type {TableDao}\n     */\n    _defineProperty(this, \"dataAccessObject\", void 0);\n    /**\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", void 0);\n    /**\n     * @type {Map<number, number>}\n     */\n    _defineProperty(this, \"headerWidths\", new Map());\n    /**\n     * @type {ColumnStretching}\n     */\n    _defineProperty(this, \"stretching\", void 0);\n    this.dataAccessObject = dataAccessObject;\n    this.wtSettings = wtSettings;\n    this.stretching = new ColumnStretching({\n      totalColumns: () => this.wtSettings.getSetting('totalColumns'),\n      stretchMode: () => this.wtSettings.getSetting('stretchH'),\n      stretchingColumnWidthFn: (stretchedWidth, column) => this.wtSettings.getSetting('onBeforeStretchingColumnWidth', stretchedWidth, column),\n      columnWidthFn: sourceCol => this.dataAccessObject.wtTable.getColumnWidth(sourceCol)\n    });\n  }\n\n  /**\n   * Returns column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getWidth(sourceIndex) {\n    return this.wtSettings.getSetting('columnWidth', sourceIndex) || this.wtSettings.getSetting('defaultColumnWidth');\n  }\n\n  /**\n   * Returns stretched column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getStretchedColumnWidth(sourceIndex) {\n    let width = this.getWidth(sourceIndex);\n    const stretchedWidth = this.stretching.getStretchedColumnWidth(sourceIndex, width);\n    if (stretchedWidth) {\n      width = stretchedWidth;\n    }\n    return width;\n  }\n\n  /**\n   * Returns column header height based on passed header level.\n   *\n   * @param {number} level Column header level.\n   * @returns {number}\n   */\n  getHeaderHeight(level) {\n    let height = this.wtSettings.getSetting('defaultRowHeight');\n    const oversizedHeight = this.dataAccessObject.wtViewport.oversizedColumnHeaders[level];\n    if (oversizedHeight !== undefined) {\n      height = height ? Math.max(height, oversizedHeight) : oversizedHeight;\n    }\n    return height;\n  }\n\n  /**\n   * Returns column header width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getHeaderWidth(sourceIndex) {\n    return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(sourceIndex));\n  }\n\n  /**\n   * Refreshes the stretching column width by recalculating the widths of the columns.\n   */\n  refreshStretching() {\n    const {\n      wtTable,\n      wtViewport,\n      cloneSource\n    } = this.dataAccessObject;\n    const mainHolder = cloneSource ? cloneSource.wtTable.holder : wtTable.holder;\n    const scrollbarCompensation = mainHolder.offsetHeight < mainHolder.scrollHeight ? getScrollbarWidth() : 0;\n    this.stretching.refreshStretching(wtViewport.getViewportWidth() - scrollbarCompensation);\n  }\n\n  /**\n   * Calculates column header widths that can be retrieved from the cache.\n   */\n  calculateWidths() {\n    const {\n      wtSettings\n    } = this;\n    let rowHeaderWidthSetting = wtSettings.getSetting('rowHeaderWidth');\n    this.refreshStretching();\n    rowHeaderWidthSetting = wtSettings.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);\n    if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== undefined) {\n      const rowHeadersCount = wtSettings.getSetting('rowHeaders').length;\n      const defaultColumnWidth = wtSettings.getSetting('defaultColumnWidth');\n      for (let visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n        let width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[visibleColumnIndex] : rowHeaderWidthSetting;\n        width = width === null || width === undefined ? defaultColumnWidth : width;\n        this.headerWidths.set(visibleColumnIndex, width);\n      }\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}