{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, ViewEncapsulation, ViewChild, Input, NgModule } from '@angular/core';\nimport Handsontable from 'handsontable/base';\nconst _c0 = [\"container\"];\nconst instances = new Map();\nconst HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' + ' used properly.';\nclass HotTableRegisterer {\n  getInstance(id) {\n    const hotInstance = instances.get(id);\n    if (hotInstance.isDestroyed) {\n      console.warn(HOT_DESTROYED_WARNING);\n      return null;\n    }\n    return hotInstance;\n  }\n  registerInstance(id, instance) {\n    return instances.set(id, instance);\n  }\n  removeInstance(id) {\n    return instances.delete(id);\n  }\n}\nHotTableRegisterer.ɵfac = function HotTableRegisterer_Factory(t) {\n  return new (t || HotTableRegisterer)();\n};\nHotTableRegisterer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HotTableRegisterer,\n  factory: HotTableRegisterer.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HotTableRegisterer, [{\n    type: Injectable\n  }], null, null);\n})();\nconst AVAILABLE_OPTIONS = Object.keys(Handsontable.DefaultSettings);\nconst AVAILABLE_HOOKS = Handsontable.hooks.getRegistered();\nclass HotSettingsResolver {\n  mergeSettings(component) {\n    const isSettingsObject = 'settings' in component && typeof component['settings'] === 'object';\n    const mergedSettings = isSettingsObject ? component['settings'] : {};\n    const options = AVAILABLE_HOOKS.concat(AVAILABLE_OPTIONS);\n    options.forEach(key => {\n      const isHook = AVAILABLE_HOOKS.indexOf(key) > -1;\n      let option;\n      if (isSettingsObject && isHook) {\n        option = component['settings'][key];\n      }\n      if (component[key] !== void 0) {\n        option = component[key];\n      }\n      if (option === void 0) {\n        return;\n      } else if ('ngZone' in component && typeof option === 'function' && isHook) {\n        mergedSettings[key] = function (...args) {\n          return component.ngZone.run(() => option.apply(this, args));\n        };\n      } else {\n        mergedSettings[key] = option;\n      }\n    });\n    return mergedSettings;\n  }\n  prepareChanges(changes) {\n    const result = {};\n    const parameters = Object.keys(changes);\n    parameters.forEach(param => {\n      if (changes.hasOwnProperty(param)) {\n        result[param] = changes[param].currentValue;\n      }\n    });\n    return result;\n  }\n}\nHotSettingsResolver.ɵfac = function HotSettingsResolver_Factory(t) {\n  return new (t || HotSettingsResolver)();\n};\nHotSettingsResolver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HotSettingsResolver,\n  factory: HotSettingsResolver.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HotSettingsResolver, [{\n    type: Injectable\n  }], null, null);\n})();\nclass HotTableComponent {\n  constructor(_hotTableRegisterer, _hotSettingsResolver, ngZone) {\n    this._hotTableRegisterer = _hotTableRegisterer;\n    this._hotSettingsResolver = _hotSettingsResolver;\n    this.ngZone = ngZone;\n    this.__hotInstance = null;\n    this.columnsComponents = [];\n    this.hotId = '';\n  }\n  get hotInstance() {\n    if (!this.__hotInstance || this.__hotInstance && !this.__hotInstance.isDestroyed) {\n      // Will return the Handsontable instance or `null` if it's not yet been created.\n      return this.__hotInstance;\n    } else {\n      this._hotTableRegisterer.removeInstance(this.hotId);\n      console.warn(HOT_DESTROYED_WARNING);\n      return null;\n    }\n  }\n  set hotInstance(hotInstance) {\n    this.__hotInstance = hotInstance;\n  }\n  ngAfterViewInit() {\n    const options = this._hotSettingsResolver.mergeSettings(this);\n    if (this.columnsComponents.length > 0) {\n      const columns = [];\n      this.columnsComponents.forEach(column => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n      options['columns'] = columns;\n    }\n    this.ngZone.runOutsideAngular(() => {\n      this.hotInstance = new Handsontable.Core(this.container.nativeElement, options);\n      if (this.hotId) {\n        this._hotTableRegisterer.registerInstance(this.hotId, this.hotInstance);\n      }\n      // @ts-ignore\n      this.hotInstance.init();\n    });\n  }\n  ngOnChanges(changes) {\n    if (this.hotInstance === null) {\n      return;\n    }\n    const newOptions = this._hotSettingsResolver.prepareChanges(changes);\n    this.updateHotTable(newOptions);\n  }\n  ngOnDestroy() {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.hotInstance) {\n        this.hotInstance.destroy();\n      }\n    });\n    if (this.hotId) {\n      this._hotTableRegisterer.removeInstance(this.hotId);\n    }\n  }\n  updateHotTable(newSettings) {\n    if (!this.hotInstance) {\n      return;\n    }\n    this.ngZone.runOutsideAngular(() => {\n      this.hotInstance.updateSettings(newSettings, false);\n    });\n  }\n  onAfterColumnsChange() {\n    if (this.columnsComponents === void 0) {\n      return;\n    }\n    if (this.columnsComponents.length > 0) {\n      const columns = [];\n      this.columnsComponents.forEach(column => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n      const newOptions = {\n        columns: columns\n      };\n      this.updateHotTable(newOptions);\n    }\n  }\n  onAfterColumnsNumberChange() {\n    const columns = [];\n    if (this.columnsComponents.length > 0) {\n      this.columnsComponents.forEach(column => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n    }\n    this.updateHotTable({\n      columns\n    });\n  }\n  addColumn(column) {\n    this.columnsComponents.push(column);\n    this.onAfterColumnsNumberChange();\n  }\n  removeColumn(column) {\n    const index = this.columnsComponents.indexOf(column);\n    this.columnsComponents.splice(index, 1);\n    this.onAfterColumnsNumberChange();\n  }\n}\nHotTableComponent.ɵfac = function HotTableComponent_Factory(t) {\n  return new (t || HotTableComponent)(i0.ɵɵdirectiveInject(HotTableRegisterer), i0.ɵɵdirectiveInject(HotSettingsResolver), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nHotTableComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HotTableComponent,\n  selectors: [[\"hot-table\"]],\n  viewQuery: function HotTableComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);\n    }\n  },\n  inputs: {\n    settings: \"settings\",\n    hotId: \"hotId\",\n    activeHeaderClassName: \"activeHeaderClassName\",\n    allowEmpty: \"allowEmpty\",\n    allowHtml: \"allowHtml\",\n    allowInsertColumn: \"allowInsertColumn\",\n    allowInsertRow: \"allowInsertRow\",\n    allowInvalid: \"allowInvalid\",\n    allowRemoveColumn: \"allowRemoveColumn\",\n    allowRemoveRow: \"allowRemoveRow\",\n    ariaTags: \"ariaTags\",\n    autoColumnSize: \"autoColumnSize\",\n    autoRowSize: \"autoRowSize\",\n    autoWrapCol: \"autoWrapCol\",\n    autoWrapRow: \"autoWrapRow\",\n    bindRowsWithHeaders: \"bindRowsWithHeaders\",\n    cell: \"cell\",\n    cells: \"cells\",\n    checkedTemplate: \"checkedTemplate\",\n    className: \"className\",\n    colHeaders: \"colHeaders\",\n    collapsibleColumns: \"collapsibleColumns\",\n    columnHeaderHeight: \"columnHeaderHeight\",\n    columns: \"columns\",\n    columnSorting: \"columnSorting\",\n    columnSummary: \"columnSummary\",\n    colWidths: \"colWidths\",\n    commentedCellClassName: \"commentedCellClassName\",\n    comments: \"comments\",\n    contextMenu: \"contextMenu\",\n    copyable: \"copyable\",\n    copyPaste: \"copyPaste\",\n    correctFormat: \"correctFormat\",\n    currentColClassName: \"currentColClassName\",\n    currentHeaderClassName: \"currentHeaderClassName\",\n    currentRowClassName: \"currentRowClassName\",\n    customBorders: \"customBorders\",\n    data: \"data\",\n    dataSchema: \"dataSchema\",\n    dateFormat: \"dateFormat\",\n    datePickerConfig: \"datePickerConfig\",\n    defaultDate: \"defaultDate\",\n    tabNavigation: \"tabNavigation\",\n    disableVisualSelection: \"disableVisualSelection\",\n    dragToScroll: \"dragToScroll\",\n    dropdownMenu: \"dropdownMenu\",\n    editor: \"editor\",\n    enterBeginsEditing: \"enterBeginsEditing\",\n    enterMoves: \"enterMoves\",\n    fillHandle: \"fillHandle\",\n    filter: \"filter\",\n    filteringCaseSensitive: \"filteringCaseSensitive\",\n    filters: \"filters\",\n    fixedColumnsLeft: \"fixedColumnsLeft\",\n    fixedColumnsStart: \"fixedColumnsStart\",\n    fixedRowsBottom: \"fixedRowsBottom\",\n    fixedRowsTop: \"fixedRowsTop\",\n    formulas: \"formulas\",\n    fragmentSelection: \"fragmentSelection\",\n    height: \"height\",\n    hiddenColumns: \"hiddenColumns\",\n    hiddenRows: \"hiddenRows\",\n    invalidCellClassName: \"invalidCellClassName\",\n    imeFastEdit: \"imeFastEdit\",\n    label: \"label\",\n    language: \"language\",\n    layoutDirection: \"layoutDirection\",\n    licenseKey: \"licenseKey\",\n    locale: \"locale\",\n    manualColumnFreeze: \"manualColumnFreeze\",\n    manualColumnMove: \"manualColumnMove\",\n    manualColumnResize: \"manualColumnResize\",\n    manualRowMove: \"manualRowMove\",\n    manualRowResize: \"manualRowResize\",\n    maxCols: \"maxCols\",\n    maxRows: \"maxRows\",\n    mergeCells: \"mergeCells\",\n    minCols: \"minCols\",\n    minRows: \"minRows\",\n    minSpareCols: \"minSpareCols\",\n    minSpareRows: \"minSpareRows\",\n    multiColumnSorting: \"multiColumnSorting\",\n    navigableHeaders: \"navigableHeaders\",\n    nestedHeaders: \"nestedHeaders\",\n    nestedRows: \"nestedRows\",\n    noWordWrapClassName: \"noWordWrapClassName\",\n    numericFormat: \"numericFormat\",\n    observeDOMVisibility: \"observeDOMVisibility\",\n    outsideClickDeselects: \"outsideClickDeselects\",\n    persistentState: \"persistentState\",\n    placeholder: \"placeholder\",\n    placeholderCellClassName: \"placeholderCellClassName\",\n    preventOverflow: \"preventOverflow\",\n    preventWheel: \"preventWheel\",\n    readOnly: \"readOnly\",\n    readOnlyCellClassName: \"readOnlyCellClassName\",\n    renderAllColumns: \"renderAllColumns\",\n    renderAllRows: \"renderAllRows\",\n    renderer: \"renderer\",\n    rowHeaders: \"rowHeaders\",\n    rowHeaderWidth: \"rowHeaderWidth\",\n    rowHeights: \"rowHeights\",\n    search: \"search\",\n    selectionMode: \"selectionMode\",\n    selectOptions: \"selectOptions\",\n    skipColumnOnPaste: \"skipColumnOnPaste\",\n    skipRowOnPaste: \"skipRowOnPaste\",\n    sortByRelevance: \"sortByRelevance\",\n    source: \"source\",\n    startCols: \"startCols\",\n    startRows: \"startRows\",\n    stretchH: \"stretchH\",\n    strict: \"strict\",\n    tableClassName: \"tableClassName\",\n    tabMoves: \"tabMoves\",\n    title: \"title\",\n    trimDropdown: \"trimDropdown\",\n    trimRows: \"trimRows\",\n    trimWhitespace: \"trimWhitespace\",\n    type: \"type\",\n    uncheckedTemplate: \"uncheckedTemplate\",\n    undo: \"undo\",\n    validator: \"validator\",\n    viewportColumnRenderingOffset: \"viewportColumnRenderingOffset\",\n    viewportRowRenderingOffset: \"viewportRowRenderingOffset\",\n    visibleRows: \"visibleRows\",\n    width: \"width\",\n    wordWrap: \"wordWrap\",\n    afterAddChild: \"afterAddChild\",\n    afterAutofill: \"afterAutofill\",\n    afterBeginEditing: \"afterBeginEditing\",\n    afterCellMetaReset: \"afterCellMetaReset\",\n    afterChange: \"afterChange\",\n    afterChangesObserved: \"afterChangesObserved\",\n    afterColumnCollapse: \"afterColumnCollapse\",\n    afterColumnExpand: \"afterColumnExpand\",\n    afterColumnFreeze: \"afterColumnFreeze\",\n    afterColumnMove: \"afterColumnMove\",\n    afterColumnResize: \"afterColumnResize\",\n    afterColumnSequenceChange: \"afterColumnSequenceChange\",\n    afterColumnSort: \"afterColumnSort\",\n    afterColumnUnfreeze: \"afterColumnUnfreeze\",\n    afterContextMenuDefaultOptions: \"afterContextMenuDefaultOptions\",\n    afterContextMenuHide: \"afterContextMenuHide\",\n    afterContextMenuShow: \"afterContextMenuShow\",\n    afterCopy: \"afterCopy\",\n    afterCopyLimit: \"afterCopyLimit\",\n    afterCreateCol: \"afterCreateCol\",\n    afterCreateRow: \"afterCreateRow\",\n    afterCut: \"afterCut\",\n    afterDeselect: \"afterDeselect\",\n    afterDestroy: \"afterDestroy\",\n    afterDetachChild: \"afterDetachChild\",\n    afterDocumentKeyDown: \"afterDocumentKeyDown\",\n    afterDrawSelection: \"afterDrawSelection\",\n    afterDropdownMenuDefaultOptions: \"afterDropdownMenuDefaultOptions\",\n    afterDropdownMenuHide: \"afterDropdownMenuHide\",\n    afterDropdownMenuShow: \"afterDropdownMenuShow\",\n    afterFilter: \"afterFilter\",\n    afterFormulasValuesUpdate: \"afterFormulasValuesUpdate\",\n    afterGetCellMeta: \"afterGetCellMeta\",\n    afterGetColHeader: \"afterGetColHeader\",\n    afterGetColumnHeaderRenderers: \"afterGetColumnHeaderRenderers\",\n    afterGetRowHeader: \"afterGetRowHeader\",\n    afterGetRowHeaderRenderers: \"afterGetRowHeaderRenderers\",\n    afterHideColumns: \"afterHideColumns\",\n    afterHideRows: \"afterHideRows\",\n    afterInit: \"afterInit\",\n    afterLanguageChange: \"afterLanguageChange\",\n    afterListen: \"afterListen\",\n    afterLoadData: \"afterLoadData\",\n    afterMergeCells: \"afterMergeCells\",\n    afterModifyTransformEnd: \"afterModifyTransformEnd\",\n    afterModifyTransformStart: \"afterModifyTransformStart\",\n    afterMomentumScroll: \"afterMomentumScroll\",\n    afterNamedExpressionAdded: \"afterNamedExpressionAdded\",\n    afterNamedExpressionRemoved: \"afterNamedExpressionRemoved\",\n    afterOnCellContextMenu: \"afterOnCellContextMenu\",\n    afterOnCellCornerDblClick: \"afterOnCellCornerDblClick\",\n    afterOnCellCornerMouseDown: \"afterOnCellCornerMouseDown\",\n    afterOnCellMouseDown: \"afterOnCellMouseDown\",\n    afterOnCellMouseOut: \"afterOnCellMouseOut\",\n    afterOnCellMouseOver: \"afterOnCellMouseOver\",\n    afterOnCellMouseUp: \"afterOnCellMouseUp\",\n    afterPaste: \"afterPaste\",\n    afterPluginsInitialized: \"afterPluginsInitialized\",\n    afterRedo: \"afterRedo\",\n    afterRedoStackChange: \"afterRedoStackChange\",\n    afterRefreshDimensions: \"afterRefreshDimensions\",\n    afterRemoveCellMeta: \"afterRemoveCellMeta\",\n    afterRemoveCol: \"afterRemoveCol\",\n    afterRemoveRow: \"afterRemoveRow\",\n    afterRender: \"afterRender\",\n    afterRenderer: \"afterRenderer\",\n    afterRowMove: \"afterRowMove\",\n    afterRowResize: \"afterRowResize\",\n    afterRowSequenceChange: \"afterRowSequenceChange\",\n    afterScrollHorizontally: \"afterScrollHorizontally\",\n    afterScrollVertically: \"afterScrollVertically\",\n    afterScroll: \"afterScroll\",\n    afterSelectColumns: \"afterSelectColumns\",\n    afterSelection: \"afterSelection\",\n    afterSelectionByProp: \"afterSelectionByProp\",\n    afterSelectionEnd: \"afterSelectionEnd\",\n    afterSelectionEndByProp: \"afterSelectionEndByProp\",\n    afterSelectRows: \"afterSelectRows\",\n    afterSetCellMeta: \"afterSetCellMeta\",\n    afterSetDataAtCell: \"afterSetDataAtCell\",\n    afterSetDataAtRowProp: \"afterSetDataAtRowProp\",\n    afterSetSourceDataAtCell: \"afterSetSourceDataAtCell\",\n    afterSheetAdded: \"afterSheetAdded\",\n    afterSheetRenamed: \"afterSheetRenamed\",\n    afterSheetRemoved: \"afterSheetRemoved\",\n    afterTrimRow: \"afterTrimRow\",\n    afterUndo: \"afterUndo\",\n    afterUndoStackChange: \"afterUndoStackChange\",\n    afterUnhideColumns: \"afterUnhideColumns\",\n    afterUnhideRows: \"afterUnhideRows\",\n    afterUnlisten: \"afterUnlisten\",\n    afterUnmergeCells: \"afterUnmergeCells\",\n    afterUntrimRow: \"afterUntrimRow\",\n    afterUpdateData: \"afterUpdateData\",\n    afterUpdateSettings: \"afterUpdateSettings\",\n    afterValidate: \"afterValidate\",\n    afterViewportColumnCalculatorOverride: \"afterViewportColumnCalculatorOverride\",\n    afterViewportRowCalculatorOverride: \"afterViewportRowCalculatorOverride\",\n    afterViewRender: \"afterViewRender\",\n    beforeAddChild: \"beforeAddChild\",\n    beforeAutofill: \"beforeAutofill\",\n    beforeCellAlignment: \"beforeCellAlignment\",\n    beforeChange: \"beforeChange\",\n    beforeChangeRender: \"beforeChangeRender\",\n    beforeColumnCollapse: \"beforeColumnCollapse\",\n    beforeColumnExpand: \"beforeColumnExpand\",\n    beforeColumnFreeze: \"beforeColumnFreeze\",\n    beforeColumnMove: \"beforeColumnMove\",\n    beforeColumnResize: \"beforeColumnResize\",\n    beforeColumnSort: \"beforeColumnSort\",\n    beforeColumnWrap: \"beforeColumnWrap\",\n    beforeColumnUnfreeze: \"beforeColumnUnfreeze\",\n    beforeContextMenuSetItems: \"beforeContextMenuSetItems\",\n    beforeContextMenuShow: \"beforeContextMenuShow\",\n    beforeCopy: \"beforeCopy\",\n    beforeCreateCol: \"beforeCreateCol\",\n    beforeCreateRow: \"beforeCreateRow\",\n    beforeCut: \"beforeCut\",\n    beforeDetachChild: \"beforeDetachChild\",\n    beforeDrawBorders: \"beforeDrawBorders\",\n    beforeDropdownMenuSetItems: \"beforeDropdownMenuSetItems\",\n    beforeDropdownMenuShow: \"beforeDropdownMenuShow\",\n    beforeFilter: \"beforeFilter\",\n    beforeGetCellMeta: \"beforeGetCellMeta\",\n    beforeHideColumns: \"beforeHideColumns\",\n    beforeHideRows: \"beforeHideRows\",\n    beforeHighlightingColumnHeader: \"beforeHighlightingColumnHeader\",\n    beforeHighlightingRowHeader: \"beforeHighlightingRowHeader\",\n    beforeInit: \"beforeInit\",\n    beforeInitWalkontable: \"beforeInitWalkontable\",\n    beforeKeyDown: \"beforeKeyDown\",\n    beforeLanguageChange: \"beforeLanguageChange\",\n    beforeLoadData: \"beforeLoadData\",\n    beforeMergeCells: \"beforeMergeCells\",\n    beforeOnCellContextMenu: \"beforeOnCellContextMenu\",\n    beforeOnCellMouseDown: \"beforeOnCellMouseDown\",\n    beforeOnCellMouseOut: \"beforeOnCellMouseOut\",\n    beforeOnCellMouseOver: \"beforeOnCellMouseOver\",\n    beforeOnCellMouseUp: \"beforeOnCellMouseUp\",\n    beforePaste: \"beforePaste\",\n    beforeRedo: \"beforeRedo\",\n    beforeRedoStackChange: \"beforeRedoStackChange\",\n    beforeRefreshDimensions: \"beforeRefreshDimensions\",\n    beforeRemoveCellClassNames: \"beforeRemoveCellClassNames\",\n    beforeRemoveCellMeta: \"beforeRemoveCellMeta\",\n    beforeRemoveCol: \"beforeRemoveCol\",\n    beforeRemoveRow: \"beforeRemoveRow\",\n    beforeRender: \"beforeRender\",\n    beforeRenderer: \"beforeRenderer\",\n    beforeRowMove: \"beforeRowMove\",\n    beforeRowResize: \"beforeRowResize\",\n    beforeRowWrap: \"beforeRowWrap\",\n    beforeSelectColumns: \"beforeSelectColumns\",\n    beforeSelectionHighlightSet: \"beforeSelectionHighlightSet\",\n    beforeSelectRows: \"beforeSelectRows\",\n    beforeSetCellMeta: \"beforeSetCellMeta\",\n    beforeSetRangeEnd: \"beforeSetRangeEnd\",\n    beforeSetRangeStart: \"beforeSetRangeStart\",\n    beforeSetRangeStartOnly: \"beforeSetRangeStartOnly\",\n    beforeStretchingColumnWidth: \"beforeStretchingColumnWidth\",\n    beforeTouchScroll: \"beforeTouchScroll\",\n    beforeTrimRow: \"beforeTrimRow\",\n    beforeUndo: \"beforeUndo\",\n    beforeUndoStackChange: \"beforeUndoStackChange\",\n    beforeUnhideColumns: \"beforeUnhideColumns\",\n    beforeUnhideRows: \"beforeUnhideRows\",\n    beforeUnmergeCells: \"beforeUnmergeCells\",\n    beforeUntrimRow: \"beforeUntrimRow\",\n    beforeUpdateData: \"beforeUpdateData\",\n    beforeValidate: \"beforeValidate\",\n    beforeValueRender: \"beforeValueRender\",\n    beforeViewportScroll: \"beforeViewportScroll\",\n    beforeViewportScrollHorizontally: \"beforeViewportScrollHorizontally\",\n    beforeViewportScrollVertically: \"beforeViewportScrollVertically\",\n    beforeViewRender: \"beforeViewRender\",\n    construct: \"construct\",\n    init: \"init\",\n    modifyAutoColumnSizeSeed: \"modifyAutoColumnSizeSeed\",\n    modifyAutofillRange: \"modifyAutofillRange\",\n    modifyColHeader: \"modifyColHeader\",\n    modifyColumnHeaderHeight: \"modifyColumnHeaderHeight\",\n    modifyColumnHeaderValue: \"modifyColumnHeaderValue\",\n    modifyColWidth: \"modifyColWidth\",\n    modifyCopyableRange: \"modifyCopyableRange\",\n    modifyFocusedElement: \"modifyFocusedElement\",\n    modifyData: \"modifyData\",\n    modifyFocusOnTabNavigation: \"modifyFocusOnTabNavigation\",\n    modifyGetCellCoords: \"modifyGetCellCoords\",\n    modifyRowData: \"modifyRowData\",\n    modifyRowHeader: \"modifyRowHeader\",\n    modifyRowHeaderWidth: \"modifyRowHeaderWidth\",\n    modifyRowHeight: \"modifyRowHeight\",\n    modifySourceData: \"modifySourceData\",\n    modifyTransformEnd: \"modifyTransformEnd\",\n    modifyTransformStart: \"modifyTransformStart\",\n    persistentStateLoad: \"persistentStateLoad\",\n    persistentStateReset: \"persistentStateReset\",\n    persistentStateSave: \"persistentStateSave\"\n  },\n  features: [i0.ɵɵProvidersFeature([HotTableRegisterer, HotSettingsResolver]), i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[3, \"id\"], [\"container\", \"\"]],\n  template: function HotTableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.hotId);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HotTableComponent, [{\n    type: Component,\n    args: [{\n      selector: 'hot-table',\n      template: '<div #container [id]=\"hotId\"></div>',\n      encapsulation: ViewEncapsulation.None,\n      providers: [HotTableRegisterer, HotSettingsResolver]\n    }]\n  }], function () {\n    return [{\n      type: HotTableRegisterer\n    }, {\n      type: HotSettingsResolver\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    container: [{\n      type: ViewChild,\n      args: ['container', {\n        static: false\n      }]\n    }],\n    settings: [{\n      type: Input\n    }],\n    hotId: [{\n      type: Input\n    }],\n    activeHeaderClassName: [{\n      type: Input\n    }],\n    allowEmpty: [{\n      type: Input\n    }],\n    allowHtml: [{\n      type: Input\n    }],\n    allowInsertColumn: [{\n      type: Input\n    }],\n    allowInsertRow: [{\n      type: Input\n    }],\n    allowInvalid: [{\n      type: Input\n    }],\n    allowRemoveColumn: [{\n      type: Input\n    }],\n    allowRemoveRow: [{\n      type: Input\n    }],\n    ariaTags: [{\n      type: Input\n    }],\n    autoColumnSize: [{\n      type: Input\n    }],\n    autoRowSize: [{\n      type: Input\n    }],\n    autoWrapCol: [{\n      type: Input\n    }],\n    autoWrapRow: [{\n      type: Input\n    }],\n    bindRowsWithHeaders: [{\n      type: Input\n    }],\n    cell: [{\n      type: Input\n    }],\n    cells: [{\n      type: Input\n    }],\n    checkedTemplate: [{\n      type: Input\n    }],\n    className: [{\n      type: Input\n    }],\n    colHeaders: [{\n      type: Input\n    }],\n    collapsibleColumns: [{\n      type: Input\n    }],\n    columnHeaderHeight: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    columnSorting: [{\n      type: Input\n    }],\n    columnSummary: [{\n      type: Input\n    }],\n    colWidths: [{\n      type: Input\n    }],\n    commentedCellClassName: [{\n      type: Input\n    }],\n    comments: [{\n      type: Input\n    }],\n    contextMenu: [{\n      type: Input\n    }],\n    copyable: [{\n      type: Input\n    }],\n    copyPaste: [{\n      type: Input\n    }],\n    correctFormat: [{\n      type: Input\n    }],\n    currentColClassName: [{\n      type: Input\n    }],\n    currentHeaderClassName: [{\n      type: Input\n    }],\n    currentRowClassName: [{\n      type: Input\n    }],\n    customBorders: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    dataSchema: [{\n      type: Input\n    }],\n    dateFormat: [{\n      type: Input\n    }],\n    datePickerConfig: [{\n      type: Input\n    }],\n    defaultDate: [{\n      type: Input\n    }],\n    tabNavigation: [{\n      type: Input\n    }],\n    disableVisualSelection: [{\n      type: Input\n    }],\n    dragToScroll: [{\n      type: Input\n    }],\n    dropdownMenu: [{\n      type: Input\n    }],\n    editor: [{\n      type: Input\n    }],\n    enterBeginsEditing: [{\n      type: Input\n    }],\n    enterMoves: [{\n      type: Input\n    }],\n    fillHandle: [{\n      type: Input\n    }],\n    filter: [{\n      type: Input\n    }],\n    filteringCaseSensitive: [{\n      type: Input\n    }],\n    filters: [{\n      type: Input\n    }],\n    fixedColumnsLeft: [{\n      type: Input\n    }],\n    fixedColumnsStart: [{\n      type: Input\n    }],\n    fixedRowsBottom: [{\n      type: Input\n    }],\n    fixedRowsTop: [{\n      type: Input\n    }],\n    formulas: [{\n      type: Input\n    }],\n    fragmentSelection: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    hiddenColumns: [{\n      type: Input\n    }],\n    hiddenRows: [{\n      type: Input\n    }],\n    invalidCellClassName: [{\n      type: Input\n    }],\n    imeFastEdit: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    language: [{\n      type: Input\n    }],\n    layoutDirection: [{\n      type: Input\n    }],\n    licenseKey: [{\n      type: Input\n    }],\n    locale: [{\n      type: Input\n    }],\n    manualColumnFreeze: [{\n      type: Input\n    }],\n    manualColumnMove: [{\n      type: Input\n    }],\n    manualColumnResize: [{\n      type: Input\n    }],\n    manualRowMove: [{\n      type: Input\n    }],\n    manualRowResize: [{\n      type: Input\n    }],\n    maxCols: [{\n      type: Input\n    }],\n    maxRows: [{\n      type: Input\n    }],\n    mergeCells: [{\n      type: Input\n    }],\n    minCols: [{\n      type: Input\n    }],\n    minRows: [{\n      type: Input\n    }],\n    minSpareCols: [{\n      type: Input\n    }],\n    minSpareRows: [{\n      type: Input\n    }],\n    multiColumnSorting: [{\n      type: Input\n    }],\n    navigableHeaders: [{\n      type: Input\n    }],\n    nestedHeaders: [{\n      type: Input\n    }],\n    nestedRows: [{\n      type: Input\n    }],\n    noWordWrapClassName: [{\n      type: Input\n    }],\n    numericFormat: [{\n      type: Input\n    }],\n    observeDOMVisibility: [{\n      type: Input\n    }],\n    outsideClickDeselects: [{\n      type: Input\n    }],\n    persistentState: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    placeholderCellClassName: [{\n      type: Input\n    }],\n    preventOverflow: [{\n      type: Input\n    }],\n    preventWheel: [{\n      type: Input\n    }],\n    readOnly: [{\n      type: Input\n    }],\n    readOnlyCellClassName: [{\n      type: Input\n    }],\n    renderAllColumns: [{\n      type: Input\n    }],\n    renderAllRows: [{\n      type: Input\n    }],\n    renderer: [{\n      type: Input\n    }],\n    rowHeaders: [{\n      type: Input\n    }],\n    rowHeaderWidth: [{\n      type: Input\n    }],\n    rowHeights: [{\n      type: Input\n    }],\n    search: [{\n      type: Input\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    selectOptions: [{\n      type: Input\n    }],\n    skipColumnOnPaste: [{\n      type: Input\n    }],\n    skipRowOnPaste: [{\n      type: Input\n    }],\n    sortByRelevance: [{\n      type: Input\n    }],\n    source: [{\n      type: Input\n    }],\n    startCols: [{\n      type: Input\n    }],\n    startRows: [{\n      type: Input\n    }],\n    stretchH: [{\n      type: Input\n    }],\n    strict: [{\n      type: Input\n    }],\n    tableClassName: [{\n      type: Input\n    }],\n    tabMoves: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    trimDropdown: [{\n      type: Input\n    }],\n    trimRows: [{\n      type: Input\n    }],\n    trimWhitespace: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    uncheckedTemplate: [{\n      type: Input\n    }],\n    undo: [{\n      type: Input\n    }],\n    validator: [{\n      type: Input\n    }],\n    viewportColumnRenderingOffset: [{\n      type: Input\n    }],\n    viewportRowRenderingOffset: [{\n      type: Input\n    }],\n    visibleRows: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    wordWrap: [{\n      type: Input\n    }],\n    afterAddChild: [{\n      type: Input\n    }],\n    afterAutofill: [{\n      type: Input\n    }],\n    afterBeginEditing: [{\n      type: Input\n    }],\n    afterCellMetaReset: [{\n      type: Input\n    }],\n    afterChange: [{\n      type: Input\n    }],\n    afterChangesObserved: [{\n      type: Input\n    }],\n    afterColumnCollapse: [{\n      type: Input\n    }],\n    afterColumnExpand: [{\n      type: Input\n    }],\n    afterColumnFreeze: [{\n      type: Input\n    }],\n    afterColumnMove: [{\n      type: Input\n    }],\n    afterColumnResize: [{\n      type: Input\n    }],\n    afterColumnSequenceChange: [{\n      type: Input\n    }],\n    afterColumnSort: [{\n      type: Input\n    }],\n    afterColumnUnfreeze: [{\n      type: Input\n    }],\n    afterContextMenuDefaultOptions: [{\n      type: Input\n    }],\n    afterContextMenuHide: [{\n      type: Input\n    }],\n    afterContextMenuShow: [{\n      type: Input\n    }],\n    afterCopy: [{\n      type: Input\n    }],\n    afterCopyLimit: [{\n      type: Input\n    }],\n    afterCreateCol: [{\n      type: Input\n    }],\n    afterCreateRow: [{\n      type: Input\n    }],\n    afterCut: [{\n      type: Input\n    }],\n    afterDeselect: [{\n      type: Input\n    }],\n    afterDestroy: [{\n      type: Input\n    }],\n    afterDetachChild: [{\n      type: Input\n    }],\n    afterDocumentKeyDown: [{\n      type: Input\n    }],\n    afterDrawSelection: [{\n      type: Input\n    }],\n    afterDropdownMenuDefaultOptions: [{\n      type: Input\n    }],\n    afterDropdownMenuHide: [{\n      type: Input\n    }],\n    afterDropdownMenuShow: [{\n      type: Input\n    }],\n    afterFilter: [{\n      type: Input\n    }],\n    afterFormulasValuesUpdate: [{\n      type: Input\n    }],\n    afterGetCellMeta: [{\n      type: Input\n    }],\n    afterGetColHeader: [{\n      type: Input\n    }],\n    afterGetColumnHeaderRenderers: [{\n      type: Input\n    }],\n    afterGetRowHeader: [{\n      type: Input\n    }],\n    afterGetRowHeaderRenderers: [{\n      type: Input\n    }],\n    afterHideColumns: [{\n      type: Input\n    }],\n    afterHideRows: [{\n      type: Input\n    }],\n    afterInit: [{\n      type: Input\n    }],\n    afterLanguageChange: [{\n      type: Input\n    }],\n    afterListen: [{\n      type: Input\n    }],\n    afterLoadData: [{\n      type: Input\n    }],\n    afterMergeCells: [{\n      type: Input\n    }],\n    afterModifyTransformEnd: [{\n      type: Input\n    }],\n    afterModifyTransformStart: [{\n      type: Input\n    }],\n    afterMomentumScroll: [{\n      type: Input\n    }],\n    afterNamedExpressionAdded: [{\n      type: Input\n    }],\n    afterNamedExpressionRemoved: [{\n      type: Input\n    }],\n    afterOnCellContextMenu: [{\n      type: Input\n    }],\n    afterOnCellCornerDblClick: [{\n      type: Input\n    }],\n    afterOnCellCornerMouseDown: [{\n      type: Input\n    }],\n    afterOnCellMouseDown: [{\n      type: Input\n    }],\n    afterOnCellMouseOut: [{\n      type: Input\n    }],\n    afterOnCellMouseOver: [{\n      type: Input\n    }],\n    afterOnCellMouseUp: [{\n      type: Input\n    }],\n    afterPaste: [{\n      type: Input\n    }],\n    afterPluginsInitialized: [{\n      type: Input\n    }],\n    afterRedo: [{\n      type: Input\n    }],\n    afterRedoStackChange: [{\n      type: Input\n    }],\n    afterRefreshDimensions: [{\n      type: Input\n    }],\n    afterRemoveCellMeta: [{\n      type: Input\n    }],\n    afterRemoveCol: [{\n      type: Input\n    }],\n    afterRemoveRow: [{\n      type: Input\n    }],\n    afterRender: [{\n      type: Input\n    }],\n    afterRenderer: [{\n      type: Input\n    }],\n    afterRowMove: [{\n      type: Input\n    }],\n    afterRowResize: [{\n      type: Input\n    }],\n    afterRowSequenceChange: [{\n      type: Input\n    }],\n    afterScrollHorizontally: [{\n      type: Input\n    }],\n    afterScrollVertically: [{\n      type: Input\n    }],\n    afterScroll: [{\n      type: Input\n    }],\n    afterSelectColumns: [{\n      type: Input\n    }],\n    afterSelection: [{\n      type: Input\n    }],\n    afterSelectionByProp: [{\n      type: Input\n    }],\n    afterSelectionEnd: [{\n      type: Input\n    }],\n    afterSelectionEndByProp: [{\n      type: Input\n    }],\n    afterSelectRows: [{\n      type: Input\n    }],\n    afterSetCellMeta: [{\n      type: Input\n    }],\n    afterSetDataAtCell: [{\n      type: Input\n    }],\n    afterSetDataAtRowProp: [{\n      type: Input\n    }],\n    afterSetSourceDataAtCell: [{\n      type: Input\n    }],\n    afterSheetAdded: [{\n      type: Input\n    }],\n    afterSheetRenamed: [{\n      type: Input\n    }],\n    afterSheetRemoved: [{\n      type: Input\n    }],\n    afterTrimRow: [{\n      type: Input\n    }],\n    afterUndo: [{\n      type: Input\n    }],\n    afterUndoStackChange: [{\n      type: Input\n    }],\n    afterUnhideColumns: [{\n      type: Input\n    }],\n    afterUnhideRows: [{\n      type: Input\n    }],\n    afterUnlisten: [{\n      type: Input\n    }],\n    afterUnmergeCells: [{\n      type: Input\n    }],\n    afterUntrimRow: [{\n      type: Input\n    }],\n    afterUpdateData: [{\n      type: Input\n    }],\n    afterUpdateSettings: [{\n      type: Input\n    }],\n    afterValidate: [{\n      type: Input\n    }],\n    afterViewportColumnCalculatorOverride: [{\n      type: Input\n    }],\n    afterViewportRowCalculatorOverride: [{\n      type: Input\n    }],\n    afterViewRender: [{\n      type: Input\n    }],\n    beforeAddChild: [{\n      type: Input\n    }],\n    beforeAutofill: [{\n      type: Input\n    }],\n    beforeCellAlignment: [{\n      type: Input\n    }],\n    beforeChange: [{\n      type: Input\n    }],\n    beforeChangeRender: [{\n      type: Input\n    }],\n    beforeColumnCollapse: [{\n      type: Input\n    }],\n    beforeColumnExpand: [{\n      type: Input\n    }],\n    beforeColumnFreeze: [{\n      type: Input\n    }],\n    beforeColumnMove: [{\n      type: Input\n    }],\n    beforeColumnResize: [{\n      type: Input\n    }],\n    beforeColumnSort: [{\n      type: Input\n    }],\n    beforeColumnWrap: [{\n      type: Input\n    }],\n    beforeColumnUnfreeze: [{\n      type: Input\n    }],\n    beforeContextMenuSetItems: [{\n      type: Input\n    }],\n    beforeContextMenuShow: [{\n      type: Input\n    }],\n    beforeCopy: [{\n      type: Input\n    }],\n    beforeCreateCol: [{\n      type: Input\n    }],\n    beforeCreateRow: [{\n      type: Input\n    }],\n    beforeCut: [{\n      type: Input\n    }],\n    beforeDetachChild: [{\n      type: Input\n    }],\n    beforeDrawBorders: [{\n      type: Input\n    }],\n    beforeDropdownMenuSetItems: [{\n      type: Input\n    }],\n    beforeDropdownMenuShow: [{\n      type: Input\n    }],\n    beforeFilter: [{\n      type: Input\n    }],\n    beforeGetCellMeta: [{\n      type: Input\n    }],\n    beforeHideColumns: [{\n      type: Input\n    }],\n    beforeHideRows: [{\n      type: Input\n    }],\n    beforeHighlightingColumnHeader: [{\n      type: Input\n    }],\n    beforeHighlightingRowHeader: [{\n      type: Input\n    }],\n    beforeInit: [{\n      type: Input\n    }],\n    beforeInitWalkontable: [{\n      type: Input\n    }],\n    beforeKeyDown: [{\n      type: Input\n    }],\n    beforeLanguageChange: [{\n      type: Input\n    }],\n    beforeLoadData: [{\n      type: Input\n    }],\n    beforeMergeCells: [{\n      type: Input\n    }],\n    beforeOnCellContextMenu: [{\n      type: Input\n    }],\n    beforeOnCellMouseDown: [{\n      type: Input\n    }],\n    beforeOnCellMouseOut: [{\n      type: Input\n    }],\n    beforeOnCellMouseOver: [{\n      type: Input\n    }],\n    beforeOnCellMouseUp: [{\n      type: Input\n    }],\n    beforePaste: [{\n      type: Input\n    }],\n    beforeRedo: [{\n      type: Input\n    }],\n    beforeRedoStackChange: [{\n      type: Input\n    }],\n    beforeRefreshDimensions: [{\n      type: Input\n    }],\n    beforeRemoveCellClassNames: [{\n      type: Input\n    }],\n    beforeRemoveCellMeta: [{\n      type: Input\n    }],\n    beforeRemoveCol: [{\n      type: Input\n    }],\n    beforeRemoveRow: [{\n      type: Input\n    }],\n    beforeRender: [{\n      type: Input\n    }],\n    beforeRenderer: [{\n      type: Input\n    }],\n    beforeRowMove: [{\n      type: Input\n    }],\n    beforeRowResize: [{\n      type: Input\n    }],\n    beforeRowWrap: [{\n      type: Input\n    }],\n    beforeSelectColumns: [{\n      type: Input\n    }],\n    beforeSelectionHighlightSet: [{\n      type: Input\n    }],\n    beforeSelectRows: [{\n      type: Input\n    }],\n    beforeSetCellMeta: [{\n      type: Input\n    }],\n    beforeSetRangeEnd: [{\n      type: Input\n    }],\n    beforeSetRangeStart: [{\n      type: Input\n    }],\n    beforeSetRangeStartOnly: [{\n      type: Input\n    }],\n    beforeStretchingColumnWidth: [{\n      type: Input\n    }],\n    beforeTouchScroll: [{\n      type: Input\n    }],\n    beforeTrimRow: [{\n      type: Input\n    }],\n    beforeUndo: [{\n      type: Input\n    }],\n    beforeUndoStackChange: [{\n      type: Input\n    }],\n    beforeUnhideColumns: [{\n      type: Input\n    }],\n    beforeUnhideRows: [{\n      type: Input\n    }],\n    beforeUnmergeCells: [{\n      type: Input\n    }],\n    beforeUntrimRow: [{\n      type: Input\n    }],\n    beforeUpdateData: [{\n      type: Input\n    }],\n    beforeValidate: [{\n      type: Input\n    }],\n    beforeValueRender: [{\n      type: Input\n    }],\n    beforeViewportScroll: [{\n      type: Input\n    }],\n    beforeViewportScrollHorizontally: [{\n      type: Input\n    }],\n    beforeViewportScrollVertically: [{\n      type: Input\n    }],\n    beforeViewRender: [{\n      type: Input\n    }],\n    construct: [{\n      type: Input\n    }],\n    init: [{\n      type: Input\n    }],\n    modifyAutoColumnSizeSeed: [{\n      type: Input\n    }],\n    modifyAutofillRange: [{\n      type: Input\n    }],\n    modifyColHeader: [{\n      type: Input\n    }],\n    modifyColumnHeaderHeight: [{\n      type: Input\n    }],\n    modifyColumnHeaderValue: [{\n      type: Input\n    }],\n    modifyColWidth: [{\n      type: Input\n    }],\n    modifyCopyableRange: [{\n      type: Input\n    }],\n    modifyFocusedElement: [{\n      type: Input\n    }],\n    modifyData: [{\n      type: Input\n    }],\n    modifyFocusOnTabNavigation: [{\n      type: Input\n    }],\n    modifyGetCellCoords: [{\n      type: Input\n    }],\n    modifyRowData: [{\n      type: Input\n    }],\n    modifyRowHeader: [{\n      type: Input\n    }],\n    modifyRowHeaderWidth: [{\n      type: Input\n    }],\n    modifyRowHeight: [{\n      type: Input\n    }],\n    modifySourceData: [{\n      type: Input\n    }],\n    modifyTransformEnd: [{\n      type: Input\n    }],\n    modifyTransformStart: [{\n      type: Input\n    }],\n    persistentStateLoad: [{\n      type: Input\n    }],\n    persistentStateReset: [{\n      type: Input\n    }],\n    persistentStateSave: [{\n      type: Input\n    }]\n  });\n})();\nclass HotColumnComponent {\n  constructor(parentComponent) {\n    this.parentComponent = parentComponent;\n    this.firstRun = true;\n  }\n  ngOnInit() {\n    this.firstRun = false;\n    this.parentComponent.addColumn(this);\n  }\n  ngOnChanges() {\n    if (this.firstRun) {\n      return;\n    }\n    this.parentComponent.onAfterColumnsChange();\n  }\n  ngOnDestroy() {\n    this.parentComponent.removeColumn(this);\n  }\n}\nHotColumnComponent.ɵfac = function HotColumnComponent_Factory(t) {\n  return new (t || HotColumnComponent)(i0.ɵɵdirectiveInject(HotTableComponent));\n};\nHotColumnComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HotColumnComponent,\n  selectors: [[\"hot-column\"]],\n  inputs: {\n    allowEmpty: \"allowEmpty\",\n    allowHtml: \"allowHtml\",\n    allowInvalid: \"allowInvalid\",\n    checkedTemplate: \"checkedTemplate\",\n    className: \"className\",\n    columnSorting: \"columnSorting\",\n    colWidths: \"colWidths\",\n    commentedCellClassName: \"commentedCellClassName\",\n    copyable: \"copyable\",\n    correctFormat: \"correctFormat\",\n    data: \"data\",\n    dateFormat: \"dateFormat\",\n    defaultDate: \"defaultDate\",\n    editor: \"editor\",\n    filteringCaseSensitive: \"filteringCaseSensitive\",\n    invalidCellClassName: \"invalidCellClassName\",\n    label: \"label\",\n    language: \"language\",\n    noWordWrapClassName: \"noWordWrapClassName\",\n    numericFormat: \"numericFormat\",\n    placeholder: \"placeholder\",\n    placeholderCellClassName: \"placeholderCellClassName\",\n    readOnly: \"readOnly\",\n    readOnlyCellClassName: \"readOnlyCellClassName\",\n    renderer: \"renderer\",\n    selectOptions: \"selectOptions\",\n    skipColumnOnPaste: \"skipColumnOnPaste\",\n    sortByRelevance: \"sortByRelevance\",\n    source: \"source\",\n    strict: \"strict\",\n    title: \"title\",\n    trimDropdown: \"trimDropdown\",\n    type: \"type\",\n    uncheckedTemplate: \"uncheckedTemplate\",\n    validator: \"validator\",\n    visibleRows: \"visibleRows\",\n    width: \"width\",\n    wordWrap: \"wordWrap\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function HotColumnComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HotColumnComponent, [{\n    type: Component,\n    args: [{\n      selector: 'hot-column',\n      template: ''\n    }]\n  }], function () {\n    return [{\n      type: HotTableComponent\n    }];\n  }, {\n    allowEmpty: [{\n      type: Input\n    }],\n    allowHtml: [{\n      type: Input\n    }],\n    allowInvalid: [{\n      type: Input\n    }],\n    checkedTemplate: [{\n      type: Input\n    }],\n    className: [{\n      type: Input\n    }],\n    columnSorting: [{\n      type: Input\n    }],\n    colWidths: [{\n      type: Input\n    }],\n    commentedCellClassName: [{\n      type: Input\n    }],\n    copyable: [{\n      type: Input\n    }],\n    correctFormat: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    dateFormat: [{\n      type: Input\n    }],\n    defaultDate: [{\n      type: Input\n    }],\n    editor: [{\n      type: Input\n    }],\n    filteringCaseSensitive: [{\n      type: Input\n    }],\n    invalidCellClassName: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    language: [{\n      type: Input\n    }],\n    noWordWrapClassName: [{\n      type: Input\n    }],\n    numericFormat: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    placeholderCellClassName: [{\n      type: Input\n    }],\n    readOnly: [{\n      type: Input\n    }],\n    readOnlyCellClassName: [{\n      type: Input\n    }],\n    renderer: [{\n      type: Input\n    }],\n    selectOptions: [{\n      type: Input\n    }],\n    skipColumnOnPaste: [{\n      type: Input\n    }],\n    sortByRelevance: [{\n      type: Input\n    }],\n    source: [{\n      type: Input\n    }],\n    strict: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    trimDropdown: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    uncheckedTemplate: [{\n      type: Input\n    }],\n    validator: [{\n      type: Input\n    }],\n    visibleRows: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    wordWrap: [{\n      type: Input\n    }]\n  });\n})();\nclass HotTableModule {\n  static forRoot() {\n    return {\n      ngModule: HotTableModule,\n      providers: [HotTableRegisterer]\n    };\n  }\n}\nHotTableModule.version = '14.1.0';\nHotTableModule.ɵfac = function HotTableModule_Factory(t) {\n  return new (t || HotTableModule)();\n};\nHotTableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: HotTableModule\n});\nHotTableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HotTableModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [HotTableComponent, HotColumnComponent],\n      exports: [HotTableComponent, HotColumnComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of hot-table\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HOT_DESTROYED_WARNING, HotColumnComponent, HotSettingsResolver, HotTableComponent, HotTableModule, HotTableRegisterer };","map":{"version":3,"names":["i0","Injectable","Component","ViewEncapsulation","ViewChild","Input","NgModule","Handsontable","instances","Map","HOT_DESTROYED_WARNING","HotTableRegisterer","getInstance","id","hotInstance","get","isDestroyed","console","warn","registerInstance","instance","set","removeInstance","delete","ɵfac","ɵprov","type","AVAILABLE_OPTIONS","Object","keys","DefaultSettings","AVAILABLE_HOOKS","hooks","getRegistered","HotSettingsResolver","mergeSettings","component","isSettingsObject","mergedSettings","options","concat","forEach","key","isHook","indexOf","option","args","ngZone","run","apply","prepareChanges","changes","result","parameters","param","hasOwnProperty","currentValue","HotTableComponent","constructor","_hotTableRegisterer","_hotSettingsResolver","__hotInstance","columnsComponents","hotId","ngAfterViewInit","length","columns","column","push","runOutsideAngular","Core","container","nativeElement","init","ngOnChanges","newOptions","updateHotTable","ngOnDestroy","destroy","newSettings","updateSettings","onAfterColumnsChange","onAfterColumnsNumberChange","addColumn","removeColumn","index","splice","NgZone","ɵcmp","selector","template","encapsulation","None","providers","static","settings","activeHeaderClassName","allowEmpty","allowHtml","allowInsertColumn","allowInsertRow","allowInvalid","allowRemoveColumn","allowRemoveRow","ariaTags","autoColumnSize","autoRowSize","autoWrapCol","autoWrapRow","bindRowsWithHeaders","cell","cells","checkedTemplate","className","colHeaders","collapsibleColumns","columnHeaderHeight","columnSorting","columnSummary","colWidths","commentedCellClassName","comments","contextMenu","copyable","copyPaste","correctFormat","currentColClassName","currentHeaderClassName","currentRowClassName","customBorders","data","dataSchema","dateFormat","datePickerConfig","defaultDate","tabNavigation","disableVisualSelection","dragToScroll","dropdownMenu","editor","enterBeginsEditing","enterMoves","fillHandle","filter","filteringCaseSensitive","filters","fixedColumnsLeft","fixedColumnsStart","fixedRowsBottom","fixedRowsTop","formulas","fragmentSelection","height","hiddenColumns","hiddenRows","invalidCellClassName","imeFastEdit","label","language","layoutDirection","licenseKey","locale","manualColumnFreeze","manualColumnMove","manualColumnResize","manualRowMove","manualRowResize","maxCols","maxRows","mergeCells","minCols","minRows","minSpareCols","minSpareRows","multiColumnSorting","navigableHeaders","nestedHeaders","nestedRows","noWordWrapClassName","numericFormat","observeDOMVisibility","outsideClickDeselects","persistentState","placeholder","placeholderCellClassName","preventOverflow","preventWheel","readOnly","readOnlyCellClassName","renderAllColumns","renderAllRows","renderer","rowHeaders","rowHeaderWidth","rowHeights","search","selectionMode","selectOptions","skipColumnOnPaste","skipRowOnPaste","sortByRelevance","source","startCols","startRows","stretchH","strict","tableClassName","tabMoves","title","trimDropdown","trimRows","trimWhitespace","uncheckedTemplate","undo","validator","viewportColumnRenderingOffset","viewportRowRenderingOffset","visibleRows","width","wordWrap","afterAddChild","afterAutofill","afterBeginEditing","afterCellMetaReset","afterChange","afterChangesObserved","afterColumnCollapse","afterColumnExpand","afterColumnFreeze","afterColumnMove","afterColumnResize","afterColumnSequenceChange","afterColumnSort","afterColumnUnfreeze","afterContextMenuDefaultOptions","afterContextMenuHide","afterContextMenuShow","afterCopy","afterCopyLimit","afterCreateCol","afterCreateRow","afterCut","afterDeselect","afterDestroy","afterDetachChild","afterDocumentKeyDown","afterDrawSelection","afterDropdownMenuDefaultOptions","afterDropdownMenuHide","afterDropdownMenuShow","afterFilter","afterFormulasValuesUpdate","afterGetCellMeta","afterGetColHeader","afterGetColumnHeaderRenderers","afterGetRowHeader","afterGetRowHeaderRenderers","afterHideColumns","afterHideRows","afterInit","afterLanguageChange","afterListen","afterLoadData","afterMergeCells","afterModifyTransformEnd","afterModifyTransformStart","afterMomentumScroll","afterNamedExpressionAdded","afterNamedExpressionRemoved","afterOnCellContextMenu","afterOnCellCornerDblClick","afterOnCellCornerMouseDown","afterOnCellMouseDown","afterOnCellMouseOut","afterOnCellMouseOver","afterOnCellMouseUp","afterPaste","afterPluginsInitialized","afterRedo","afterRedoStackChange","afterRefreshDimensions","afterRemoveCellMeta","afterRemoveCol","afterRemoveRow","afterRender","afterRenderer","afterRowMove","afterRowResize","afterRowSequenceChange","afterScrollHorizontally","afterScrollVertically","afterScroll","afterSelectColumns","afterSelection","afterSelectionByProp","afterSelectionEnd","afterSelectionEndByProp","afterSelectRows","afterSetCellMeta","afterSetDataAtCell","afterSetDataAtRowProp","afterSetSourceDataAtCell","afterSheetAdded","afterSheetRenamed","afterSheetRemoved","afterTrimRow","afterUndo","afterUndoStackChange","afterUnhideColumns","afterUnhideRows","afterUnlisten","afterUnmergeCells","afterUntrimRow","afterUpdateData","afterUpdateSettings","afterValidate","afterViewportColumnCalculatorOverride","afterViewportRowCalculatorOverride","afterViewRender","beforeAddChild","beforeAutofill","beforeCellAlignment","beforeChange","beforeChangeRender","beforeColumnCollapse","beforeColumnExpand","beforeColumnFreeze","beforeColumnMove","beforeColumnResize","beforeColumnSort","beforeColumnWrap","beforeColumnUnfreeze","beforeContextMenuSetItems","beforeContextMenuShow","beforeCopy","beforeCreateCol","beforeCreateRow","beforeCut","beforeDetachChild","beforeDrawBorders","beforeDropdownMenuSetItems","beforeDropdownMenuShow","beforeFilter","beforeGetCellMeta","beforeHideColumns","beforeHideRows","beforeHighlightingColumnHeader","beforeHighlightingRowHeader","beforeInit","beforeInitWalkontable","beforeKeyDown","beforeLanguageChange","beforeLoadData","beforeMergeCells","beforeOnCellContextMenu","beforeOnCellMouseDown","beforeOnCellMouseOut","beforeOnCellMouseOver","beforeOnCellMouseUp","beforePaste","beforeRedo","beforeRedoStackChange","beforeRefreshDimensions","beforeRemoveCellClassNames","beforeRemoveCellMeta","beforeRemoveCol","beforeRemoveRow","beforeRender","beforeRenderer","beforeRowMove","beforeRowResize","beforeRowWrap","beforeSelectColumns","beforeSelectionHighlightSet","beforeSelectRows","beforeSetCellMeta","beforeSetRangeEnd","beforeSetRangeStart","beforeSetRangeStartOnly","beforeStretchingColumnWidth","beforeTouchScroll","beforeTrimRow","beforeUndo","beforeUndoStackChange","beforeUnhideColumns","beforeUnhideRows","beforeUnmergeCells","beforeUntrimRow","beforeUpdateData","beforeValidate","beforeValueRender","beforeViewportScroll","beforeViewportScrollHorizontally","beforeViewportScrollVertically","beforeViewRender","construct","modifyAutoColumnSizeSeed","modifyAutofillRange","modifyColHeader","modifyColumnHeaderHeight","modifyColumnHeaderValue","modifyColWidth","modifyCopyableRange","modifyFocusedElement","modifyData","modifyFocusOnTabNavigation","modifyGetCellCoords","modifyRowData","modifyRowHeader","modifyRowHeaderWidth","modifyRowHeight","modifySourceData","modifyTransformEnd","modifyTransformStart","persistentStateLoad","persistentStateReset","persistentStateSave","HotColumnComponent","parentComponent","firstRun","ngOnInit","HotTableModule","forRoot","ngModule","version","ɵmod","ɵinj","declarations","exports"],"sources":["C:/laragon/www/SIAW-Angular-B/node_modules/@handsontable/angular/fesm2015/handsontable-angular.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, ViewEncapsulation, ViewChild, Input, NgModule } from '@angular/core';\nimport Handsontable from 'handsontable/base';\n\nconst instances = new Map();\nconst HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' +\n    ' used properly.';\nclass HotTableRegisterer {\n    getInstance(id) {\n        const hotInstance = instances.get(id);\n        if (hotInstance.isDestroyed) {\n            console.warn(HOT_DESTROYED_WARNING);\n            return null;\n        }\n        return hotInstance;\n    }\n    registerInstance(id, instance) {\n        return instances.set(id, instance);\n    }\n    removeInstance(id) {\n        return instances.delete(id);\n    }\n}\nHotTableRegisterer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotTableRegisterer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nHotTableRegisterer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotTableRegisterer });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotTableRegisterer, decorators: [{\n            type: Injectable\n        }] });\n\nconst AVAILABLE_OPTIONS = Object.keys(Handsontable.DefaultSettings);\nconst AVAILABLE_HOOKS = Handsontable.hooks.getRegistered();\nclass HotSettingsResolver {\n    mergeSettings(component) {\n        const isSettingsObject = 'settings' in component && (typeof component['settings'] === 'object');\n        const mergedSettings = isSettingsObject ? component['settings'] : {};\n        const options = AVAILABLE_HOOKS.concat(AVAILABLE_OPTIONS);\n        options.forEach(key => {\n            const isHook = AVAILABLE_HOOKS.indexOf(key) > -1;\n            let option;\n            if (isSettingsObject && isHook) {\n                option = component['settings'][key];\n            }\n            if (component[key] !== void 0) {\n                option = component[key];\n            }\n            if (option === void 0) {\n                return;\n            }\n            else if (('ngZone' in component) && (typeof option === 'function' && isHook)) {\n                mergedSettings[key] = function (...args) {\n                    return component.ngZone.run(() => option.apply(this, args));\n                };\n            }\n            else {\n                mergedSettings[key] = option;\n            }\n        });\n        return mergedSettings;\n    }\n    prepareChanges(changes) {\n        const result = {};\n        const parameters = Object.keys(changes);\n        parameters.forEach((param) => {\n            if (changes.hasOwnProperty(param)) {\n                result[param] = changes[param].currentValue;\n            }\n        });\n        return result;\n    }\n}\nHotSettingsResolver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotSettingsResolver, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nHotSettingsResolver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotSettingsResolver });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotSettingsResolver, decorators: [{\n            type: Injectable\n        }] });\n\nclass HotTableComponent {\n    constructor(_hotTableRegisterer, _hotSettingsResolver, ngZone) {\n        this._hotTableRegisterer = _hotTableRegisterer;\n        this._hotSettingsResolver = _hotSettingsResolver;\n        this.ngZone = ngZone;\n        this.__hotInstance = null;\n        this.columnsComponents = [];\n        this.hotId = '';\n    }\n    get hotInstance() {\n        if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n            // Will return the Handsontable instance or `null` if it's not yet been created.\n            return this.__hotInstance;\n        }\n        else {\n            this._hotTableRegisterer.removeInstance(this.hotId);\n            console.warn(HOT_DESTROYED_WARNING);\n            return null;\n        }\n    }\n    set hotInstance(hotInstance) {\n        this.__hotInstance = hotInstance;\n    }\n    ngAfterViewInit() {\n        const options = this._hotSettingsResolver.mergeSettings(this);\n        if (this.columnsComponents.length > 0) {\n            const columns = [];\n            this.columnsComponents.forEach((column) => {\n                columns.push(this._hotSettingsResolver.mergeSettings(column));\n            });\n            options['columns'] = columns;\n        }\n        this.ngZone.runOutsideAngular(() => {\n            this.hotInstance = new Handsontable.Core(this.container.nativeElement, options);\n            if (this.hotId) {\n                this._hotTableRegisterer.registerInstance(this.hotId, this.hotInstance);\n            }\n            // @ts-ignore\n            this.hotInstance.init();\n        });\n    }\n    ngOnChanges(changes) {\n        if (this.hotInstance === null) {\n            return;\n        }\n        const newOptions = this._hotSettingsResolver.prepareChanges(changes);\n        this.updateHotTable(newOptions);\n    }\n    ngOnDestroy() {\n        this.ngZone.runOutsideAngular(() => {\n            if (this.hotInstance) {\n                this.hotInstance.destroy();\n            }\n        });\n        if (this.hotId) {\n            this._hotTableRegisterer.removeInstance(this.hotId);\n        }\n    }\n    updateHotTable(newSettings) {\n        if (!this.hotInstance) {\n            return;\n        }\n        this.ngZone.runOutsideAngular(() => {\n            this.hotInstance.updateSettings(newSettings, false);\n        });\n    }\n    onAfterColumnsChange() {\n        if (this.columnsComponents === void 0) {\n            return;\n        }\n        if (this.columnsComponents.length > 0) {\n            const columns = [];\n            this.columnsComponents.forEach((column) => {\n                columns.push(this._hotSettingsResolver.mergeSettings(column));\n            });\n            const newOptions = {\n                columns: columns\n            };\n            this.updateHotTable(newOptions);\n        }\n    }\n    onAfterColumnsNumberChange() {\n        const columns = [];\n        if (this.columnsComponents.length > 0) {\n            this.columnsComponents.forEach((column) => {\n                columns.push(this._hotSettingsResolver.mergeSettings(column));\n            });\n        }\n        this.updateHotTable({ columns });\n    }\n    addColumn(column) {\n        this.columnsComponents.push(column);\n        this.onAfterColumnsNumberChange();\n    }\n    removeColumn(column) {\n        const index = this.columnsComponents.indexOf(column);\n        this.columnsComponents.splice(index, 1);\n        this.onAfterColumnsNumberChange();\n    }\n}\nHotTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotTableComponent, deps: [{ token: HotTableRegisterer }, { token: HotSettingsResolver }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nHotTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: HotTableComponent, selector: \"hot-table\", inputs: { settings: \"settings\", hotId: \"hotId\", activeHeaderClassName: \"activeHeaderClassName\", allowEmpty: \"allowEmpty\", allowHtml: \"allowHtml\", allowInsertColumn: \"allowInsertColumn\", allowInsertRow: \"allowInsertRow\", allowInvalid: \"allowInvalid\", allowRemoveColumn: \"allowRemoveColumn\", allowRemoveRow: \"allowRemoveRow\", ariaTags: \"ariaTags\", autoColumnSize: \"autoColumnSize\", autoRowSize: \"autoRowSize\", autoWrapCol: \"autoWrapCol\", autoWrapRow: \"autoWrapRow\", bindRowsWithHeaders: \"bindRowsWithHeaders\", cell: \"cell\", cells: \"cells\", checkedTemplate: \"checkedTemplate\", className: \"className\", colHeaders: \"colHeaders\", collapsibleColumns: \"collapsibleColumns\", columnHeaderHeight: \"columnHeaderHeight\", columns: \"columns\", columnSorting: \"columnSorting\", columnSummary: \"columnSummary\", colWidths: \"colWidths\", commentedCellClassName: \"commentedCellClassName\", comments: \"comments\", contextMenu: \"contextMenu\", copyable: \"copyable\", copyPaste: \"copyPaste\", correctFormat: \"correctFormat\", currentColClassName: \"currentColClassName\", currentHeaderClassName: \"currentHeaderClassName\", currentRowClassName: \"currentRowClassName\", customBorders: \"customBorders\", data: \"data\", dataSchema: \"dataSchema\", dateFormat: \"dateFormat\", datePickerConfig: \"datePickerConfig\", defaultDate: \"defaultDate\", tabNavigation: \"tabNavigation\", disableVisualSelection: \"disableVisualSelection\", dragToScroll: \"dragToScroll\", dropdownMenu: \"dropdownMenu\", editor: \"editor\", enterBeginsEditing: \"enterBeginsEditing\", enterMoves: \"enterMoves\", fillHandle: \"fillHandle\", filter: \"filter\", filteringCaseSensitive: \"filteringCaseSensitive\", filters: \"filters\", fixedColumnsLeft: \"fixedColumnsLeft\", fixedColumnsStart: \"fixedColumnsStart\", fixedRowsBottom: \"fixedRowsBottom\", fixedRowsTop: \"fixedRowsTop\", formulas: \"formulas\", fragmentSelection: \"fragmentSelection\", height: \"height\", hiddenColumns: \"hiddenColumns\", hiddenRows: \"hiddenRows\", invalidCellClassName: \"invalidCellClassName\", imeFastEdit: \"imeFastEdit\", label: \"label\", language: \"language\", layoutDirection: \"layoutDirection\", licenseKey: \"licenseKey\", locale: \"locale\", manualColumnFreeze: \"manualColumnFreeze\", manualColumnMove: \"manualColumnMove\", manualColumnResize: \"manualColumnResize\", manualRowMove: \"manualRowMove\", manualRowResize: \"manualRowResize\", maxCols: \"maxCols\", maxRows: \"maxRows\", mergeCells: \"mergeCells\", minCols: \"minCols\", minRows: \"minRows\", minSpareCols: \"minSpareCols\", minSpareRows: \"minSpareRows\", multiColumnSorting: \"multiColumnSorting\", navigableHeaders: \"navigableHeaders\", nestedHeaders: \"nestedHeaders\", nestedRows: \"nestedRows\", noWordWrapClassName: \"noWordWrapClassName\", numericFormat: \"numericFormat\", observeDOMVisibility: \"observeDOMVisibility\", outsideClickDeselects: \"outsideClickDeselects\", persistentState: \"persistentState\", placeholder: \"placeholder\", placeholderCellClassName: \"placeholderCellClassName\", preventOverflow: \"preventOverflow\", preventWheel: \"preventWheel\", readOnly: \"readOnly\", readOnlyCellClassName: \"readOnlyCellClassName\", renderAllColumns: \"renderAllColumns\", renderAllRows: \"renderAllRows\", renderer: \"renderer\", rowHeaders: \"rowHeaders\", rowHeaderWidth: \"rowHeaderWidth\", rowHeights: \"rowHeights\", search: \"search\", selectionMode: \"selectionMode\", selectOptions: \"selectOptions\", skipColumnOnPaste: \"skipColumnOnPaste\", skipRowOnPaste: \"skipRowOnPaste\", sortByRelevance: \"sortByRelevance\", source: \"source\", startCols: \"startCols\", startRows: \"startRows\", stretchH: \"stretchH\", strict: \"strict\", tableClassName: \"tableClassName\", tabMoves: \"tabMoves\", title: \"title\", trimDropdown: \"trimDropdown\", trimRows: \"trimRows\", trimWhitespace: \"trimWhitespace\", type: \"type\", uncheckedTemplate: \"uncheckedTemplate\", undo: \"undo\", validator: \"validator\", viewportColumnRenderingOffset: \"viewportColumnRenderingOffset\", viewportRowRenderingOffset: \"viewportRowRenderingOffset\", visibleRows: \"visibleRows\", width: \"width\", wordWrap: \"wordWrap\", afterAddChild: \"afterAddChild\", afterAutofill: \"afterAutofill\", afterBeginEditing: \"afterBeginEditing\", afterCellMetaReset: \"afterCellMetaReset\", afterChange: \"afterChange\", afterChangesObserved: \"afterChangesObserved\", afterColumnCollapse: \"afterColumnCollapse\", afterColumnExpand: \"afterColumnExpand\", afterColumnFreeze: \"afterColumnFreeze\", afterColumnMove: \"afterColumnMove\", afterColumnResize: \"afterColumnResize\", afterColumnSequenceChange: \"afterColumnSequenceChange\", afterColumnSort: \"afterColumnSort\", afterColumnUnfreeze: \"afterColumnUnfreeze\", afterContextMenuDefaultOptions: \"afterContextMenuDefaultOptions\", afterContextMenuHide: \"afterContextMenuHide\", afterContextMenuShow: \"afterContextMenuShow\", afterCopy: \"afterCopy\", afterCopyLimit: \"afterCopyLimit\", afterCreateCol: \"afterCreateCol\", afterCreateRow: \"afterCreateRow\", afterCut: \"afterCut\", afterDeselect: \"afterDeselect\", afterDestroy: \"afterDestroy\", afterDetachChild: \"afterDetachChild\", afterDocumentKeyDown: \"afterDocumentKeyDown\", afterDrawSelection: \"afterDrawSelection\", afterDropdownMenuDefaultOptions: \"afterDropdownMenuDefaultOptions\", afterDropdownMenuHide: \"afterDropdownMenuHide\", afterDropdownMenuShow: \"afterDropdownMenuShow\", afterFilter: \"afterFilter\", afterFormulasValuesUpdate: \"afterFormulasValuesUpdate\", afterGetCellMeta: \"afterGetCellMeta\", afterGetColHeader: \"afterGetColHeader\", afterGetColumnHeaderRenderers: \"afterGetColumnHeaderRenderers\", afterGetRowHeader: \"afterGetRowHeader\", afterGetRowHeaderRenderers: \"afterGetRowHeaderRenderers\", afterHideColumns: \"afterHideColumns\", afterHideRows: \"afterHideRows\", afterInit: \"afterInit\", afterLanguageChange: \"afterLanguageChange\", afterListen: \"afterListen\", afterLoadData: \"afterLoadData\", afterMergeCells: \"afterMergeCells\", afterModifyTransformEnd: \"afterModifyTransformEnd\", afterModifyTransformStart: \"afterModifyTransformStart\", afterMomentumScroll: \"afterMomentumScroll\", afterNamedExpressionAdded: \"afterNamedExpressionAdded\", afterNamedExpressionRemoved: \"afterNamedExpressionRemoved\", afterOnCellContextMenu: \"afterOnCellContextMenu\", afterOnCellCornerDblClick: \"afterOnCellCornerDblClick\", afterOnCellCornerMouseDown: \"afterOnCellCornerMouseDown\", afterOnCellMouseDown: \"afterOnCellMouseDown\", afterOnCellMouseOut: \"afterOnCellMouseOut\", afterOnCellMouseOver: \"afterOnCellMouseOver\", afterOnCellMouseUp: \"afterOnCellMouseUp\", afterPaste: \"afterPaste\", afterPluginsInitialized: \"afterPluginsInitialized\", afterRedo: \"afterRedo\", afterRedoStackChange: \"afterRedoStackChange\", afterRefreshDimensions: \"afterRefreshDimensions\", afterRemoveCellMeta: \"afterRemoveCellMeta\", afterRemoveCol: \"afterRemoveCol\", afterRemoveRow: \"afterRemoveRow\", afterRender: \"afterRender\", afterRenderer: \"afterRenderer\", afterRowMove: \"afterRowMove\", afterRowResize: \"afterRowResize\", afterRowSequenceChange: \"afterRowSequenceChange\", afterScrollHorizontally: \"afterScrollHorizontally\", afterScrollVertically: \"afterScrollVertically\", afterScroll: \"afterScroll\", afterSelectColumns: \"afterSelectColumns\", afterSelection: \"afterSelection\", afterSelectionByProp: \"afterSelectionByProp\", afterSelectionEnd: \"afterSelectionEnd\", afterSelectionEndByProp: \"afterSelectionEndByProp\", afterSelectRows: \"afterSelectRows\", afterSetCellMeta: \"afterSetCellMeta\", afterSetDataAtCell: \"afterSetDataAtCell\", afterSetDataAtRowProp: \"afterSetDataAtRowProp\", afterSetSourceDataAtCell: \"afterSetSourceDataAtCell\", afterSheetAdded: \"afterSheetAdded\", afterSheetRenamed: \"afterSheetRenamed\", afterSheetRemoved: \"afterSheetRemoved\", afterTrimRow: \"afterTrimRow\", afterUndo: \"afterUndo\", afterUndoStackChange: \"afterUndoStackChange\", afterUnhideColumns: \"afterUnhideColumns\", afterUnhideRows: \"afterUnhideRows\", afterUnlisten: \"afterUnlisten\", afterUnmergeCells: \"afterUnmergeCells\", afterUntrimRow: \"afterUntrimRow\", afterUpdateData: \"afterUpdateData\", afterUpdateSettings: \"afterUpdateSettings\", afterValidate: \"afterValidate\", afterViewportColumnCalculatorOverride: \"afterViewportColumnCalculatorOverride\", afterViewportRowCalculatorOverride: \"afterViewportRowCalculatorOverride\", afterViewRender: \"afterViewRender\", beforeAddChild: \"beforeAddChild\", beforeAutofill: \"beforeAutofill\", beforeCellAlignment: \"beforeCellAlignment\", beforeChange: \"beforeChange\", beforeChangeRender: \"beforeChangeRender\", beforeColumnCollapse: \"beforeColumnCollapse\", beforeColumnExpand: \"beforeColumnExpand\", beforeColumnFreeze: \"beforeColumnFreeze\", beforeColumnMove: \"beforeColumnMove\", beforeColumnResize: \"beforeColumnResize\", beforeColumnSort: \"beforeColumnSort\", beforeColumnWrap: \"beforeColumnWrap\", beforeColumnUnfreeze: \"beforeColumnUnfreeze\", beforeContextMenuSetItems: \"beforeContextMenuSetItems\", beforeContextMenuShow: \"beforeContextMenuShow\", beforeCopy: \"beforeCopy\", beforeCreateCol: \"beforeCreateCol\", beforeCreateRow: \"beforeCreateRow\", beforeCut: \"beforeCut\", beforeDetachChild: \"beforeDetachChild\", beforeDrawBorders: \"beforeDrawBorders\", beforeDropdownMenuSetItems: \"beforeDropdownMenuSetItems\", beforeDropdownMenuShow: \"beforeDropdownMenuShow\", beforeFilter: \"beforeFilter\", beforeGetCellMeta: \"beforeGetCellMeta\", beforeHideColumns: \"beforeHideColumns\", beforeHideRows: \"beforeHideRows\", beforeHighlightingColumnHeader: \"beforeHighlightingColumnHeader\", beforeHighlightingRowHeader: \"beforeHighlightingRowHeader\", beforeInit: \"beforeInit\", beforeInitWalkontable: \"beforeInitWalkontable\", beforeKeyDown: \"beforeKeyDown\", beforeLanguageChange: \"beforeLanguageChange\", beforeLoadData: \"beforeLoadData\", beforeMergeCells: \"beforeMergeCells\", beforeOnCellContextMenu: \"beforeOnCellContextMenu\", beforeOnCellMouseDown: \"beforeOnCellMouseDown\", beforeOnCellMouseOut: \"beforeOnCellMouseOut\", beforeOnCellMouseOver: \"beforeOnCellMouseOver\", beforeOnCellMouseUp: \"beforeOnCellMouseUp\", beforePaste: \"beforePaste\", beforeRedo: \"beforeRedo\", beforeRedoStackChange: \"beforeRedoStackChange\", beforeRefreshDimensions: \"beforeRefreshDimensions\", beforeRemoveCellClassNames: \"beforeRemoveCellClassNames\", beforeRemoveCellMeta: \"beforeRemoveCellMeta\", beforeRemoveCol: \"beforeRemoveCol\", beforeRemoveRow: \"beforeRemoveRow\", beforeRender: \"beforeRender\", beforeRenderer: \"beforeRenderer\", beforeRowMove: \"beforeRowMove\", beforeRowResize: \"beforeRowResize\", beforeRowWrap: \"beforeRowWrap\", beforeSelectColumns: \"beforeSelectColumns\", beforeSelectionHighlightSet: \"beforeSelectionHighlightSet\", beforeSelectRows: \"beforeSelectRows\", beforeSetCellMeta: \"beforeSetCellMeta\", beforeSetRangeEnd: \"beforeSetRangeEnd\", beforeSetRangeStart: \"beforeSetRangeStart\", beforeSetRangeStartOnly: \"beforeSetRangeStartOnly\", beforeStretchingColumnWidth: \"beforeStretchingColumnWidth\", beforeTouchScroll: \"beforeTouchScroll\", beforeTrimRow: \"beforeTrimRow\", beforeUndo: \"beforeUndo\", beforeUndoStackChange: \"beforeUndoStackChange\", beforeUnhideColumns: \"beforeUnhideColumns\", beforeUnhideRows: \"beforeUnhideRows\", beforeUnmergeCells: \"beforeUnmergeCells\", beforeUntrimRow: \"beforeUntrimRow\", beforeUpdateData: \"beforeUpdateData\", beforeValidate: \"beforeValidate\", beforeValueRender: \"beforeValueRender\", beforeViewportScroll: \"beforeViewportScroll\", beforeViewportScrollHorizontally: \"beforeViewportScrollHorizontally\", beforeViewportScrollVertically: \"beforeViewportScrollVertically\", beforeViewRender: \"beforeViewRender\", construct: \"construct\", init: \"init\", modifyAutoColumnSizeSeed: \"modifyAutoColumnSizeSeed\", modifyAutofillRange: \"modifyAutofillRange\", modifyColHeader: \"modifyColHeader\", modifyColumnHeaderHeight: \"modifyColumnHeaderHeight\", modifyColumnHeaderValue: \"modifyColumnHeaderValue\", modifyColWidth: \"modifyColWidth\", modifyCopyableRange: \"modifyCopyableRange\", modifyFocusedElement: \"modifyFocusedElement\", modifyData: \"modifyData\", modifyFocusOnTabNavigation: \"modifyFocusOnTabNavigation\", modifyGetCellCoords: \"modifyGetCellCoords\", modifyRowData: \"modifyRowData\", modifyRowHeader: \"modifyRowHeader\", modifyRowHeaderWidth: \"modifyRowHeaderWidth\", modifyRowHeight: \"modifyRowHeight\", modifySourceData: \"modifySourceData\", modifyTransformEnd: \"modifyTransformEnd\", modifyTransformStart: \"modifyTransformStart\", persistentStateLoad: \"persistentStateLoad\", persistentStateReset: \"persistentStateReset\", persistentStateSave: \"persistentStateSave\" }, providers: [HotTableRegisterer, HotSettingsResolver], viewQueries: [{ propertyName: \"container\", first: true, predicate: [\"container\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: '<div #container [id]=\"hotId\"></div>', isInline: true, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotTableComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'hot-table',\n                    template: '<div #container [id]=\"hotId\"></div>',\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [HotTableRegisterer, HotSettingsResolver],\n                }]\n        }], ctorParameters: function () { return [{ type: HotTableRegisterer }, { type: HotSettingsResolver }, { type: i0.NgZone }]; }, propDecorators: { container: [{\n                type: ViewChild,\n                args: ['container', { static: false }]\n            }], settings: [{\n                type: Input\n            }], hotId: [{\n                type: Input\n            }], activeHeaderClassName: [{\n                type: Input\n            }], allowEmpty: [{\n                type: Input\n            }], allowHtml: [{\n                type: Input\n            }], allowInsertColumn: [{\n                type: Input\n            }], allowInsertRow: [{\n                type: Input\n            }], allowInvalid: [{\n                type: Input\n            }], allowRemoveColumn: [{\n                type: Input\n            }], allowRemoveRow: [{\n                type: Input\n            }], ariaTags: [{\n                type: Input\n            }], autoColumnSize: [{\n                type: Input\n            }], autoRowSize: [{\n                type: Input\n            }], autoWrapCol: [{\n                type: Input\n            }], autoWrapRow: [{\n                type: Input\n            }], bindRowsWithHeaders: [{\n                type: Input\n            }], cell: [{\n                type: Input\n            }], cells: [{\n                type: Input\n            }], checkedTemplate: [{\n                type: Input\n            }], className: [{\n                type: Input\n            }], colHeaders: [{\n                type: Input\n            }], collapsibleColumns: [{\n                type: Input\n            }], columnHeaderHeight: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], columnSorting: [{\n                type: Input\n            }], columnSummary: [{\n                type: Input\n            }], colWidths: [{\n                type: Input\n            }], commentedCellClassName: [{\n                type: Input\n            }], comments: [{\n                type: Input\n            }], contextMenu: [{\n                type: Input\n            }], copyable: [{\n                type: Input\n            }], copyPaste: [{\n                type: Input\n            }], correctFormat: [{\n                type: Input\n            }], currentColClassName: [{\n                type: Input\n            }], currentHeaderClassName: [{\n                type: Input\n            }], currentRowClassName: [{\n                type: Input\n            }], customBorders: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], dataSchema: [{\n                type: Input\n            }], dateFormat: [{\n                type: Input\n            }], datePickerConfig: [{\n                type: Input\n            }], defaultDate: [{\n                type: Input\n            }], tabNavigation: [{\n                type: Input\n            }], disableVisualSelection: [{\n                type: Input\n            }], dragToScroll: [{\n                type: Input\n            }], dropdownMenu: [{\n                type: Input\n            }], editor: [{\n                type: Input\n            }], enterBeginsEditing: [{\n                type: Input\n            }], enterMoves: [{\n                type: Input\n            }], fillHandle: [{\n                type: Input\n            }], filter: [{\n                type: Input\n            }], filteringCaseSensitive: [{\n                type: Input\n            }], filters: [{\n                type: Input\n            }], fixedColumnsLeft: [{\n                type: Input\n            }], fixedColumnsStart: [{\n                type: Input\n            }], fixedRowsBottom: [{\n                type: Input\n            }], fixedRowsTop: [{\n                type: Input\n            }], formulas: [{\n                type: Input\n            }], fragmentSelection: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], hiddenColumns: [{\n                type: Input\n            }], hiddenRows: [{\n                type: Input\n            }], invalidCellClassName: [{\n                type: Input\n            }], imeFastEdit: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], language: [{\n                type: Input\n            }], layoutDirection: [{\n                type: Input\n            }], licenseKey: [{\n                type: Input\n            }], locale: [{\n                type: Input\n            }], manualColumnFreeze: [{\n                type: Input\n            }], manualColumnMove: [{\n                type: Input\n            }], manualColumnResize: [{\n                type: Input\n            }], manualRowMove: [{\n                type: Input\n            }], manualRowResize: [{\n                type: Input\n            }], maxCols: [{\n                type: Input\n            }], maxRows: [{\n                type: Input\n            }], mergeCells: [{\n                type: Input\n            }], minCols: [{\n                type: Input\n            }], minRows: [{\n                type: Input\n            }], minSpareCols: [{\n                type: Input\n            }], minSpareRows: [{\n                type: Input\n            }], multiColumnSorting: [{\n                type: Input\n            }], navigableHeaders: [{\n                type: Input\n            }], nestedHeaders: [{\n                type: Input\n            }], nestedRows: [{\n                type: Input\n            }], noWordWrapClassName: [{\n                type: Input\n            }], numericFormat: [{\n                type: Input\n            }], observeDOMVisibility: [{\n                type: Input\n            }], outsideClickDeselects: [{\n                type: Input\n            }], persistentState: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], placeholderCellClassName: [{\n                type: Input\n            }], preventOverflow: [{\n                type: Input\n            }], preventWheel: [{\n                type: Input\n            }], readOnly: [{\n                type: Input\n            }], readOnlyCellClassName: [{\n                type: Input\n            }], renderAllColumns: [{\n                type: Input\n            }], renderAllRows: [{\n                type: Input\n            }], renderer: [{\n                type: Input\n            }], rowHeaders: [{\n                type: Input\n            }], rowHeaderWidth: [{\n                type: Input\n            }], rowHeights: [{\n                type: Input\n            }], search: [{\n                type: Input\n            }], selectionMode: [{\n                type: Input\n            }], selectOptions: [{\n                type: Input\n            }], skipColumnOnPaste: [{\n                type: Input\n            }], skipRowOnPaste: [{\n                type: Input\n            }], sortByRelevance: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], startCols: [{\n                type: Input\n            }], startRows: [{\n                type: Input\n            }], stretchH: [{\n                type: Input\n            }], strict: [{\n                type: Input\n            }], tableClassName: [{\n                type: Input\n            }], tabMoves: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], trimDropdown: [{\n                type: Input\n            }], trimRows: [{\n                type: Input\n            }], trimWhitespace: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], uncheckedTemplate: [{\n                type: Input\n            }], undo: [{\n                type: Input\n            }], validator: [{\n                type: Input\n            }], viewportColumnRenderingOffset: [{\n                type: Input\n            }], viewportRowRenderingOffset: [{\n                type: Input\n            }], visibleRows: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], wordWrap: [{\n                type: Input\n            }], afterAddChild: [{\n                type: Input\n            }], afterAutofill: [{\n                type: Input\n            }], afterBeginEditing: [{\n                type: Input\n            }], afterCellMetaReset: [{\n                type: Input\n            }], afterChange: [{\n                type: Input\n            }], afterChangesObserved: [{\n                type: Input\n            }], afterColumnCollapse: [{\n                type: Input\n            }], afterColumnExpand: [{\n                type: Input\n            }], afterColumnFreeze: [{\n                type: Input\n            }], afterColumnMove: [{\n                type: Input\n            }], afterColumnResize: [{\n                type: Input\n            }], afterColumnSequenceChange: [{\n                type: Input\n            }], afterColumnSort: [{\n                type: Input\n            }], afterColumnUnfreeze: [{\n                type: Input\n            }], afterContextMenuDefaultOptions: [{\n                type: Input\n            }], afterContextMenuHide: [{\n                type: Input\n            }], afterContextMenuShow: [{\n                type: Input\n            }], afterCopy: [{\n                type: Input\n            }], afterCopyLimit: [{\n                type: Input\n            }], afterCreateCol: [{\n                type: Input\n            }], afterCreateRow: [{\n                type: Input\n            }], afterCut: [{\n                type: Input\n            }], afterDeselect: [{\n                type: Input\n            }], afterDestroy: [{\n                type: Input\n            }], afterDetachChild: [{\n                type: Input\n            }], afterDocumentKeyDown: [{\n                type: Input\n            }], afterDrawSelection: [{\n                type: Input\n            }], afterDropdownMenuDefaultOptions: [{\n                type: Input\n            }], afterDropdownMenuHide: [{\n                type: Input\n            }], afterDropdownMenuShow: [{\n                type: Input\n            }], afterFilter: [{\n                type: Input\n            }], afterFormulasValuesUpdate: [{\n                type: Input\n            }], afterGetCellMeta: [{\n                type: Input\n            }], afterGetColHeader: [{\n                type: Input\n            }], afterGetColumnHeaderRenderers: [{\n                type: Input\n            }], afterGetRowHeader: [{\n                type: Input\n            }], afterGetRowHeaderRenderers: [{\n                type: Input\n            }], afterHideColumns: [{\n                type: Input\n            }], afterHideRows: [{\n                type: Input\n            }], afterInit: [{\n                type: Input\n            }], afterLanguageChange: [{\n                type: Input\n            }], afterListen: [{\n                type: Input\n            }], afterLoadData: [{\n                type: Input\n            }], afterMergeCells: [{\n                type: Input\n            }], afterModifyTransformEnd: [{\n                type: Input\n            }], afterModifyTransformStart: [{\n                type: Input\n            }], afterMomentumScroll: [{\n                type: Input\n            }], afterNamedExpressionAdded: [{\n                type: Input\n            }], afterNamedExpressionRemoved: [{\n                type: Input\n            }], afterOnCellContextMenu: [{\n                type: Input\n            }], afterOnCellCornerDblClick: [{\n                type: Input\n            }], afterOnCellCornerMouseDown: [{\n                type: Input\n            }], afterOnCellMouseDown: [{\n                type: Input\n            }], afterOnCellMouseOut: [{\n                type: Input\n            }], afterOnCellMouseOver: [{\n                type: Input\n            }], afterOnCellMouseUp: [{\n                type: Input\n            }], afterPaste: [{\n                type: Input\n            }], afterPluginsInitialized: [{\n                type: Input\n            }], afterRedo: [{\n                type: Input\n            }], afterRedoStackChange: [{\n                type: Input\n            }], afterRefreshDimensions: [{\n                type: Input\n            }], afterRemoveCellMeta: [{\n                type: Input\n            }], afterRemoveCol: [{\n                type: Input\n            }], afterRemoveRow: [{\n                type: Input\n            }], afterRender: [{\n                type: Input\n            }], afterRenderer: [{\n                type: Input\n            }], afterRowMove: [{\n                type: Input\n            }], afterRowResize: [{\n                type: Input\n            }], afterRowSequenceChange: [{\n                type: Input\n            }], afterScrollHorizontally: [{\n                type: Input\n            }], afterScrollVertically: [{\n                type: Input\n            }], afterScroll: [{\n                type: Input\n            }], afterSelectColumns: [{\n                type: Input\n            }], afterSelection: [{\n                type: Input\n            }], afterSelectionByProp: [{\n                type: Input\n            }], afterSelectionEnd: [{\n                type: Input\n            }], afterSelectionEndByProp: [{\n                type: Input\n            }], afterSelectRows: [{\n                type: Input\n            }], afterSetCellMeta: [{\n                type: Input\n            }], afterSetDataAtCell: [{\n                type: Input\n            }], afterSetDataAtRowProp: [{\n                type: Input\n            }], afterSetSourceDataAtCell: [{\n                type: Input\n            }], afterSheetAdded: [{\n                type: Input\n            }], afterSheetRenamed: [{\n                type: Input\n            }], afterSheetRemoved: [{\n                type: Input\n            }], afterTrimRow: [{\n                type: Input\n            }], afterUndo: [{\n                type: Input\n            }], afterUndoStackChange: [{\n                type: Input\n            }], afterUnhideColumns: [{\n                type: Input\n            }], afterUnhideRows: [{\n                type: Input\n            }], afterUnlisten: [{\n                type: Input\n            }], afterUnmergeCells: [{\n                type: Input\n            }], afterUntrimRow: [{\n                type: Input\n            }], afterUpdateData: [{\n                type: Input\n            }], afterUpdateSettings: [{\n                type: Input\n            }], afterValidate: [{\n                type: Input\n            }], afterViewportColumnCalculatorOverride: [{\n                type: Input\n            }], afterViewportRowCalculatorOverride: [{\n                type: Input\n            }], afterViewRender: [{\n                type: Input\n            }], beforeAddChild: [{\n                type: Input\n            }], beforeAutofill: [{\n                type: Input\n            }], beforeCellAlignment: [{\n                type: Input\n            }], beforeChange: [{\n                type: Input\n            }], beforeChangeRender: [{\n                type: Input\n            }], beforeColumnCollapse: [{\n                type: Input\n            }], beforeColumnExpand: [{\n                type: Input\n            }], beforeColumnFreeze: [{\n                type: Input\n            }], beforeColumnMove: [{\n                type: Input\n            }], beforeColumnResize: [{\n                type: Input\n            }], beforeColumnSort: [{\n                type: Input\n            }], beforeColumnWrap: [{\n                type: Input\n            }], beforeColumnUnfreeze: [{\n                type: Input\n            }], beforeContextMenuSetItems: [{\n                type: Input\n            }], beforeContextMenuShow: [{\n                type: Input\n            }], beforeCopy: [{\n                type: Input\n            }], beforeCreateCol: [{\n                type: Input\n            }], beforeCreateRow: [{\n                type: Input\n            }], beforeCut: [{\n                type: Input\n            }], beforeDetachChild: [{\n                type: Input\n            }], beforeDrawBorders: [{\n                type: Input\n            }], beforeDropdownMenuSetItems: [{\n                type: Input\n            }], beforeDropdownMenuShow: [{\n                type: Input\n            }], beforeFilter: [{\n                type: Input\n            }], beforeGetCellMeta: [{\n                type: Input\n            }], beforeHideColumns: [{\n                type: Input\n            }], beforeHideRows: [{\n                type: Input\n            }], beforeHighlightingColumnHeader: [{\n                type: Input\n            }], beforeHighlightingRowHeader: [{\n                type: Input\n            }], beforeInit: [{\n                type: Input\n            }], beforeInitWalkontable: [{\n                type: Input\n            }], beforeKeyDown: [{\n                type: Input\n            }], beforeLanguageChange: [{\n                type: Input\n            }], beforeLoadData: [{\n                type: Input\n            }], beforeMergeCells: [{\n                type: Input\n            }], beforeOnCellContextMenu: [{\n                type: Input\n            }], beforeOnCellMouseDown: [{\n                type: Input\n            }], beforeOnCellMouseOut: [{\n                type: Input\n            }], beforeOnCellMouseOver: [{\n                type: Input\n            }], beforeOnCellMouseUp: [{\n                type: Input\n            }], beforePaste: [{\n                type: Input\n            }], beforeRedo: [{\n                type: Input\n            }], beforeRedoStackChange: [{\n                type: Input\n            }], beforeRefreshDimensions: [{\n                type: Input\n            }], beforeRemoveCellClassNames: [{\n                type: Input\n            }], beforeRemoveCellMeta: [{\n                type: Input\n            }], beforeRemoveCol: [{\n                type: Input\n            }], beforeRemoveRow: [{\n                type: Input\n            }], beforeRender: [{\n                type: Input\n            }], beforeRenderer: [{\n                type: Input\n            }], beforeRowMove: [{\n                type: Input\n            }], beforeRowResize: [{\n                type: Input\n            }], beforeRowWrap: [{\n                type: Input\n            }], beforeSelectColumns: [{\n                type: Input\n            }], beforeSelectionHighlightSet: [{\n                type: Input\n            }], beforeSelectRows: [{\n                type: Input\n            }], beforeSetCellMeta: [{\n                type: Input\n            }], beforeSetRangeEnd: [{\n                type: Input\n            }], beforeSetRangeStart: [{\n                type: Input\n            }], beforeSetRangeStartOnly: [{\n                type: Input\n            }], beforeStretchingColumnWidth: [{\n                type: Input\n            }], beforeTouchScroll: [{\n                type: Input\n            }], beforeTrimRow: [{\n                type: Input\n            }], beforeUndo: [{\n                type: Input\n            }], beforeUndoStackChange: [{\n                type: Input\n            }], beforeUnhideColumns: [{\n                type: Input\n            }], beforeUnhideRows: [{\n                type: Input\n            }], beforeUnmergeCells: [{\n                type: Input\n            }], beforeUntrimRow: [{\n                type: Input\n            }], beforeUpdateData: [{\n                type: Input\n            }], beforeValidate: [{\n                type: Input\n            }], beforeValueRender: [{\n                type: Input\n            }], beforeViewportScroll: [{\n                type: Input\n            }], beforeViewportScrollHorizontally: [{\n                type: Input\n            }], beforeViewportScrollVertically: [{\n                type: Input\n            }], beforeViewRender: [{\n                type: Input\n            }], construct: [{\n                type: Input\n            }], init: [{\n                type: Input\n            }], modifyAutoColumnSizeSeed: [{\n                type: Input\n            }], modifyAutofillRange: [{\n                type: Input\n            }], modifyColHeader: [{\n                type: Input\n            }], modifyColumnHeaderHeight: [{\n                type: Input\n            }], modifyColumnHeaderValue: [{\n                type: Input\n            }], modifyColWidth: [{\n                type: Input\n            }], modifyCopyableRange: [{\n                type: Input\n            }], modifyFocusedElement: [{\n                type: Input\n            }], modifyData: [{\n                type: Input\n            }], modifyFocusOnTabNavigation: [{\n                type: Input\n            }], modifyGetCellCoords: [{\n                type: Input\n            }], modifyRowData: [{\n                type: Input\n            }], modifyRowHeader: [{\n                type: Input\n            }], modifyRowHeaderWidth: [{\n                type: Input\n            }], modifyRowHeight: [{\n                type: Input\n            }], modifySourceData: [{\n                type: Input\n            }], modifyTransformEnd: [{\n                type: Input\n            }], modifyTransformStart: [{\n                type: Input\n            }], persistentStateLoad: [{\n                type: Input\n            }], persistentStateReset: [{\n                type: Input\n            }], persistentStateSave: [{\n                type: Input\n            }] } });\n\nclass HotColumnComponent {\n    constructor(parentComponent) {\n        this.parentComponent = parentComponent;\n        this.firstRun = true;\n    }\n    ngOnInit() {\n        this.firstRun = false;\n        this.parentComponent.addColumn(this);\n    }\n    ngOnChanges() {\n        if (this.firstRun) {\n            return;\n        }\n        this.parentComponent.onAfterColumnsChange();\n    }\n    ngOnDestroy() {\n        this.parentComponent.removeColumn(this);\n    }\n}\nHotColumnComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotColumnComponent, deps: [{ token: HotTableComponent }], target: i0.ɵɵFactoryTarget.Component });\nHotColumnComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: HotColumnComponent, selector: \"hot-column\", inputs: { allowEmpty: \"allowEmpty\", allowHtml: \"allowHtml\", allowInvalid: \"allowInvalid\", checkedTemplate: \"checkedTemplate\", className: \"className\", columnSorting: \"columnSorting\", colWidths: \"colWidths\", commentedCellClassName: \"commentedCellClassName\", copyable: \"copyable\", correctFormat: \"correctFormat\", data: \"data\", dateFormat: \"dateFormat\", defaultDate: \"defaultDate\", editor: \"editor\", filteringCaseSensitive: \"filteringCaseSensitive\", invalidCellClassName: \"invalidCellClassName\", label: \"label\", language: \"language\", noWordWrapClassName: \"noWordWrapClassName\", numericFormat: \"numericFormat\", placeholder: \"placeholder\", placeholderCellClassName: \"placeholderCellClassName\", readOnly: \"readOnly\", readOnlyCellClassName: \"readOnlyCellClassName\", renderer: \"renderer\", selectOptions: \"selectOptions\", skipColumnOnPaste: \"skipColumnOnPaste\", sortByRelevance: \"sortByRelevance\", source: \"source\", strict: \"strict\", title: \"title\", trimDropdown: \"trimDropdown\", type: \"type\", uncheckedTemplate: \"uncheckedTemplate\", validator: \"validator\", visibleRows: \"visibleRows\", width: \"width\", wordWrap: \"wordWrap\" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotColumnComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'hot-column',\n                    template: '',\n                }]\n        }], ctorParameters: function () { return [{ type: HotTableComponent }]; }, propDecorators: { allowEmpty: [{\n                type: Input\n            }], allowHtml: [{\n                type: Input\n            }], allowInvalid: [{\n                type: Input\n            }], checkedTemplate: [{\n                type: Input\n            }], className: [{\n                type: Input\n            }], columnSorting: [{\n                type: Input\n            }], colWidths: [{\n                type: Input\n            }], commentedCellClassName: [{\n                type: Input\n            }], copyable: [{\n                type: Input\n            }], correctFormat: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], dateFormat: [{\n                type: Input\n            }], defaultDate: [{\n                type: Input\n            }], editor: [{\n                type: Input\n            }], filteringCaseSensitive: [{\n                type: Input\n            }], invalidCellClassName: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], language: [{\n                type: Input\n            }], noWordWrapClassName: [{\n                type: Input\n            }], numericFormat: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], placeholderCellClassName: [{\n                type: Input\n            }], readOnly: [{\n                type: Input\n            }], readOnlyCellClassName: [{\n                type: Input\n            }], renderer: [{\n                type: Input\n            }], selectOptions: [{\n                type: Input\n            }], skipColumnOnPaste: [{\n                type: Input\n            }], sortByRelevance: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], strict: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], trimDropdown: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], uncheckedTemplate: [{\n                type: Input\n            }], validator: [{\n                type: Input\n            }], visibleRows: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], wordWrap: [{\n                type: Input\n            }] } });\n\nclass HotTableModule {\n    static forRoot() {\n        return {\n            ngModule: HotTableModule,\n            providers: [HotTableRegisterer],\n        };\n    }\n}\nHotTableModule.version = '14.1.0';\nHotTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHotTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotTableModule, declarations: [HotTableComponent,\n        HotColumnComponent], exports: [HotTableComponent,\n        HotColumnComponent] });\nHotTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotTableModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: HotTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        HotTableComponent,\n                        HotColumnComponent,\n                    ],\n                    exports: [\n                        HotTableComponent,\n                        HotColumnComponent,\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of hot-table\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HOT_DESTROYED_WARNING, HotColumnComponent, HotSettingsResolver, HotTableComponent, HotTableModule, HotTableRegisterer };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AACpG,OAAOC,YAAY,MAAM,mBAAmB;AAAC;AAE7C,MAAMC,SAAS,GAAG,IAAIC,GAAG,EAAE;AAC3B,MAAMC,qBAAqB,GAAG,+EAA+E,GACzG,iBAAiB;AACrB,MAAMC,kBAAkB,CAAC;EACrBC,WAAW,CAACC,EAAE,EAAE;IACZ,MAAMC,WAAW,GAAGN,SAAS,CAACO,GAAG,CAACF,EAAE,CAAC;IACrC,IAAIC,WAAW,CAACE,WAAW,EAAE;MACzBC,OAAO,CAACC,IAAI,CAACR,qBAAqB,CAAC;MACnC,OAAO,IAAI;IACf;IACA,OAAOI,WAAW;EACtB;EACAK,gBAAgB,CAACN,EAAE,EAAEO,QAAQ,EAAE;IAC3B,OAAOZ,SAAS,CAACa,GAAG,CAACR,EAAE,EAAEO,QAAQ,CAAC;EACtC;EACAE,cAAc,CAACT,EAAE,EAAE;IACf,OAAOL,SAAS,CAACe,MAAM,CAACV,EAAE,CAAC;EAC/B;AACJ;AACAF,kBAAkB,CAACa,IAAI;EAAA,iBAAyFb,kBAAkB;AAAA,CAAoD;AACtLA,kBAAkB,CAACc,KAAK,kBAD8EzB,EAAE;EAAA,OACYW,kBAAkB;EAAA,SAAlBA,kBAAkB;AAAA,EAAG;AACzI;EAAA,mDAFsGX,EAAE,mBAEZW,kBAAkB,EAAc,CAAC;IACjHe,IAAI,EAAEzB;EACV,CAAC,CAAC;AAAA;AAEV,MAAM0B,iBAAiB,GAAGC,MAAM,CAACC,IAAI,CAACtB,YAAY,CAACuB,eAAe,CAAC;AACnE,MAAMC,eAAe,GAAGxB,YAAY,CAACyB,KAAK,CAACC,aAAa,EAAE;AAC1D,MAAMC,mBAAmB,CAAC;EACtBC,aAAa,CAACC,SAAS,EAAE;IACrB,MAAMC,gBAAgB,GAAG,UAAU,IAAID,SAAS,IAAK,OAAOA,SAAS,CAAC,UAAU,CAAC,KAAK,QAAS;IAC/F,MAAME,cAAc,GAAGD,gBAAgB,GAAGD,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IACpE,MAAMG,OAAO,GAAGR,eAAe,CAACS,MAAM,CAACb,iBAAiB,CAAC;IACzDY,OAAO,CAACE,OAAO,CAACC,GAAG,IAAI;MACnB,MAAMC,MAAM,GAAGZ,eAAe,CAACa,OAAO,CAACF,GAAG,CAAC,GAAG,CAAC,CAAC;MAChD,IAAIG,MAAM;MACV,IAAIR,gBAAgB,IAAIM,MAAM,EAAE;QAC5BE,MAAM,GAAGT,SAAS,CAAC,UAAU,CAAC,CAACM,GAAG,CAAC;MACvC;MACA,IAAIN,SAAS,CAACM,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE;QAC3BG,MAAM,GAAGT,SAAS,CAACM,GAAG,CAAC;MAC3B;MACA,IAAIG,MAAM,KAAK,KAAK,CAAC,EAAE;QACnB;MACJ,CAAC,MACI,IAAK,QAAQ,IAAIT,SAAS,IAAM,OAAOS,MAAM,KAAK,UAAU,IAAIF,MAAO,EAAE;QAC1EL,cAAc,CAACI,GAAG,CAAC,GAAG,UAAU,GAAGI,IAAI,EAAE;UACrC,OAAOV,SAAS,CAACW,MAAM,CAACC,GAAG,CAAC,MAAMH,MAAM,CAACI,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC,CAAC;QAC/D,CAAC;MACL,CAAC,MACI;QACDR,cAAc,CAACI,GAAG,CAAC,GAAGG,MAAM;MAChC;IACJ,CAAC,CAAC;IACF,OAAOP,cAAc;EACzB;EACAY,cAAc,CAACC,OAAO,EAAE;IACpB,MAAMC,MAAM,GAAG,CAAC,CAAC;IACjB,MAAMC,UAAU,GAAGzB,MAAM,CAACC,IAAI,CAACsB,OAAO,CAAC;IACvCE,UAAU,CAACZ,OAAO,CAAEa,KAAK,IAAK;MAC1B,IAAIH,OAAO,CAACI,cAAc,CAACD,KAAK,CAAC,EAAE;QAC/BF,MAAM,CAACE,KAAK,CAAC,GAAGH,OAAO,CAACG,KAAK,CAAC,CAACE,YAAY;MAC/C;IACJ,CAAC,CAAC;IACF,OAAOJ,MAAM;EACjB;AACJ;AACAlB,mBAAmB,CAACV,IAAI;EAAA,iBAAyFU,mBAAmB;AAAA,CAAoD;AACxLA,mBAAmB,CAACT,KAAK,kBAhD6EzB,EAAE;EAAA,OAgDakC,mBAAmB;EAAA,SAAnBA,mBAAmB;AAAA,EAAG;AAC3I;EAAA,mDAjDsGlC,EAAE,mBAiDZkC,mBAAmB,EAAc,CAAC;IAClHR,IAAI,EAAEzB;EACV,CAAC,CAAC;AAAA;AAEV,MAAMwD,iBAAiB,CAAC;EACpBC,WAAW,CAACC,mBAAmB,EAAEC,oBAAoB,EAAEb,MAAM,EAAE;IAC3D,IAAI,CAACY,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACb,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACc,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACC,KAAK,GAAG,EAAE;EACnB;EACA,IAAIjD,WAAW,GAAG;IACd,IAAI,CAAC,IAAI,CAAC+C,aAAa,IAAK,IAAI,CAACA,aAAa,IAAI,CAAC,IAAI,CAACA,aAAa,CAAC7C,WAAY,EAAE;MAChF;MACA,OAAO,IAAI,CAAC6C,aAAa;IAC7B,CAAC,MACI;MACD,IAAI,CAACF,mBAAmB,CAACrC,cAAc,CAAC,IAAI,CAACyC,KAAK,CAAC;MACnD9C,OAAO,CAACC,IAAI,CAACR,qBAAqB,CAAC;MACnC,OAAO,IAAI;IACf;EACJ;EACA,IAAII,WAAW,CAACA,WAAW,EAAE;IACzB,IAAI,CAAC+C,aAAa,GAAG/C,WAAW;EACpC;EACAkD,eAAe,GAAG;IACd,MAAMzB,OAAO,GAAG,IAAI,CAACqB,oBAAoB,CAACzB,aAAa,CAAC,IAAI,CAAC;IAC7D,IAAI,IAAI,CAAC2B,iBAAiB,CAACG,MAAM,GAAG,CAAC,EAAE;MACnC,MAAMC,OAAO,GAAG,EAAE;MAClB,IAAI,CAACJ,iBAAiB,CAACrB,OAAO,CAAE0B,MAAM,IAAK;QACvCD,OAAO,CAACE,IAAI,CAAC,IAAI,CAACR,oBAAoB,CAACzB,aAAa,CAACgC,MAAM,CAAC,CAAC;MACjE,CAAC,CAAC;MACF5B,OAAO,CAAC,SAAS,CAAC,GAAG2B,OAAO;IAChC;IACA,IAAI,CAACnB,MAAM,CAACsB,iBAAiB,CAAC,MAAM;MAChC,IAAI,CAACvD,WAAW,GAAG,IAAIP,YAAY,CAAC+D,IAAI,CAAC,IAAI,CAACC,SAAS,CAACC,aAAa,EAAEjC,OAAO,CAAC;MAC/E,IAAI,IAAI,CAACwB,KAAK,EAAE;QACZ,IAAI,CAACJ,mBAAmB,CAACxC,gBAAgB,CAAC,IAAI,CAAC4C,KAAK,EAAE,IAAI,CAACjD,WAAW,CAAC;MAC3E;MACA;MACA,IAAI,CAACA,WAAW,CAAC2D,IAAI,EAAE;IAC3B,CAAC,CAAC;EACN;EACAC,WAAW,CAACvB,OAAO,EAAE;IACjB,IAAI,IAAI,CAACrC,WAAW,KAAK,IAAI,EAAE;MAC3B;IACJ;IACA,MAAM6D,UAAU,GAAG,IAAI,CAACf,oBAAoB,CAACV,cAAc,CAACC,OAAO,CAAC;IACpE,IAAI,CAACyB,cAAc,CAACD,UAAU,CAAC;EACnC;EACAE,WAAW,GAAG;IACV,IAAI,CAAC9B,MAAM,CAACsB,iBAAiB,CAAC,MAAM;MAChC,IAAI,IAAI,CAACvD,WAAW,EAAE;QAClB,IAAI,CAACA,WAAW,CAACgE,OAAO,EAAE;MAC9B;IACJ,CAAC,CAAC;IACF,IAAI,IAAI,CAACf,KAAK,EAAE;MACZ,IAAI,CAACJ,mBAAmB,CAACrC,cAAc,CAAC,IAAI,CAACyC,KAAK,CAAC;IACvD;EACJ;EACAa,cAAc,CAACG,WAAW,EAAE;IACxB,IAAI,CAAC,IAAI,CAACjE,WAAW,EAAE;MACnB;IACJ;IACA,IAAI,CAACiC,MAAM,CAACsB,iBAAiB,CAAC,MAAM;MAChC,IAAI,CAACvD,WAAW,CAACkE,cAAc,CAACD,WAAW,EAAE,KAAK,CAAC;IACvD,CAAC,CAAC;EACN;EACAE,oBAAoB,GAAG;IACnB,IAAI,IAAI,CAACnB,iBAAiB,KAAK,KAAK,CAAC,EAAE;MACnC;IACJ;IACA,IAAI,IAAI,CAACA,iBAAiB,CAACG,MAAM,GAAG,CAAC,EAAE;MACnC,MAAMC,OAAO,GAAG,EAAE;MAClB,IAAI,CAACJ,iBAAiB,CAACrB,OAAO,CAAE0B,MAAM,IAAK;QACvCD,OAAO,CAACE,IAAI,CAAC,IAAI,CAACR,oBAAoB,CAACzB,aAAa,CAACgC,MAAM,CAAC,CAAC;MACjE,CAAC,CAAC;MACF,MAAMQ,UAAU,GAAG;QACfT,OAAO,EAAEA;MACb,CAAC;MACD,IAAI,CAACU,cAAc,CAACD,UAAU,CAAC;IACnC;EACJ;EACAO,0BAA0B,GAAG;IACzB,MAAMhB,OAAO,GAAG,EAAE;IAClB,IAAI,IAAI,CAACJ,iBAAiB,CAACG,MAAM,GAAG,CAAC,EAAE;MACnC,IAAI,CAACH,iBAAiB,CAACrB,OAAO,CAAE0B,MAAM,IAAK;QACvCD,OAAO,CAACE,IAAI,CAAC,IAAI,CAACR,oBAAoB,CAACzB,aAAa,CAACgC,MAAM,CAAC,CAAC;MACjE,CAAC,CAAC;IACN;IACA,IAAI,CAACS,cAAc,CAAC;MAAEV;IAAQ,CAAC,CAAC;EACpC;EACAiB,SAAS,CAAChB,MAAM,EAAE;IACd,IAAI,CAACL,iBAAiB,CAACM,IAAI,CAACD,MAAM,CAAC;IACnC,IAAI,CAACe,0BAA0B,EAAE;EACrC;EACAE,YAAY,CAACjB,MAAM,EAAE;IACjB,MAAMkB,KAAK,GAAG,IAAI,CAACvB,iBAAiB,CAAClB,OAAO,CAACuB,MAAM,CAAC;IACpD,IAAI,CAACL,iBAAiB,CAACwB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IACvC,IAAI,CAACH,0BAA0B,EAAE;EACrC;AACJ;AACAzB,iBAAiB,CAACjC,IAAI;EAAA,iBAAyFiC,iBAAiB,EAzJ1BzD,EAAE,mBAyJ0CW,kBAAkB,GAzJ9DX,EAAE,mBAyJyEkC,mBAAmB,GAzJ9FlC,EAAE,mBAyJyGA,EAAE,CAACuF,MAAM;AAAA,CAA4C;AACtQ9B,iBAAiB,CAAC+B,IAAI,kBA1JgFxF,EAAE;EAAA,MA0JLyD,iBAAiB;EAAA;EAAA;IAAA;MA1JdzD,EAAE;IAAA;IAAA;MAAA;MAAFA,EAAE,qoBA0J08X,CAACW,kBAAkB,EAAEuB,mBAAmB,CAAC,GA1Jr/XlC,EAAE;EAAA;EAAA;EAAA;EAAA;IAAA;MAAFA,EAAE,0BA0J8qY;IAAA;IAAA;MA1JhrYA,EAAE,4BA0JuqY;IAAA;EAAA;EAAA;AAAA,EAAqE;AACp1Y;EAAA,mDA3JsGA,EAAE,mBA2JZyD,iBAAiB,EAAc,CAAC;IAChH/B,IAAI,EAAExB,SAAS;IACf4C,IAAI,EAAE,CAAC;MACC2C,QAAQ,EAAE,WAAW;MACrBC,QAAQ,EAAE,qCAAqC;MAC/CC,aAAa,EAAExF,iBAAiB,CAACyF,IAAI;MACrCC,SAAS,EAAE,CAAClF,kBAAkB,EAAEuB,mBAAmB;IACvD,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAER,IAAI,EAAEf;IAAmB,CAAC,EAAE;MAAEe,IAAI,EAAEQ;IAAoB,CAAC,EAAE;MAAER,IAAI,EAAE1B,EAAE,CAACuF;IAAO,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAEhB,SAAS,EAAE,CAAC;MACtJ7C,IAAI,EAAEtB,SAAS;MACf0C,IAAI,EAAE,CAAC,WAAW,EAAE;QAAEgD,MAAM,EAAE;MAAM,CAAC;IACzC,CAAC,CAAC;IAAEC,QAAQ,EAAE,CAAC;MACXrE,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0D,KAAK,EAAE,CAAC;MACRrC,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2F,qBAAqB,EAAE,CAAC;MACxBtE,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4F,UAAU,EAAE,CAAC;MACbvE,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6F,SAAS,EAAE,CAAC;MACZxE,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8F,iBAAiB,EAAE,CAAC;MACpBzE,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+F,cAAc,EAAE,CAAC;MACjB1E,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgG,YAAY,EAAE,CAAC;MACf3E,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiG,iBAAiB,EAAE,CAAC;MACpB5E,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkG,cAAc,EAAE,CAAC;MACjB7E,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmG,QAAQ,EAAE,CAAC;MACX9E,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoG,cAAc,EAAE,CAAC;MACjB/E,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqG,WAAW,EAAE,CAAC;MACdhF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsG,WAAW,EAAE,CAAC;MACdjF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuG,WAAW,EAAE,CAAC;MACdlF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwG,mBAAmB,EAAE,CAAC;MACtBnF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyG,IAAI,EAAE,CAAC;MACPpF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0G,KAAK,EAAE,CAAC;MACRrF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2G,eAAe,EAAE,CAAC;MAClBtF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4G,SAAS,EAAE,CAAC;MACZvF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6G,UAAU,EAAE,CAAC;MACbxF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8G,kBAAkB,EAAE,CAAC;MACrBzF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+G,kBAAkB,EAAE,CAAC;MACrB1F,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6D,OAAO,EAAE,CAAC;MACVxC,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgH,aAAa,EAAE,CAAC;MAChB3F,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiH,aAAa,EAAE,CAAC;MAChB5F,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkH,SAAS,EAAE,CAAC;MACZ7F,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmH,sBAAsB,EAAE,CAAC;MACzB9F,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoH,QAAQ,EAAE,CAAC;MACX/F,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqH,WAAW,EAAE,CAAC;MACdhG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsH,QAAQ,EAAE,CAAC;MACXjG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuH,SAAS,EAAE,CAAC;MACZlG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwH,aAAa,EAAE,CAAC;MAChBnG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyH,mBAAmB,EAAE,CAAC;MACtBpG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0H,sBAAsB,EAAE,CAAC;MACzBrG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2H,mBAAmB,EAAE,CAAC;MACtBtG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4H,aAAa,EAAE,CAAC;MAChBvG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6H,IAAI,EAAE,CAAC;MACPxG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8H,UAAU,EAAE,CAAC;MACbzG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+H,UAAU,EAAE,CAAC;MACb1G,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgI,gBAAgB,EAAE,CAAC;MACnB3G,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiI,WAAW,EAAE,CAAC;MACd5G,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkI,aAAa,EAAE,CAAC;MAChB7G,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmI,sBAAsB,EAAE,CAAC;MACzB9G,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoI,YAAY,EAAE,CAAC;MACf/G,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqI,YAAY,EAAE,CAAC;MACfhH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsI,MAAM,EAAE,CAAC;MACTjH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuI,kBAAkB,EAAE,CAAC;MACrBlH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwI,UAAU,EAAE,CAAC;MACbnH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyI,UAAU,EAAE,CAAC;MACbpH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0I,MAAM,EAAE,CAAC;MACTrH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2I,sBAAsB,EAAE,CAAC;MACzBtH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4I,OAAO,EAAE,CAAC;MACVvH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6I,gBAAgB,EAAE,CAAC;MACnBxH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8I,iBAAiB,EAAE,CAAC;MACpBzH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+I,eAAe,EAAE,CAAC;MAClB1H,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgJ,YAAY,EAAE,CAAC;MACf3H,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiJ,QAAQ,EAAE,CAAC;MACX5H,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkJ,iBAAiB,EAAE,CAAC;MACpB7H,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmJ,MAAM,EAAE,CAAC;MACT9H,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoJ,aAAa,EAAE,CAAC;MAChB/H,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqJ,UAAU,EAAE,CAAC;MACbhI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsJ,oBAAoB,EAAE,CAAC;MACvBjI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuJ,WAAW,EAAE,CAAC;MACdlI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwJ,KAAK,EAAE,CAAC;MACRnI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyJ,QAAQ,EAAE,CAAC;MACXpI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0J,eAAe,EAAE,CAAC;MAClBrI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2J,UAAU,EAAE,CAAC;MACbtI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4J,MAAM,EAAE,CAAC;MACTvI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6J,kBAAkB,EAAE,CAAC;MACrBxI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8J,gBAAgB,EAAE,CAAC;MACnBzI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+J,kBAAkB,EAAE,CAAC;MACrB1I,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgK,aAAa,EAAE,CAAC;MAChB3I,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiK,eAAe,EAAE,CAAC;MAClB5I,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkK,OAAO,EAAE,CAAC;MACV7I,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmK,OAAO,EAAE,CAAC;MACV9I,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoK,UAAU,EAAE,CAAC;MACb/I,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqK,OAAO,EAAE,CAAC;MACVhJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsK,OAAO,EAAE,CAAC;MACVjJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuK,YAAY,EAAE,CAAC;MACflJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwK,YAAY,EAAE,CAAC;MACfnJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyK,kBAAkB,EAAE,CAAC;MACrBpJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0K,gBAAgB,EAAE,CAAC;MACnBrJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2K,aAAa,EAAE,CAAC;MAChBtJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4K,UAAU,EAAE,CAAC;MACbvJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6K,mBAAmB,EAAE,CAAC;MACtBxJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8K,aAAa,EAAE,CAAC;MAChBzJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+K,oBAAoB,EAAE,CAAC;MACvB1J,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgL,qBAAqB,EAAE,CAAC;MACxB3J,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiL,eAAe,EAAE,CAAC;MAClB5J,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkL,WAAW,EAAE,CAAC;MACd7J,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmL,wBAAwB,EAAE,CAAC;MAC3B9J,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoL,eAAe,EAAE,CAAC;MAClB/J,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqL,YAAY,EAAE,CAAC;MACfhK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsL,QAAQ,EAAE,CAAC;MACXjK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuL,qBAAqB,EAAE,CAAC;MACxBlK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwL,gBAAgB,EAAE,CAAC;MACnBnK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyL,aAAa,EAAE,CAAC;MAChBpK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0L,QAAQ,EAAE,CAAC;MACXrK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2L,UAAU,EAAE,CAAC;MACbtK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4L,cAAc,EAAE,CAAC;MACjBvK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6L,UAAU,EAAE,CAAC;MACbxK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8L,MAAM,EAAE,CAAC;MACTzK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+L,aAAa,EAAE,CAAC;MAChB1K,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgM,aAAa,EAAE,CAAC;MAChB3K,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiM,iBAAiB,EAAE,CAAC;MACpB5K,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkM,cAAc,EAAE,CAAC;MACjB7K,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmM,eAAe,EAAE,CAAC;MAClB9K,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoM,MAAM,EAAE,CAAC;MACT/K,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqM,SAAS,EAAE,CAAC;MACZhL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsM,SAAS,EAAE,CAAC;MACZjL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuM,QAAQ,EAAE,CAAC;MACXlL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwM,MAAM,EAAE,CAAC;MACTnL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyM,cAAc,EAAE,CAAC;MACjBpL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0M,QAAQ,EAAE,CAAC;MACXrL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2M,KAAK,EAAE,CAAC;MACRtL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4M,YAAY,EAAE,CAAC;MACfvL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6M,QAAQ,EAAE,CAAC;MACXxL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8M,cAAc,EAAE,CAAC;MACjBzL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqB,IAAI,EAAE,CAAC;MACPA,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+M,iBAAiB,EAAE,CAAC;MACpB1L,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgN,IAAI,EAAE,CAAC;MACP3L,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiN,SAAS,EAAE,CAAC;MACZ5L,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkN,6BAA6B,EAAE,CAAC;MAChC7L,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmN,0BAA0B,EAAE,CAAC;MAC7B9L,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoN,WAAW,EAAE,CAAC;MACd/L,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqN,KAAK,EAAE,CAAC;MACRhM,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsN,QAAQ,EAAE,CAAC;MACXjM,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuN,aAAa,EAAE,CAAC;MAChBlM,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwN,aAAa,EAAE,CAAC;MAChBnM,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyN,iBAAiB,EAAE,CAAC;MACpBpM,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0N,kBAAkB,EAAE,CAAC;MACrBrM,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2N,WAAW,EAAE,CAAC;MACdtM,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4N,oBAAoB,EAAE,CAAC;MACvBvM,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6N,mBAAmB,EAAE,CAAC;MACtBxM,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8N,iBAAiB,EAAE,CAAC;MACpBzM,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+N,iBAAiB,EAAE,CAAC;MACpB1M,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgO,eAAe,EAAE,CAAC;MAClB3M,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiO,iBAAiB,EAAE,CAAC;MACpB5M,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkO,yBAAyB,EAAE,CAAC;MAC5B7M,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmO,eAAe,EAAE,CAAC;MAClB9M,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoO,mBAAmB,EAAE,CAAC;MACtB/M,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqO,8BAA8B,EAAE,CAAC;MACjChN,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsO,oBAAoB,EAAE,CAAC;MACvBjN,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuO,oBAAoB,EAAE,CAAC;MACvBlN,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwO,SAAS,EAAE,CAAC;MACZnN,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyO,cAAc,EAAE,CAAC;MACjBpN,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0O,cAAc,EAAE,CAAC;MACjBrN,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2O,cAAc,EAAE,CAAC;MACjBtN,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4O,QAAQ,EAAE,CAAC;MACXvN,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6O,aAAa,EAAE,CAAC;MAChBxN,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8O,YAAY,EAAE,CAAC;MACfzN,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+O,gBAAgB,EAAE,CAAC;MACnB1N,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgP,oBAAoB,EAAE,CAAC;MACvB3N,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiP,kBAAkB,EAAE,CAAC;MACrB5N,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkP,+BAA+B,EAAE,CAAC;MAClC7N,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmP,qBAAqB,EAAE,CAAC;MACxB9N,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoP,qBAAqB,EAAE,CAAC;MACxB/N,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqP,WAAW,EAAE,CAAC;MACdhO,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsP,yBAAyB,EAAE,CAAC;MAC5BjO,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuP,gBAAgB,EAAE,CAAC;MACnBlO,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwP,iBAAiB,EAAE,CAAC;MACpBnO,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyP,6BAA6B,EAAE,CAAC;MAChCpO,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0P,iBAAiB,EAAE,CAAC;MACpBrO,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2P,0BAA0B,EAAE,CAAC;MAC7BtO,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4P,gBAAgB,EAAE,CAAC;MACnBvO,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6P,aAAa,EAAE,CAAC;MAChBxO,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8P,SAAS,EAAE,CAAC;MACZzO,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+P,mBAAmB,EAAE,CAAC;MACtB1O,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgQ,WAAW,EAAE,CAAC;MACd3O,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiQ,aAAa,EAAE,CAAC;MAChB5O,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkQ,eAAe,EAAE,CAAC;MAClB7O,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmQ,uBAAuB,EAAE,CAAC;MAC1B9O,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoQ,yBAAyB,EAAE,CAAC;MAC5B/O,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqQ,mBAAmB,EAAE,CAAC;MACtBhP,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsQ,yBAAyB,EAAE,CAAC;MAC5BjP,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuQ,2BAA2B,EAAE,CAAC;MAC9BlP,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwQ,sBAAsB,EAAE,CAAC;MACzBnP,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyQ,yBAAyB,EAAE,CAAC;MAC5BpP,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0Q,0BAA0B,EAAE,CAAC;MAC7BrP,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2Q,oBAAoB,EAAE,CAAC;MACvBtP,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4Q,mBAAmB,EAAE,CAAC;MACtBvP,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6Q,oBAAoB,EAAE,CAAC;MACvBxP,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8Q,kBAAkB,EAAE,CAAC;MACrBzP,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+Q,UAAU,EAAE,CAAC;MACb1P,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgR,uBAAuB,EAAE,CAAC;MAC1B3P,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiR,SAAS,EAAE,CAAC;MACZ5P,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkR,oBAAoB,EAAE,CAAC;MACvB7P,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmR,sBAAsB,EAAE,CAAC;MACzB9P,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoR,mBAAmB,EAAE,CAAC;MACtB/P,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqR,cAAc,EAAE,CAAC;MACjBhQ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsR,cAAc,EAAE,CAAC;MACjBjQ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuR,WAAW,EAAE,CAAC;MACdlQ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwR,aAAa,EAAE,CAAC;MAChBnQ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyR,YAAY,EAAE,CAAC;MACfpQ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0R,cAAc,EAAE,CAAC;MACjBrQ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2R,sBAAsB,EAAE,CAAC;MACzBtQ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4R,uBAAuB,EAAE,CAAC;MAC1BvQ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6R,qBAAqB,EAAE,CAAC;MACxBxQ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8R,WAAW,EAAE,CAAC;MACdzQ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+R,kBAAkB,EAAE,CAAC;MACrB1Q,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgS,cAAc,EAAE,CAAC;MACjB3Q,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiS,oBAAoB,EAAE,CAAC;MACvB5Q,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkS,iBAAiB,EAAE,CAAC;MACpB7Q,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmS,uBAAuB,EAAE,CAAC;MAC1B9Q,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoS,eAAe,EAAE,CAAC;MAClB/Q,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqS,gBAAgB,EAAE,CAAC;MACnBhR,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsS,kBAAkB,EAAE,CAAC;MACrBjR,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuS,qBAAqB,EAAE,CAAC;MACxBlR,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwS,wBAAwB,EAAE,CAAC;MAC3BnR,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyS,eAAe,EAAE,CAAC;MAClBpR,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0S,iBAAiB,EAAE,CAAC;MACpBrR,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2S,iBAAiB,EAAE,CAAC;MACpBtR,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4S,YAAY,EAAE,CAAC;MACfvR,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6S,SAAS,EAAE,CAAC;MACZxR,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8S,oBAAoB,EAAE,CAAC;MACvBzR,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+S,kBAAkB,EAAE,CAAC;MACrB1R,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgT,eAAe,EAAE,CAAC;MAClB3R,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiT,aAAa,EAAE,CAAC;MAChB5R,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkT,iBAAiB,EAAE,CAAC;MACpB7R,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmT,cAAc,EAAE,CAAC;MACjB9R,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoT,eAAe,EAAE,CAAC;MAClB/R,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqT,mBAAmB,EAAE,CAAC;MACtBhS,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsT,aAAa,EAAE,CAAC;MAChBjS,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuT,qCAAqC,EAAE,CAAC;MACxClS,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwT,kCAAkC,EAAE,CAAC;MACrCnS,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyT,eAAe,EAAE,CAAC;MAClBpS,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0T,cAAc,EAAE,CAAC;MACjBrS,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2T,cAAc,EAAE,CAAC;MACjBtS,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4T,mBAAmB,EAAE,CAAC;MACtBvS,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6T,YAAY,EAAE,CAAC;MACfxS,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8T,kBAAkB,EAAE,CAAC;MACrBzS,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+T,oBAAoB,EAAE,CAAC;MACvB1S,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgU,kBAAkB,EAAE,CAAC;MACrB3S,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiU,kBAAkB,EAAE,CAAC;MACrB5S,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkU,gBAAgB,EAAE,CAAC;MACnB7S,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmU,kBAAkB,EAAE,CAAC;MACrB9S,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoU,gBAAgB,EAAE,CAAC;MACnB/S,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqU,gBAAgB,EAAE,CAAC;MACnBhT,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsU,oBAAoB,EAAE,CAAC;MACvBjT,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuU,yBAAyB,EAAE,CAAC;MAC5BlT,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwU,qBAAqB,EAAE,CAAC;MACxBnT,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyU,UAAU,EAAE,CAAC;MACbpT,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0U,eAAe,EAAE,CAAC;MAClBrT,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2U,eAAe,EAAE,CAAC;MAClBtT,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4U,SAAS,EAAE,CAAC;MACZvT,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6U,iBAAiB,EAAE,CAAC;MACpBxT,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8U,iBAAiB,EAAE,CAAC;MACpBzT,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+U,0BAA0B,EAAE,CAAC;MAC7B1T,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgV,sBAAsB,EAAE,CAAC;MACzB3T,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiV,YAAY,EAAE,CAAC;MACf5T,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkV,iBAAiB,EAAE,CAAC;MACpB7T,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmV,iBAAiB,EAAE,CAAC;MACpB9T,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoV,cAAc,EAAE,CAAC;MACjB/T,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqV,8BAA8B,EAAE,CAAC;MACjChU,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsV,2BAA2B,EAAE,CAAC;MAC9BjU,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuV,UAAU,EAAE,CAAC;MACblU,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwV,qBAAqB,EAAE,CAAC;MACxBnU,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyV,aAAa,EAAE,CAAC;MAChBpU,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0V,oBAAoB,EAAE,CAAC;MACvBrU,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2V,cAAc,EAAE,CAAC;MACjBtU,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4V,gBAAgB,EAAE,CAAC;MACnBvU,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6V,uBAAuB,EAAE,CAAC;MAC1BxU,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8V,qBAAqB,EAAE,CAAC;MACxBzU,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+V,oBAAoB,EAAE,CAAC;MACvB1U,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgW,qBAAqB,EAAE,CAAC;MACxB3U,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiW,mBAAmB,EAAE,CAAC;MACtB5U,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkW,WAAW,EAAE,CAAC;MACd7U,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmW,UAAU,EAAE,CAAC;MACb9U,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoW,qBAAqB,EAAE,CAAC;MACxB/U,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqW,uBAAuB,EAAE,CAAC;MAC1BhV,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsW,0BAA0B,EAAE,CAAC;MAC7BjV,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuW,oBAAoB,EAAE,CAAC;MACvBlV,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwW,eAAe,EAAE,CAAC;MAClBnV,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyW,eAAe,EAAE,CAAC;MAClBpV,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0W,YAAY,EAAE,CAAC;MACfrV,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2W,cAAc,EAAE,CAAC;MACjBtV,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4W,aAAa,EAAE,CAAC;MAChBvV,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6W,eAAe,EAAE,CAAC;MAClBxV,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8W,aAAa,EAAE,CAAC;MAChBzV,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+W,mBAAmB,EAAE,CAAC;MACtB1V,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgX,2BAA2B,EAAE,CAAC;MAC9B3V,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiX,gBAAgB,EAAE,CAAC;MACnB5V,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkX,iBAAiB,EAAE,CAAC;MACpB7V,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmX,iBAAiB,EAAE,CAAC;MACpB9V,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoX,mBAAmB,EAAE,CAAC;MACtB/V,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqX,uBAAuB,EAAE,CAAC;MAC1BhW,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsX,2BAA2B,EAAE,CAAC;MAC9BjW,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuX,iBAAiB,EAAE,CAAC;MACpBlW,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwX,aAAa,EAAE,CAAC;MAChBnW,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyX,UAAU,EAAE,CAAC;MACbpW,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0X,qBAAqB,EAAE,CAAC;MACxBrW,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2X,mBAAmB,EAAE,CAAC;MACtBtW,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4X,gBAAgB,EAAE,CAAC;MACnBvW,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6X,kBAAkB,EAAE,CAAC;MACrBxW,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8X,eAAe,EAAE,CAAC;MAClBzW,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+X,gBAAgB,EAAE,CAAC;MACnB1W,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgY,cAAc,EAAE,CAAC;MACjB3W,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiY,iBAAiB,EAAE,CAAC;MACpB5W,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkY,oBAAoB,EAAE,CAAC;MACvB7W,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmY,gCAAgC,EAAE,CAAC;MACnC9W,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoY,8BAA8B,EAAE,CAAC;MACjC/W,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqY,gBAAgB,EAAE,CAAC;MACnBhX,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsY,SAAS,EAAE,CAAC;MACZjX,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoE,IAAI,EAAE,CAAC;MACP/C,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuY,wBAAwB,EAAE,CAAC;MAC3BlX,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwY,mBAAmB,EAAE,CAAC;MACtBnX,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyY,eAAe,EAAE,CAAC;MAClBpX,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0Y,wBAAwB,EAAE,CAAC;MAC3BrX,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2Y,uBAAuB,EAAE,CAAC;MAC1BtX,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4Y,cAAc,EAAE,CAAC;MACjBvX,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6Y,mBAAmB,EAAE,CAAC;MACtBxX,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8Y,oBAAoB,EAAE,CAAC;MACvBzX,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+Y,UAAU,EAAE,CAAC;MACb1X,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgZ,0BAA0B,EAAE,CAAC;MAC7B3X,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiZ,mBAAmB,EAAE,CAAC;MACtB5X,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkZ,aAAa,EAAE,CAAC;MAChB7X,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmZ,eAAe,EAAE,CAAC;MAClB9X,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoZ,oBAAoB,EAAE,CAAC;MACvB/X,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqZ,eAAe,EAAE,CAAC;MAClBhY,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsZ,gBAAgB,EAAE,CAAC;MACnBjY,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuZ,kBAAkB,EAAE,CAAC;MACrBlY,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwZ,oBAAoB,EAAE,CAAC;MACvBnY,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyZ,mBAAmB,EAAE,CAAC;MACtBpY,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0Z,oBAAoB,EAAE,CAAC;MACvBrY,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2Z,mBAAmB,EAAE,CAAC;MACtBtY,IAAI,EAAErB;IACV,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAM4Z,kBAAkB,CAAC;EACrBvW,WAAW,CAACwW,eAAe,EAAE;IACzB,IAAI,CAACA,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,QAAQ,GAAG,IAAI;EACxB;EACAC,QAAQ,GAAG;IACP,IAAI,CAACD,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACD,eAAe,CAAC/U,SAAS,CAAC,IAAI,CAAC;EACxC;EACAT,WAAW,GAAG;IACV,IAAI,IAAI,CAACyV,QAAQ,EAAE;MACf;IACJ;IACA,IAAI,CAACD,eAAe,CAACjV,oBAAoB,EAAE;EAC/C;EACAJ,WAAW,GAAG;IACV,IAAI,CAACqV,eAAe,CAAC9U,YAAY,CAAC,IAAI,CAAC;EAC3C;AACJ;AACA6U,kBAAkB,CAACzY,IAAI;EAAA,iBAAyFyY,kBAAkB,EAv0B5Bja,EAAE,mBAu0B4CyD,iBAAiB;AAAA,CAA4C;AACjNwW,kBAAkB,CAACzU,IAAI,kBAx0B+ExF,EAAE;EAAA,MAw0BJia,kBAAkB;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA,WAx0BhBja,EAAE;EAAA;EAAA;EAAA;EAAA;AAAA,EAw0BssC;AAC9yC;EAAA,mDAz0BsGA,EAAE,mBAy0BZia,kBAAkB,EAAc,CAAC;IACjHvY,IAAI,EAAExB,SAAS;IACf4C,IAAI,EAAE,CAAC;MACC2C,QAAQ,EAAE,YAAY;MACtBC,QAAQ,EAAE;IACd,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEhE,IAAI,EAAE+B;IAAkB,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAEwC,UAAU,EAAE,CAAC;MAClGvE,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6F,SAAS,EAAE,CAAC;MACZxE,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgG,YAAY,EAAE,CAAC;MACf3E,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2G,eAAe,EAAE,CAAC;MAClBtF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4G,SAAS,EAAE,CAAC;MACZvF,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgH,aAAa,EAAE,CAAC;MAChB3F,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkH,SAAS,EAAE,CAAC;MACZ7F,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmH,sBAAsB,EAAE,CAAC;MACzB9F,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsH,QAAQ,EAAE,CAAC;MACXjG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwH,aAAa,EAAE,CAAC;MAChBnG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6H,IAAI,EAAE,CAAC;MACPxG,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+H,UAAU,EAAE,CAAC;MACb1G,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiI,WAAW,EAAE,CAAC;MACd5G,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsI,MAAM,EAAE,CAAC;MACTjH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2I,sBAAsB,EAAE,CAAC;MACzBtH,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsJ,oBAAoB,EAAE,CAAC;MACvBjI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwJ,KAAK,EAAE,CAAC;MACRnI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEyJ,QAAQ,EAAE,CAAC;MACXpI,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE6K,mBAAmB,EAAE,CAAC;MACtBxJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE8K,aAAa,EAAE,CAAC;MAChBzJ,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEkL,WAAW,EAAE,CAAC;MACd7J,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmL,wBAAwB,EAAE,CAAC;MAC3B9J,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsL,QAAQ,EAAE,CAAC;MACXjK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEuL,qBAAqB,EAAE,CAAC;MACxBlK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE0L,QAAQ,EAAE,CAAC;MACXrK,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEgM,aAAa,EAAE,CAAC;MAChB3K,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiM,iBAAiB,EAAE,CAAC;MACpB5K,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEmM,eAAe,EAAE,CAAC;MAClB9K,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoM,MAAM,EAAE,CAAC;MACT/K,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEwM,MAAM,EAAE,CAAC;MACTnL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE2M,KAAK,EAAE,CAAC;MACRtL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE4M,YAAY,EAAE,CAAC;MACfvL,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqB,IAAI,EAAE,CAAC;MACPA,IAAI,EAAErB;IACV,CAAC,CAAC;IAAE+M,iBAAiB,EAAE,CAAC;MACpB1L,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEiN,SAAS,EAAE,CAAC;MACZ5L,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEoN,WAAW,EAAE,CAAC;MACd/L,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEqN,KAAK,EAAE,CAAC;MACRhM,IAAI,EAAErB;IACV,CAAC,CAAC;IAAEsN,QAAQ,EAAE,CAAC;MACXjM,IAAI,EAAErB;IACV,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAMga,cAAc,CAAC;EACjB,OAAOC,OAAO,GAAG;IACb,OAAO;MACHC,QAAQ,EAAEF,cAAc;MACxBxU,SAAS,EAAE,CAAClF,kBAAkB;IAClC,CAAC;EACL;AACJ;AACA0Z,cAAc,CAACG,OAAO,GAAG,QAAQ;AACjCH,cAAc,CAAC7Y,IAAI;EAAA,iBAAyF6Y,cAAc;AAAA,CAAkD;AAC5KA,cAAc,CAACI,IAAI,kBAv6BmFza,EAAE;EAAA,MAu6BKqa;AAAc,EAE7F;AAC9BA,cAAc,CAACK,IAAI,kBA16BmF1a,EAAE,qBA06BsB;AAC9H;EAAA,mDA36BsGA,EAAE,mBA26BZqa,cAAc,EAAc,CAAC;IAC7G3Y,IAAI,EAAEpB,QAAQ;IACdwC,IAAI,EAAE,CAAC;MACC6X,YAAY,EAAE,CACVlX,iBAAiB,EACjBwW,kBAAkB,CACrB;MACDW,OAAO,EAAE,CACLnX,iBAAiB,EACjBwW,kBAAkB;IAE1B,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASvZ,qBAAqB,EAAEuZ,kBAAkB,EAAE/X,mBAAmB,EAAEuB,iBAAiB,EAAE4W,cAAc,EAAE1Z,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}